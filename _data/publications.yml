references:
- abstract: "Disclosed are improved methods and structures for verifying
    integrated circuits and in particular systems-on-a-chip constructed
    therefrom. We call methods and structures according to the present
    disclosure Symbolic Quick Error Detection or Symbolic QED,
    Illustrative characteristics of Symbolic QED include: 1) It is
    applicable to any System-on-Chip (SoC) design as long as it contains
    at least one programmable processor; 2) It is broadly applicable for
    logic bugs inside processor cores, accelerators, and uncore
    components; 3) It does not require failure reproduction; 4) It does
    not require human intervention during bug localization; 5) It does
    not require trace buffers, 6) It does not require assertions; and 7)
    It uses hardware structures called \"change detectors\" which
    introduce only a small area overhead. Symbolic QED exhibits: 1) A
    systematic (and automated) approach to inserting \"change detectors\"
    during a design phase; 2) Quick Error Detection (QED) tests that
    detect bugs with short error detection latencies and high coverage;
    and 3) Formal techniques that enable bug localization and generation
    of minimal bug traces upon bug detection."
  author:
  - family: Mitra
    given: Subhasish
  - family: Barrett
    given: Clark
  - family: Lin
    given: David
  - family: Singh
    given: Eshan
  id: MBLS20
  issued:
  - year: 2020
    month: 1
  note: Patent No. 10528448
  number: 10528448
  title: Post-silicon validation and debug using symbolic quick error
    detection
  type: patent
  url: "http://www.freepatentsonline.com/10528448.html"
- editor:
  - family: Barrett
    given: Clark
  - family: Yang
    given: Jin
  id: BY19
  issued:
  - year: 2019
    month: 10
  publisher: FMCAD Inc.
  publisher-place: San Jose, CA, USA
  title: Proceedings of formal methods in computer-aided design, FMCAD
    2019
  type: book
  url: "https://hdl.handle.net/2152/79853"
- abstract: This special issue consists of extended versions of papers
    selected from the 9th NASA Formal Methods Symposium (NFM 2017). The
    symposium was held at the NASA Ames Research Center, Moffett Field,
    CA, on May 16 - 18, 2017.
  collection-number: 4
  collection-title: Journal of automated reasoning
  editor:
  - family: Cervesato
    given: Iliano
  - family: Fernandez
    given: Maribel
  - family: Barrett
    given: Clark
  - family: Kahsai
    given: Temesghen
  id: CFB+19
  issn: 0168-7433
  issued:
  - year: 2019
    month: 12
  publisher: Springer
  title: "Special issue: Linearity and special issue: Selected extended
    papers of NFM 2017"
  title-short: Special issue
  type: book
  url: "https://link.springer.com/journal/10817/63/4"
  volume: 63
- abstract: This book constitutes the proceedings of the 9th
    International Symposium on NASA Formal Methods, NFM 2017, held in
    Moffett Field, CA, USA, in May 2017. The 23 full and 8 short papers
    presented in this volume were carefully reviewed and selected from
    77 submissions. The papers focus on formal techniques and other
    approaches for software assurance, their theory, current
    capabilities and limitations, as well as their potential application
    to aerospace, robotics, and other NASA-relevant safety-critical
    systems during all stages of the software life-cycle.
  collection-title: Lecture notes in computer science
  doi: 10.1007/978-3-319-57288-8
  editor:
  - family: Barrett
    given: Clark
  - family: Davies
    given: Misty
  - family: Kahsai
    given: Temesghen
  id: BDK17
  isbn: 978-3-319-57288-8
  issued:
  - year: 2017
    month: 5
  publisher: Springer
  publisher-place: Moffet Field, CA, USA
  title: "NASA formal methods: 9th international symposium, NFM 2017"
  title-short: NASA formal methods
  type: book
  url: "http://www.springer.com/us/book/9783319572871"
  volume: 10227
- abstract: Applications in artificial intelligence and formal
    verification have greatly benefited from the recent advances in
    Boolean Satisfiability (SAT). Often, however, applications in these
    fields require deter- mining the satisfiability of formulas in more
    expressive logics such as first-order logic. Despite the great
    progress made in the last twenty years, general-purpose first-order
    theorem provers (such as provers based on the resolution calculus)
    are typically not able to solve such formulas directly. The main
    reason for this is that many applications require not general
    first-order satisfiability, but rather satisfi- ability with respect
    to some background theory, which fixes the interpretations of
    certain predicate and function symbols.For many theories,
    specialized methods actually yield decision procedures for the
    satisfiability of quantifier-free formulas or some subclass thereof.
    This is the case, thanks to classical results in mathematics, for
    the theory of real numbers and the theory of integer arithmetic
    (without multiplication). In the last two decades, however,
    specialized decision procedures have also been discovered for a long
    and still growing list of other theories with practical
    applications. These include certain theories of arrays and of
    strings, several variants of the theory of finite sets or multisets,
    the theories of several classes of lattices, the theories of finite,
    regular and infinite trees, of lists, tuples, records, queues, hash
    tables, and bit-vectors of a fixed or arbitrary finite size.The
    research field concerned with the satisfiability of formulas with
    respect to some background theory is called Satisfiability Modulo
    Theories, or SMT, for short. In analogy with SAT, SMT procedures
    (whether they are decision procedures or not) are usually referred
    to as SMT solvers.This chapter provides a brief overview of SMT and
    its main approaches, together with references to the relevant
    literature for a deeper study. In particular, it focuses on the two
    most successful major approaches so far for implementing SMT
    solvers, usually referred to as the "eager"eager and the "lazy"lazy
    approach. We note that in recent years, ideas from both approaches
    have been combined in successful solvers, but it is still useful
    from a pedagogical approach to study them separately.
  author:
  - family: Barrett
    given: Clark
  - family: Sebastiani
    given: Roberto
  - family: Seshia
    given: Sanjit
  - family: Tinelli
    given: Cesare
  chapter-number: 33
  collection-title: Frontiers in artificial intelligence and
    applications
  container-title: Handbook of satisfiability, second edition
  editor:
  - family: Biere
    given: Armin
  - family: Heule
    given: Marijn J. H.
  - dropping-particle: van
    family: Maaren
    given: Hans
  - family: Walsh
    given: Toby
  id: BSST21
  issued:
  - year: 2021
    month: 1
  page: 825-885
  publisher: IOS Press
  title: Satisfiability modulo theories
  type: chapter
  url: "http://theory.stanford.edu/\\~barrett/pubs/BSST21.pdf"
  volume: 336
- abstract: Satisfiability Modulo Theories (SMT) refers to the problem
    of determining whether a first-order formula is satisfiable with
    respect to some logical theory. Solvers based on SMT are used as
    back-end engines in model checking applications such as bounded,
    interpolation-based, and predicate abstraction-based model checking.
    After a brief illustration of these uses, we survey the predominant
    techniques for solving SMT problems with an emphasis on the lazy
    approach, in which a propositional satisfiability (SAT) solver is
    combined with one or more theory solvers. We discuss the
    architecture of a lazy SMT solver, give examples of theory solvers,
    show how to combine such solvers modularly, and mention several
    extensions of the lazy approach.We also briefly describe the eager
    approach in which the SMT problem is reduced to a SAT problem.
    Finally, we discuss how the basic framework for determining
    satisfiability can be extended with additional functionality such as
    producing models, proofs, unsatisfiable cores, and interpolants.
  author:
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Handbook of model checking
  doi: 10.1007/978-3-319-10575-8_11
  editor:
  - family: Clarke
    given: Edmund M.
  - family: Henzinger
    given: Thomas A.
  - family: Veith
    given: Helmut
  - family: Bloem
    given: Roderick
  id: BT18
  isbn: 978-3-319-10575-8
  issued:
  - year: 2018
    month: 1
  page: 305-343
  publisher: Springer International Publishing
  title: Satisfiability modulo theories
  type: chapter
  url: "http://theory.stanford.edu/\\~barrett/pubs/BT18.pdf"
- author:
  - family: Barrett
    given: Clark
  - dropping-particle: de
    family: Moura
    given: Leonardo
  - family: Fontaine
    given: Pascal
  collection-title: Mathematical logic and foundations
  container-title: All about proofs, proofs for all
  editor:
  - family: Delahaye
    given: David
  - family: Woltzenlogel Paleo
    given: Bruno
  id: BdMF15
  isbn: 978-1-84890-166-7
  issued:
  - year: 2015
    month: 1
  page: 23-44
  publisher: College Publications
  publisher-place: London, UK
  title: Proofs in satisfiability modulo theories
  type: chapter
  url: "http://theory.stanford.edu/\\~barrett/pubs/BdMF15.pdf"
  volume: 55
- abstract: Applications in artificial intelligence and formal
    verification have greatly benefited from the recent advances in SAT.
    It is often the case, however, that applications in these fields
    require determining the satisfiability of formulas in more
    expressive logics such as first-order logic. These applications
    typically require not general first-order satisfiability, but rather
    satisfiability with respect to some background theory, which fixes
    the interpretations of certain predicate and function symbols.For
    many background theories, specialized methods actually yield
    decision procedures for the satisfiability of quantifier-free
    formulas or some subclass thereof. Specialized decision procedures
    have been discovered for a long and still growing list of theories
    with practical applications. These include the theory of equality,
    several arithmetic theories, certain theories of arrays and of
    strings, as well as theories of lists, tuples, records, queues, hash
    tables, and bit-vectors of a fixed or arbitrary finite size.The
    research field concerned with the satisfiability of formulas with
    respect to some background theory is called Satisfiability Modulo
    Theories, or SMT, for short. In analogy with SAT, SMT procedures are
    usually referred to as SMT solvers.This chapter provides a brief
    overview of SMT together with references to the relevant literature
    for a deeper study. It begins with an overview of techniques for
    solving SMT by encodings to SAT, known as the "eager"eager approach.
    The rest of the chapter is concerned with an alternative technique
    in which a SAT solver is integrated with a separate decision
    procedure (called a theory solver) for conjunctions of literals in
    the theory. This is known as the "lazy"lazy approach. After
    presenting the lazy approach as a whole, we take a closer look at
    how to construct theory solvers, how to combinine theory solvers,
    and several extensions and enhancements.
  author:
  - family: Barrett
    given: Clark
  - family: Sebastiani
    given: Roberto
  - family: Seshia
    given: Sanjit
  - family: Tinelli
    given: Cesare
  chapter-number: 26
  collection-title: Frontiers in artificial intelligence and
    applications
  container-title: Handbook of satisfiability
  editor:
  - family: Biere
    given: Armin
  - family: Heule
    given: Marijn J. H.
  - dropping-particle: van
    family: Maaren
    given: Hans
  - family: Walsh
    given: Toby
  id: BSST09
  issued:
  - year: 2009
    month: 1
  page: 825-885
  publisher: IOS Press
  title: Satisfiability modulo theories
  type: chapter
  url: "http://theory.stanford.edu/\\~barrett/pubs/BSST09.pdf"
  volume: 185
- abstract: Dynamic arrays, also referred to as vectors, are fundamental
    data structures used in many programs. Modeling their semantics
    efficiently is crucial when reasoning about such programs. The
    theory of arrays is widely supported but is not ideal, because the
    number of elements is fixed (determined by its index sort) and
    cannot be adjusted, which is a problem, given that the length of
    vectors often plays an important role when reasoning about vector
    programs. In this paper, we propose reasoning about vectors using a
    theory of sequences. We introduce the theory, propose a basic
    calculus adapted from one for the theory of strings, and extend it
    to efficiently handle common vector operations. We prove that our
    calculus is sound and show how to construct a model when it
    terminates with a saturated configuration. Finally, we describe an
    implementation of the calculus in cvc5 and demonstrate its efficacy
    by evaluating it on verification conditions for smart contracts and
    benchmarks derived from existing array benchmarks.
  author:
  - family: Sheng
    given: Ying
  - family: Nötzli
    given: Andres
  - family: Reynolds
    given: Andrew
  - family: Zohar
    given: Yoni
  - family: Dill
    given: David
  - family: Grieskamp
    given: Wolfgang
  - family: Park
    given: Junkil
  - family: Qadeer
    given: Shaz
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-023-09682-2
  id: SNR+23
  issue: 32
  issued:
  - year: 2023
    month: 9
  publisher: Springer
  title: "Reasoning about vectors: Satisfiability modulo a theory of
    sequences"
  title-short: Reasoning about vectors
  type: article-journal
  url: "https://link.springer.com/article/10.1007/s10817-023-09682-2"
  volume: 67
- abstract: Polite theory combination is a method for obtaining a solver
    for a combination of two (or more) theories using the solvers of
    each individual theory as black boxes. Unlike the earlier
    Nelson--Oppen method, which is usable only when both theories are
    stably infinite, only one of the theories needs to be strongly
    polite in order to use the polite combination method. In its
    original presentation, politeness was required from one of the
    theories rather than strong politeness, which was later proven to be
    insufficient. The first contribution of this paper is a proof that
    indeed these two notions are different, obtained by presenting a
    polite theory that is not strongly polite. We also study several
    variants of this question. The cost of the generality afforded by
    the polite combination method, compared to the Nelson--Oppen method,
    is a larger space of arrangements to consider, involving variables
    that are not necessarily shared between the purified parts of the
    input formula. The second contribution of this paper is a hybrid
    method (building on both polite and Nelson--Oppen combination),
    which aims to reduce the number of considered variables when a
    theory is stably infinite with respect to some of its sorts but not
    all of them. The time required to reason about arrangements is
    exponential in the worst case, so reducing the number of variables
    considered has the potential to improve performance significantly.
    We show preliminary evidence for this by demonstrating significant
    speed-up on a smart contract verification benchmark.
  author:
  - family: Sheng
    given: Ying
  - family: Zohar
    given: Yoni
  - family: Ringeissen
    given: Christophe
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-023-09684-0
  id: SZR+23
  issue: 34
  issued:
  - year: 2023
    month: 9
  publisher: Springer
  title: Combining stable infiniteness and (strong) politeness
  type: article-journal
  url: "https://link.springer.com/article/10.1007/s10817-023-09684-0"
  volume: 67
- abstract: Moving toward a full suite of proof-producing automated
    reasoning tools with SMT solvers that can produce full,
    independently checkable proofs for real-world problems.
  author:
  - family: Barbosa
    given: Haniel
  - family: Barrett
    given: Clark
  - family: Cook
    given: Byron
  - family: Dutertre
    given: Bruno
  - family: Kremer
    given: Gereon
  - family: Lachnitt
    given: Hanna
  - family: Niemetz
    given: Aina
  - family: Nötzli
    given: Andres
  - family: Ozdemir
    given: Alex
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Zohar
    given: Yoni
  container-title: Communications of the Association for Computing
    Machinery (CACM)
  doi: 10.1145/3587692
  id: BBC+23
  issue: 10
  issued:
  - year: 2023
    month: 10
  page: 86-95
  publisher: Association for Computing Machinery
  title: Generating and exploiting automated reasoning proof
    certificates
  type: article-journal
  url: "http://dx.doi.org/10.1145/3587692"
  volume: 66
- abstract: Every major technical invention resurfaces the dual-use
    dilemma---the new technology has the potential to be used for good
    as well as for harm. Generative AI (GenAI) techniques, such as large
    language models (LLMs) and diffusion models, have shown remarkable
    capabilities (e.g., in-context learning, code-completion, and
    text-to-image generation and editing). However, GenAI can be used
    just as well by attackers to generate new attacks and increase the
    velocity and efficacy of existing attacks. This monograph reports
    the findings of a workshop held at Google (co-organized by Stanford
    University and the University of Wisconsin-Madison) on the dual-use
    dilemma posed by GenAI. This work is not meant to be comprehensive,
    but is rather an attempt to synthesize some of the interesting
    findings from the workshop. We discuss short-term and long-term
    goals for the community on this topic. We hope this work provides
    both a launching point for a discussion on this important topic as
    well as interesting problems that the research community can work to
    address.
  author:
  - family: Barrett
    given: Clark
  - family: Boyd
    given: Brad
  - family: Bursztein
    given: Elie
  - family: Carlini
    given: Nicholas
  - family: Chen
    given: Brad
  - family: Choi
    given: Jihye
  - family: Chowdhury
    given: Amrita Roy
  - family: Christodorescu
    given: Mihai
  - family: Datta
    given: Anupam
  - family: Feizi
    given: Soheil
  - family: Fisher
    given: Kathleen
  - family: Hashimoto
    given: Tatsunori
  - family: Hendrycks
    given: Dan
  - family: Jha
    given: Somesh
  - family: Kang
    given: Daniel
  - family: Kerschbaum
    given: Florian
  - family: Mitchell
    given: Eric
  - family: Mitchell
    given: John
  - family: Ramzan
    given: Zulfikar
  - family: Shams
    given: Khawaja
  - family: Song
    given: Dawn
  - family: Taly
    given: Ankur
  - family: Yang
    given: Diyi
  container-title: Foundations and Trends in Privacy and Security
  doi: 10.1561/3300000041
  id: BBB+23
  issn: 2474-1558
  issue: 1
  issued:
  - year: 2023
    month: 1
  page: 1-52
  publisher: now publishers inc.
  title: Identifying and mitigating the security risks of generative AI
  type: article-journal
  url: "http://dx.doi.org/10.1561/3300000041"
  volume: 6
- abstract: Program synthesis is the mechanised construction of
    software. One of the main difficulties is the efficient exploration
    of the very large solution space, and tools often require a
    user-provided syntactic restriction of the search space. While
    useful in general, such syntactic restrictions provide little help
    for the generation of programs that contain non-trivial costants,
    unless the user is able to provide the constants in advance. This is
    a fundamentally difficult task for state-of-the-art synthesisers. We
    propose a new approach to the synthesis of programs with non-trivial
    constants that combines the strengths of a counterexample-guided
    inductive synthesiser with those of a theory solver, exploring the
    solution space more efficiently without relying on user guidance. We
    call this approach CEGIS($\mathcal{T}$), where $\mathcal{T}$ is a
    first-order theory. We present two exemplars, one based on
    Fourier-Motzkin (FM) variable elimination and one based on
    first-order satisfiability. We demonstrate the practical value of
    CEGIS($\mathcal{T}$) by automatically synthesising programs for a
    set of intricate benchmarks. Additionally, we present a case study
    where we integrate CEGIS($\mathcal{T}$) within the mature
    synthesiser CVC4 and show that CEGIS($\mathcal{T}$) improves CVC4's
    results.
  author:
  - family: Abate
    given: Alessandro
  - family: Barbosa
    given: Haniel
  - family: Barrett
    given: Clark
  - family: David
    given: Cristina
  - family: Kesseli
    given: Pascal
  - family: Kroening
    given: Daniel
  - family: Polgreen
    given: Elizabeth
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-023-09664-4
  id: ABB+23
  issue: 19
  issued:
  - year: 2023
    month: 5
  keyword: Program synthesis, Automated reasoning, Satisfiability modulo
    theories, Counterexample guided inductive synthesis
  publisher: Springer
  title: Synthesising programs with non-trivial constants
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/ABB+23.pdf"
  volume: 67
- abstract: Recently, Graph Neural Networks (GNNs) have been applied for
    scheduling jobs over clusters, achieving better performance than
    hand-crafted heuristics. Despite their impressive performance,
    concerns remain over whether these GNN-based job schedulers meet
    users' expectations about other important properties, such as
    strategy-proofness, sharing incentive, and stability. In this work,
    we consider formal verification of GNN-based job schedulers. We
    address several domain-specific challenges such as networks that are
    deeper and specifications that are richer than those encountered
    when verifying image and NLP classifiers. We develop vegas, the
    first general framework for verifying both single-step and
    multi-step properties of these schedulers based on carefully
    designed algorithms that combine abstractions, refinements, solvers,
    and proof transfer. Our experimental results show that vegas
    achieves significant speed-up when verifying important properties of
    a state-of-the-art GNN-based scheduler compared to previous methods.
  author:
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  - family: Sharif
    given: Mahmood
  - family: Narodytska
    given: Nina
  - family: Singh
    given: Gagandeep
  container-title: Proceedings of the ACM on Programming Languages
  doi: 10.1145/3563325
  id: WBS+22
  issue: OOPSLA2
  issued:
  - year: 2022
    month: 10
  page: 1036-1065
  title: Scalable verification of GNN-based job schedulers
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/WBS+22.pdf"
  volume: 6
- abstract: With the slowing of Moore's law, computer architects have
    turned to domain-specific hardware specialization to continue
    improving the performance and efficiency of computing systems.
    However, specialization typically entails significant modifications
    to the software stack to properly leverage the updated hardware. The
    lack of a structured approach for updating both the compiler and the
    accelerator in tandem has impeded many attempts to systematize this
    procedure. We propose a new approach to enable flexible and
    evolvable domain-specific hardware specialization based on
    coarse-grained reconfigurable arrays (CGRAs). Our agile methodology
    employs a combination of new programming languages and formal
    methods to automatically generate the accelerator hardware and its
    compiler from a single source of truth. This enables the creation of
    design-space exploration frameworks that automatically generate
    accelerator architectures that approach the efficiencies of
    hand-designed accelerators, with a significantly lower design effort
    for both hardware and compiler generation. Our current system
    accelerates dense linear algebra applications, but is modular and
    can be extended to support other domains. Our methodology has the
    potential to significantly improve the productivity of
    hardware-software engineering teams and enable quicker customization
    and deployment of complex accelerator-rich computing systems.
  author:
  - family: Koul
    given: Kalhan
  - family: Melchert
    given: Jackson
  - family: Sreedhar
    given: Kavya
  - family: Truong
    given: Leonard
  - family: Nyengele
    given: Gedeon
  - family: Zhang
    given: Keyi
  - family: Liu
    given: Qiaoyi
  - family: Setter
    given: Jeff
  - family: Chen
    given: Po-Han
  - family: Mei
    given: Yuchen
  - family: Strange
    given: Maxwell
  - family: Daly
    given: Ross
  - family: Donovick
    given: Caleb
  - family: Carsello
    given: Alex
  - family: Kong
    given: Taeyoung
  - family: Feng
    given: Kathleen
  - family: Huff
    given: Dillon
  - family: Nayak
    given: Ankita
  - family: Setaluri
    given: Rajsekhar
  - family: Thomas
    given: James
  - family: Bhagdikar
    given: Nikhil
  - family: Durst
    given: David
  - family: Myers
    given: Zachary
  - family: Tsiskaridze
    given: Nestan
  - family: Richardson
    given: Stephen
  - family: Bahr
    given: Rick
  - family: Fatahalian
    given: Kayvon
  - family: Hanrahan
    given: Pat
  - family: Barrett
    given: Clark
  - family: Horowitz
    given: Mark
  - family: Torng
    given: Christopher
  - family: Kjolstad
    given: Fredrik
  - family: Raina
    given: Priyanka
  container-title: ACM Transactions on Embedded Computing Systems
  doi: 10.1145/3534933
  id: KMS+22
  issued:
  - year: 2022
    month: 4
  title: "AHA: An agile approach to the design of course-grained
    reconfigurable accelerators and compilers"
  title-short: AHA
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/KMS+22.pdf"
- abstract: We develop a framework for model checking infinite-state
    systems by automatically augmenting them with auxiliary variables,
    enabling quantifier-free induction proofs for systems that would
    otherwise require quantified invariants. We combine this mechanism
    with a counterexample-guided abstraction refinement scheme for the
    theory of arrays. Our framework can thus, in many cases, reduce
    inductive reasoning with quantifiers and arrays to quantifier-free
    and array-free reasoning. We evaluate the approach on a wide set of
    benchmarks from the literature. The results show that our
    implementation often outperforms state-of-the-art tools,
    demonstrating its practical potential.
  author:
  - family: Mann
    given: Makai
  - family: Irfan
    given: Ahmed
  - family: Griggio
    given: Alberto
  - family: Padon
    given: Oded
  - family: Barrett
    given: Clark
  container-title: Logical Methods in Computer Science
  doi: "10.46298/lmcs-18(3:26)2022"
  id: MIG+22
  issue: 3
  issued:
  - year: 2022
    month: 8
  title: Counterexample-guided prophecy for model checking modulo the
    theory of arrays
  type: article-journal
  url: "https://arxiv.org/pdf/2101.06825v6.pdf"
  volume: 18
- abstract: Algebraic datatypes, and among them lists and trees, have
    attracted a lot of interest in automated reasoning and
    Satisfiability Modulo Theories (SMT). Since its latest stable
    version, the SMT-LIB standard defines a theory of algebraic
    datatypes, which is currently supported by several mainstream SMT
    solvers. In this paper, we study this particular theory of datatypes
    and prove that it is strongly polite, showing how it can be combined
    with other arbitrary disjoint theories using polite combination. The
    combination method uses a new, simple, and natural notion of
    additivity that enables deducing strong politeness from (weak)
    politeness.
  author:
  - family: Sheng
    given: Ying
  - family: Zohar
    given: Yoni
  - family: Ringeissen
    given: Christophe
  - family: Lange
    given: Jane
  - family: Fontaine
    given: Pascal
  - family: Barrett
    given: Clark
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-022-09625-3
  id: SZR+22
  issue: 3
  issued:
  - year: 2022
    month: 8
  keyword: Satisfiability Modulo Theories, Automated reasoning, Theory
    combination, Algebraic datatypes, Polite combination
  page: 331-335
  publisher: Springer
  title: Polite combination of algebraic datatypes
  type: article-journal
  url: "https://rdcu.be/cMVOR"
  volume: 66
- abstract: Deep neural networks have emerged as a widely used and
    effective means for tackling complex, real-world problems. However,
    a major obstacle in applying them to safety-critical systems is the
    great difficulty in providing formal guarantees about their
    behavior. We present a novel, scalable, and efficient technique for
    verifying properties of deep neural networks (or providing
    counter-examples). The technique is based on the simplex method,
    extended to handle the non-convex Rectified Linear Unit (ReLU)
    activation function, which is a crucial ingredient in many modern
    neural networks. The verification procedure tackles neural networks
    as a whole, without making any simplifying assumptions. We evaluated
    our technique on a prototype deep neural network implementation of
    the next-generation airborne collision avoidance system for unmanned
    aircraft (ACAS Xu). Results show that our technique can successfully
    prove properties of networks that are an order of magnitude larger
    than the largest networks that could be verified previously.
  author:
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Dill
    given: David L.
  - family: Julian
    given: Kyle
  - family: Kochenderfer
    given: Mykel J.
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-021-00363-7
  id: KBD+22
  issued:
  - year: 2022
    month: 2
  keyword: Neural networks; Verification; Satisfiability modulo theories
  page: 87-116
  publisher: Springer
  title: "Reluplex: A calculus for reasoning about deep neural networks"
  title-short: Reluplex
  type: article-journal
  url: "https://rdcu.be/cnBec"
  volume: 60
- abstract: Many SMT solvers implement efficient SAT-based procedures
    for solving fixed-size bit-vector formulas. These techniques,
    however, cannot be used directly to reason about bit-vectors of
    symbolic bit-width. To address this shortcoming, we propose a
    translation from bit-vector formulas with parametric bit-width to
    formulas in a logic supported by SMT solvers that includes
    non-linear integer arithmetic, uninterpreted functions, and
    universal quantification. While this logic is undecidable, our
    approach can still solve many formulas that arise in practice by
    capitalizing on advances in SMT solving for non-linear arithmetic
    and universally quantified formulas. We provide several case studies
    in which we have applied this approach with promising results,
    including the bit-width independent verification of invertibility
    conditions, compiler optimizations, and bit-vector rewrite rules.
  author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-021-09598-9
  id: NPR+21c
  issue: 7
  issued:
  - year: 2021
    month: 10
  keyword: Satisfiability Modulo Theories, Bit-precise Reasoning,
    Parametric Bit-vectors
  page: 1001-1025
  publisher: Springer
  title: Towards satisfiability modulo parametric bit-vectors
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/NPR+21c.pdf"
  volume: 65
- abstract: "Neural networks can learn complex, non-convex functions,
    and it is challenging to guarantee their correct behavior in
    safety-critical contexts. Many approaches exist to find failures in
    networks (e.g., adversarial examples), but these cannot guarantee
    the absence of failures. Verification algorithms address this need
    and provide formal guarantees about a neural network by answering
    \"yes or no\" questions. For example, they can answer whether a
    violation exists within certain bounds. However, individual \"yes or
    no\" questions cannot answer qualitative questions such as \"what is
    the largest error within these bounds\"; the answers to these lie in
    the domain of optimization. Therefore, we propose strategies to
    extend existing verifiers to perform optimization and find: (i) the
    most extreme failure in a given input region and (ii) the minimum
    input perturbation required to cause a failure. A naive approach
    using a bisection search with an off-the-shelf verifier results in
    many expensive and overlapping calls to the verifier. Instead, we
    propose an approach that tightly integrates the optimization process
    into the verification procedure, achieving better runtime
    performance than the naive approach. We evaluate our approach
    implemented as an extension of Marabou, a state-of-the-art neural
    network verifier, and compare its performance with the bisection
    approach and MIPVerify, an optimization-based verifier. We observe
    complementary performance between our extension of Marabou and
    MIPVerify."
  author:
  - family: Strong
    given: Christopher A.
  - family: Wu
    given: Haoze
  - family: Zeljić
    given: Aleksandar
  - family: Julian
    given: Kyle D.
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Kochenderfer
    given: Mykel J.
  container-title: Machine Learning
  doi: 10.1007/s10994-021-06050-2
  id: SWZ+21
  issued:
  - year: 2021
    month: 10
  keyword: Neural network verifcation; Optimization; Adversarial
    examples; Marabou
  publisher: Springer
  title: Global optimization of objective functions represented by ReLU
    networks
  type: article-journal
  url: "https://rdcu.be/czUFw"
- abstract: Deep neural networks are widely used for nonlinear function
    approximation, with applications ranging from computer vision to
    control. Although these networks involve the composition of simple
    arithmetic operations, it can be very challenging to verify whether
    a particular network satisfies certain input-output properties. This
    article surveys methods that have emerged recently for soundly
    verifying such properties. These methods borrow insights from
    reachability analysis, optimization, and search. We discuss
    fundamental differences and connections between existing algorithms.
    In addition, we provide pedagogical implementations of existing
    methods and compare them on a set of benchmark problems.
  author:
  - family: Liu
    given: Changliu
  - family: Arnon
    given: Tomer
  - family: Lazarus
    given: Christopher
  - family: Strong
    given: Christopher
  - family: Barrett
    given: Clark
  - family: Kochenderfer
    given: Mykel J.
  container-title: Foundations and Trends in Optimization
  doi: 10.1561/2400000035
  id: LAL+21
  issn: 2167-3888
  issue: 3-4
  issued:
  - year: 2021
    month: 2
  page: 244-404
  publisher: now publishers
  title: Algorithms for verifying deep neural networks
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/LAL+21.pdf"
  volume: 4
- abstract: We present a novel approach for solving quantified
    bit-vector constraints in Satisfiability Modulo Theories (SMT) based
    on computing symbolic inverses of bit-vector operators. We derive
    conditions that precisely characterize when bit-vector constraints
    are invertible for a representative set of bit-vector operators
    commonly supported by SMT solvers. We utilize syntax-guided
    synthesis techniques to aid in establishing these conditions and
    verify them independently by using several SMT solvers. We show that
    invertibility conditions can be embedded into quantifier
    instantiations using Hilbert choice expressions and give
    experimental evidence that a counterexample-guided approach for
    quantifier instantiation utilizing these techniques leads to
    performance improvements with respect to state-of-the-art solvers
    for quantified bit-vector constraints.
  author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-020-00359-9
  id: NPR+21b
  issue: 1
  issued:
  - year: 2021
    month: 1
  keyword: Satisfiability modulo theories; Quantified bit-vectors;
    Invertibility conditions
  page: 87-115
  publisher: Springer US
  title: On solving quantified bit-vectors using invertibility
    conditions
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/NPR+21b.pdf"
  volume: 57
- abstract: We introduce the first program synthesis engine implemented
    inside an SMT solver. We present an approach that extracts solution
    functions from unsatisfiability proofs of the negated form of
    synthesis conjectures. We also discuss novel counterexample-guided
    techniques for quantifier instantiation that we use to make finding
    such proofs practically feasible. A particularly important class of
    specifications are single-invocation properties, for which we
    present a dedicated algorithm. To support syntax restrictions on
    generated solutions, our approach can transform a solution found
    without restrictions into the desired syntactic form. As an
    alternative, we show how to use evaluation function axioms to embed
    syntactic restrictions into constraints over algebraic datatypes,
    and then use an algebraic datatype decision procedure to drive
    synthesis. Our experimental evaluation on syntax-guided synthesis
    benchmarks shows that our implementation in the CVC4 SMT solver is
    competitive with state-of-the-art tools for synthesis.
  author:
  - family: Reynolds
    given: Andrew
  - family: Kuncak
    given: Viktor
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  - family: Deters
    given: Morgan
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-017-0270-2
  id: RKT+19
  issn: 1572-8102
  issue: 2
  issued:
  - year: 2019
    month: 12
  keyword: Program synthesis; Satisfiability modulo theories; Automated
    deduction
  page: 73-102
  publisher: Springer US
  title: Refutation-based synthesis in SMT
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/RKT+19.pdf"
  volume: 55
- abstract: We consider the problem of deciding the satisfiability of
    quantifier-free formulas in the theory of finite sets with
    cardinality constraints. Sets are a common high-level data structure
    used in programming; thus, such a theory is useful for modeling
    program constructs directly. More importantly, sets are a basic
    construct of mathematics and thus natural to use when formalizing
    the properties of computational systems. We develop a calculus
    describing a modular combination of a procedure for reasoning about
    membership constraints with a procedure for reasoning about
    cardinality constraints. Cardinality reasoning involves tracking how
    different sets overlap. For efficiency, we avoid considering Venn
    regions directly, as done in previous work. Instead, we develop a
    novel technique wherein potentially overlapping regions are
    considered incrementally as needed, using a graph to track the
    interaction among the different regions. The calculus has been
    designed to facilitate its implementation within SMT solvers based
    on the DPLL($T$) architecture. Our experimental results demonstrate
    that the new techniques are competitive with previous techniques and
    can scale much better on certain classes of problems.
  author:
  - family: Bansal
    given: Kshitij
  - family: Barrett
    given: Clark
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  container-title: Logical Methods in Computer Science
  doi: "10.23638/LMCS-14(4:12)2018"
  id: BBRT18
  issue: 4
  issued:
  - year: 2018
    month: 11
  keyword: Satisfiability modulo theories, finite sets, decision
    procedures
  title: Reasoning with finite sets and cardinality constraints in SMT
  type: article-journal
  url: "https://lmcs.episciences.org/4950"
  volume: 14
- abstract: "We present Symbolic Quick Error Detection (Symbolic QED), a
    structured approach for logic bug detection and localization which
    can be used both during pre-silicon design verification as well as
    post-silicon validation and debug. This new methodology leverages
    prior work on Quick Error Detection (QED) which has been
    demonstrated to drastically reduce the latency, in terms of the
    number of clock cycles, of error detection following the activation
    of a logic (or electrical) bug. QED works through software
    transformations, including redundant execution and control flow
    checking, of the applied tests. Symbolic QED combines these
    error-detecting QED transformations with bounded model
    checking-based formal analysis to generate minimal-length bug
    activation traces that detect and localize any logic bugs in the
    design. We demonstrate the practicality and effectiveness of
    Symbolic QED using the OpenSPARC T2, a 500-million-transistor
    open-source multicore System-on-Chip (SoC) design, and using
    \"difficult\" logic bug scenarios observed in various state-of-the-art
    commercial multicore SoCs. Our results show that Symbolic QED: (i)
    is fully automatic, unlike manual techniques in use today that can
    be extremely time-consuming and expensive; (ii) requires only a few
    hours in contrast to manual approaches that might take days (or even
    months) or formal techniques that often take days or fail completely
    for large designs; and (iii) generates counter-examples (for
    activating and detecting logic bugs) that are up to 6 orders of
    magnitude shorter than those produced by traditional techniques.
    Significantly, this new approach does not require any additional
    hardware."
  author:
  - family: Singh
    given: Eshan
  - family: Lin
    given: David
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  container-title: IEEE Transactions on Computer-Aided Design of
    Integrated Circuits and Systems
  doi: 10.1109/TCAD.2018.2834401
  id: SLB+18
  issued:
  - year: 2018
    month: 1
  keyword: Bounded Model Checking, Debug, Formal Debugging,
    Post-Silicon, Validation and Debug, Quick Error Detection, QED,
    Symbolic Quick Error Detection
  publisher: IEEE
  title: Logic bug detection and localization using symbolic quick error
    detection
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/SLB+18.pdf"
- abstract: Satisfiability modulo theories (SMT) solvers have been used
    successfully as reasoning engines for automated verification and
    other applications based on automated reasoning. Current techniques
    for dealing with quantified formulas in SMT are generally
    incomplete, forcing SMT solvers to report "unknown" when they fail
    to prove the unsatisfiability of a formula with quantifiers. This
    inability to return counter models limits their usefulness in
    applications that produce queries involving quantified formulas. In
    this paper, we reduce these limitations by integrating finite model
    finding techniques based on constraint solving into the architecture
    used by modern SMT solvers. This approach is made possible by a
    novel solver for cardinality constraints, as well as techniques for
    on-demand instantiation of quantified formulas. Experiments show
    that our approach is competitive with the state of the art in SMT,
    and orthogonal to approaches in automated theorem proving.
  author:
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  container-title: Theory and Practice of Logic Programming
  id: RTB17
  issue: 4
  issued:
  - year: 2017
    month: 7
  keyword: Satisfiability modulo theories, finite model finding
  page: 516-558
  publisher: Cambridge University Press
  title: Constraint solving for finite model finding in SMT solvers
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/RTB17.pdf"
  volume: 17
- abstract: Reducing the error detection latency is critical for
    improving the design visibility while searching for design errors.
    This article uses a FAQ format to discuss the key points of the
    symbolic QED method that can be applied during both pre-silicon and
    post-silicon validation.
  author:
  - family: Singh
    given: Eshan
  - family: Lin
    given: David
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  container-title: IEEE Design & Test
  doi: 10.1109/MDAT.2016.2590987
  id: SLB+16
  issn: 2168-2356
  issue: 6
  issued:
  - year: 2016
    month: 12
  keyword: Computer bugs, Error detection, Silicon, Measurement,
    Integrated circuit modeling, Symbolic Quick Error Detection, Debug,
    Post-Silicon Validation, Pre-silicon verification
  page: 55-62
  publisher: IEEE
  title: "Symbolic quick error detection for pre-silicon and
    post-silicon validation: Frequently asked questions"
  title-short: Symbolic quick error detection for pre-silicon and
    post-silicon validation
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/SLB+16.pdf"
  volume: 33
- abstract: An increasing number of applications in verification and
    security rely on or could benefit from automatic solvers that can
    check the satisfiability of constraints over a rich set of data
    types that includes character strings. Until recently,
    satisfiability solvers for strings were standalone tools that could
    reason only about fairly restricted fragments of the theory of
    strings and regular expressions such as, for instance, strings of
    bounded lengths. These solvers were based on reductions to
    satisfiability problems over other data types, such as bit vectors,
    or to automata decision problems. We present a set of algebraic
    techniques for solving constraints over a rich theory of unbounded
    strings natively, without reduction to other problems. These
    techniques can be used to integrate string reasoning into general,
    multi-theory SMT solvers based on the DPLL(T) architecture. We have
    implemented them in our SMT solver CVC4 to expand its already large
    set of built-in theories to a theory of strings with concatenation,
    length, and membership in regular languages. This implementation
    makes CVC4 the first solver able to accept a rich set of mixed
    constraints over strings, integers, reals, arrays and algebraic
    datatypes. Our initial experimental results show that, in addition,
    over pure string problems, CVC4 is highly competitive with
    specialized string solvers with a comparable input language.
  author:
  - family: Liang
    given: Tianyi
  - family: Reynolds
    given: Andrew
  - family: Tsiskaridze
    given: Nestan
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  - family: Deters
    given: Morgan
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-016-0247-6
  id: LRT+16
  issn: 1572-8102
  issue: 3
  issued:
  - year: 2016
    month: 6
  keyword: String solving; Satisfiability Modulo Theories; Automated
    Deduction
  page: 206-234
  publisher: Springer US
  title: An efficient SMT solver for string constraints
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/LRT+16.pdf"
  volume: 48
- abstract: The annual Satisﬁability Modulo Theories Competition
    (SMT-COMP) was initiated in 2005 in order to stimulate the advance
    of state-of-the-art techniques and tools developed by the
    Satisﬁability Modulo Theories (SMT) community. This paper summarizes
    the ﬁrst six editions of the competition. We present the evolution
    of the competition's organization and rules, show how the state of
    the art has improved over the course of the competition, and discuss
    the impact SMT-COMP has had on the SMT community and beyond.
    Additionally, we include an exhaustive list of all competitors, and
    present experimental results showing signiﬁcant improvement in SMT
    solvers during these six years. Finally, we analyze to what extent
    the initial goals of the competition have been achieved, and sketch
    future directions for the competition.
  author:
  - family: Barrett
    given: Clark
  - family: Deters
    given: Morgan
  - dropping-particle: de
    family: Moura
    given: Leonardo
  - family: Oliveras
    given: Albert
  - family: Stump
    given: Aaron
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-012-9246-5
  id: BDdM+13
  issue: 3
  issued:
  - year: 2013
    month: 3
  keyword: SAT Modulo Theories; Competition; Experimental evaluation
  page: 243-277
  publisher: Springer Netherlands
  title: 6 years of SMT-COMP
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDdM+13.pdf"
  volume: 50
- abstract: One of the main shortcomings of traditional methods for
    combining theories is the complexity of guessing the arrangement of
    variables shared by the individual theories. This paper presents a
    reformulation of the Nelson-Oppen method that takes into account
    explicit equality propagation and can ignore pairs of shared
    variables that the theories do not care about. We show the
    correctness of the new approach and present care functions for the
    theory of uninterpreted functions and the theory of arrays. The
    effectiveness of the new method is illustrated by experimental
    results demonstrating a dramatic performance improvement on
    benchmarks combining arrays and bit-vectors.
  author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-012-0159-z
  id: JB13
  issn: 0925-9856
  issue: 1
  issued:
  - year: 2013
    month: 2
  keyword: Theory combination; Nelson-Oppen; Satisfiability modulo
    theories
  page: 67-90
  publisher: Springer US
  title: Being careful about theory combination
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/JB13.pdf"
  volume: 42
- abstract: First-order logic provides a convenient formalism for
    describing a wide variety of verification conditions. Two main
    approaches to checking such conditions are pure first-order
    automated theorem proving (ATP) and automated theorem proving based
    on satisfiability modulo theories (SMT). Traditional ATP systems are
    designed to handle quantifiers easily, but often have difficulty
    reasoning with respect to theories. SMT systems, on the other hand,
    have built-in support for many useful theories, but have a much more
    difficult time with quantifiers. One clue on how to get the best of
    both worlds can be found in the legacy system Simplify which
    combines built-in theory reasoning with quantifier instantiation
    heuristics. Inspired by Simplify and motivated by a desire to
    provide a competitive alternative to ATP systems, this paper
    describes a methodology for reasoning about quantifiers in SMT
    systems.We present the methodology in the context of the Abstract
    DPLL Modulo Theories framework. Besides adapting many of Simplify's
    techniques, we also introduce a number of new heuristics. Most
    important is the notion of instantiation level which provides an
    effective mechanism for prioritizing and managing the large search
    space inherent in quantifier instantiation techniques. These
    techniques have been implemented in the SMT system CVC3.
    Experimental results show that our methodology enables CVC3 to solve
    a significant number of quantified benchmarks that were not solvable
    with previous approaches.
  author:
  - family: Ge
    given: Yeting
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Annals of Mathematics and Artificial Intelligence
  doi: 10.1007/s10472-009-9153-6
  id: GBT09
  issn: 1012-2443
  issue: 1-2
  issued:
  - year: 2009
    month: 2
  page: 101-122
  publisher: Springer
  title: Solving quantified verification conditions using satisfiability
    modulo theories
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/GBT09.pdf"
  volume: 55
- abstract: The Satisfiability Modulo Theories Competition (SMT-COMP) is
    an annual competition aimed at stimulating the advance of the
    state-of-the-art techniques and tools developed by the
    Satisfiability Modulo Theories (SMT) community. As with the first
    two editions, SMT-COMP 2007 was held as a satellite event of CAV
    2007, held July 3-7, 2007. This paper gives an overview of the
    rules, competition format, benchmarks, participants and results of
    SMT-COMP 2007.
  author:
  - family: Barrett
    given: Clark
  - family: Deters
    given: Morgan
  - family: Oliveras
    given: Albert
  - family: Stump
    given: Aaron
  container-title: International Journal on Artificial Intelligence
    Tools (IJAIT)
  id: BDO+08
  issue: 4
  issued:
  - year: 2008
    month: 8
  page: 569-606
  publisher: World Scientific
  title: Design and results of the 3<sup>rd</sup> annual satisfiability modulo
    theories competition (SMT-COMP 2007)
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDO+08.pdf"
  volume: 17
- abstract: The Satisﬁability Modulo Theories Competition (SMT-COMP)
    arose from the SMT-LIB initiative to spur adoption of common,
    community-designed formats, and to spark further advances in
    satisﬁability modulo theories (SMT). The ﬁrst SMT-COMP was held in
    2005 as a satellite event of CAV 2005. SMT-COMP 2006 was held August
    17 - 19, 2006, as a satellite event of CAV 2006. This paper
    describes the rules and competition format for SMT-COMP 2006, the
    benchmarks used, the participants, and the results.
  author:
  - family: Barrett
    given: Clark
  - dropping-particle: de
    family: Moura
    given: Leonardo
  - family: Stump
    given: Aaron
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-007-0038-1
  id: BdMS07
  issn: 0925-9856
  issue: 3
  issued:
  - year: 2007
    month: 12
  page: 221-239
  publisher: Springer Netherlands
  title: Design and results of the 2<sup>nd</sup> satisfiability modulo
    theories competition (SMT-COMP 2006)
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/BdMS07.pdf"
  volume: 31
- abstract: Inductive data types are a valuable modeling tool for
    software verification. In the past, decision procedures have been
    proposed for various theories of inductive data types, some focused
    on the universal fragment, and some focused on handling arbitrary
    quantifiers. Because of the complexity of the full theory, previous
    work on the full theory has not focused on strategies for practical
    implementation. However, even for the universal fragment, previous
    work has been limited in several significant ways. In this paper, we
    present a general and practical algorithm for the universal
    fragment. The algorithm is presented declaratively as a set of
    abstract rules which we show to be terminating, sound, and complete.
    We show how other algorithms can be realized as strategies within
    our general framework, and we propose a new strategy and give
    experimental results indicating that it performs well in practice.
    We conclude with a discussion of several useful ways the algorithm
    can be extended.
  author:
  - family: Barrett
    given: Clark
  - family: Shikanian
    given: Igor
  - family: Tinelli
    given: Cesare
  container-title: Journal on Satisfiability, Boolean Modeling and
    Computation
  id: BST07-JSAT
  issn: 1574-0617
  issued:
  - year: 2007
    month: 1
  page: 21-46
  publisher: IOS Press
  title: An abstract decision procedure for a theory of inductive data
    types
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/BST07-JSAT.pdf"
  volume: 3
- abstract: The Satisfiability Modulo Theories Competition (SMT-COMP) is
    intended to spark further advances in the decision procedures field,
    especially for applications in hardware and software verification.
    Public competitions are a well-known means of stimulating
    advancement in automated reasoning. Evaluation of SMT solvers
    entered in SMT-COMP took place while CAV 2005 was meeting. Twelve
    solvers were entered, 1352 benchmarks were collected in seven
    different divisions.
  author:
  - family: Barrett
    given: Clark
  - dropping-particle: de
    family: Moura
    given: Leonardo
  - family: Stump
    given: Aaron
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-006-9026-1
  id: BdMS05-JAR
  issn: 0168-7433
  issue: 4
  issued:
  - year: 2005
    month: 11
  page: 373-390
  publisher: Springer Netherlands
  title: Design and results of the 1<sup>st</sup> satisfiability modulo
    theories competition (SMT-COMP 2005)
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/BdMS05-JAR.pdf"
  volume: 35
- abstract: This paper presents new approaches to the validation of loop
    optimizations that compilers use to obtain the highest performance
    from modern architectures. Rather than verify the compiler, the
    approach of translation validation performs a validation check after
    every run of the compiler, producing a formal proof that the
    produced target code is a correct implementation of the source code.
    As part of an active and ongoing research project on translation
    validation, we have previously described approaches for validating
    optimizations that preserve the loop structure of the code and have
    presented a simulation-based general technique for validating such
    optimizations. In this paper, for more aggressive optimizations that
    alter the loop structure of the code--such as distribution, fusion,
    tiling, and interchange--we present a set of permutation rules which
    establish that the transformed code satisfies all the implied data
    dependencies necessary for the validity of the considered
    transformation. We describe the extensions to our tool voc-64 which
    are required to validate these structure-modifying optimizations.
    This paper also discusses preliminary work on run-time validation of
    speculative loop optimizations. This involves using run-time tests
    to ensure the corretness of loop optimizations whose correctness
    cannot be guaranteed at compile time. Unlike compiler validation,
    run-time validation must not only determine when an optimization has
    generated incorrect code, but also recovering from the optimization
    without aborting the program or producing an incorrect result. This
    technique has been applied to several loop optimizations, including
    loop interchange and loop tiling, and appears to be quite promising.
  author:
  - family: Zuck
    given: Lenore
  - family: Pnueli
    given: Amir
  - family: Goldberg
    given: Benjamin
  - family: Barrett
    given: Clark
  - family: Fang
    given: Yi
  - family: Hu
    given: Ying
  container-title: Formal Methods in System Design
  doi: 10.1007/s10703-005-3402-z
  id: ZPG+05
  issn: 0925-9856
  issue: 3
  issued:
  - year: 2005
    month: 11
  page: 335-360
  publisher: Springer Netherlands
  title: Translation and run-time validation of loop transformations
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/ZPG+05.pdf"
  volume: 27
- abstract: The Forte formal verification environment for
    datapath-dominated hardware is described. Forte has proven to be
    effective in large-scale industrial trials and combines an efficient
    linear-time logic model-checking algorithm, namely the symbolic
    trajectory evaluation (STE), with lightweight theorem proving in
    higher-order logic. These are tightly integrated in a
    general-purpose functional programming language, which both allows
    the system to be easily customized and at the same time serves as a
    specification language. The design philosophy behind Forte is
    presented and the elements of the verification methodology that make
    it effective in practice are also described.
  author:
  - family: Seger
    given: Carl-Johan H.
  - family: Jones
    given: Robert B.
  - family: O'Leary
    given: John W.
  - family: Melham
    given: Tom
  - family: Aagaard
    given: Mark D.
  - family: Barrett
    given: Clark
  - family: Syme
    given: Don
  container-title: IEEE Transactions on Computer-Aided Design of
    Integrated Circuits and Systems
  doi: 10.1109/TCAD.2005.850814
  id: SJO+05
  issn: 0278-0070
  issue: 9
  issued:
  - year: 2005
    month: 9
  page: 1381-1405
  title: An industrially effective environment for formal hardware
    verification
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/SJO+05.pdf"
  volume: 24
- abstract: We present VeriX (Verified eXplainability), a system for
    producing optimal robust explanations and generating counterfactuals
    along decision boundaries of machine learning models. We build such
    explanations and counterfactuals iteratively using constraint
    solving techniques and a heuristic based on feature-level
    sensitivity ranking. We evaluate our method on image recognition
    benchmarks and a real-world scenario of autonomous aircraft taxiing.
  author:
  - family: Wu
    given: Min
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  container-title: Advances in neural information processing systems 36
    (NeurIPS 2023)
  editor:
  - family: Oh
    given: A.
  - family: Neumann
    given: T.
  - family: Globerson
    given: A.
  - family: Saenko
    given: K.
  - family: Hardt
    given: M.
  - family: Levine
    given: S.
  id: WWB23
  issued:
  - year: 2023
    month: 1
  page: 22247-22268
  publisher: Curran Associates, Inc.
  title: "VeriX: Towards verified explainability of deep neural
    networks"
  title-short: VeriX
  type: paper-conference
  url: "https://proceedings.neurips.cc/paper_files/paper/2023/file/46907c2ff9fafd618095161d76461842-Paper-Conference.pdf"
  volume: 36
- abstract: "Large Language Models (LLMs) and other large foundation
    models have achieved impressive results, but their size exacerbates
    existing resource consumption and latency challenges. In particular,
    the large-scale deployment of these models is hindered by the
    significant resource requirements during inference. In this paper,
    we study two approaches for mitigating these challenges: employing a
    cache to store previous queries and learning a model selector to
    choose from an ensemble of models for query processing.
    Theoretically, we provide an optimal algorithm for jointly
    optimizing both approaches to reduce the inference cost in both
    offline and online tabular settings. By combining a caching
    algorithm, namely Greedy Dual Size with Frequency (GDSF) or Least
    Expected Cost (LEC), with a model selector, we achieve optimal rates
    in both offline and online settings. Empirically, simulations show
    that our caching and model selection algorithm greatly improves over
    the baselines, with up to 50x improvement over the baseline when the
    ratio between the maximum cost and minimum cost is 100. Experiments
    on real datasets show a 4.3x improvement in FLOPs over the baseline
    when the ratio for FLOPs is 10, and a 1.8x improvement in latency
    when the ratio for average latency is 1.85."
  author:
  - family: Zhu
    given: Banghua
  - family: Sheng
    given: Ying
  - family: Zheng
    given: Lianmin
  - family: Barrett
    given: Clark
  - family: Jordan
    given: Michael
  - family: Jiao
    given: Jiantao
  container-title: Advances in neural information processing systems 36
    (NeurIPS 2023)
  editor:
  - family: Oh
    given: A.
  - family: Neumann
    given: T.
  - family: Globerson
    given: A.
  - family: Saenko
    given: K.
  - family: Hardt
    given: M.
  - family: Levine
    given: S.
  id: ZSZ+23b
  issued:
  - year: 2023
    month: 1
  page: 59062-59094
  publisher: Curran Associates, Inc.
  title: Towards optimal caching and model selection for large model
    inference
  type: paper-conference
  url: "https://proceedings.neurips.cc/paper_files/paper/2023/file/b914a8fcea5c176cf1ed75c762ce27fd-Paper-Conference.pdf"
  volume: 36
- abstract: Large Language Models (LLMs), despite their recent
    impressive accomplishments, are notably cost-prohibitive to deploy,
    particularly for applications involving long-content generation,
    such as dialogue systems and story writing. Often, a large amount of
    transient state information, referred to as the KV cache, is stored
    in GPU memory in addition to model parameters, scaling linearly with
    the sequence length and batch size. In this paper, we introduce a
    novel approach for implementing the KV cache which significantly
    reduces its memory footprint. Our approach is based on the
    noteworthy observation that a small portion of tokens contributes
    most of the value when computing attention scores. We call these
    tokens Heavy Hitters (H$_2$). Through a comprehensive investigation,
    we find that ($i$) the emergence of H$_2$ is natural and strongly
    correlates with the frequent co-occurrence of tokens in the text,
    and ($ii$) removing them results in significant performance
    degradation. Based on these insights, we propose Heavy Hitter Oracle
    (H$_2$O), a KV cache eviction policy that dynamically retains a
    balance of recent and H$_2$ tokens. We formulate the KV cache
    eviction as a dynamic submodular problem and prove (under mild
    assumptions) a theoretical guarantee for our novel eviction
    algorithm which could help guide future work. We validate the
    accuracy of our algorithm with OPT, LLaMA, and GPT-NeoX across a
    wide range of tasks. Our implementation of H$_2$O with 20% heavy
    hitters improves the throughput over three leading inference systems
    DeepSpeed Zero-Inference, Hugging Face Accelerate, and FlexGen by up
    to 29x , 29x , and 3x on OPT-6.7B and OPT-30B. With the same batch
    size, H$_2$O can reduce the latency by up to 1.9x.
  author:
  - family: Zhang
    given: Zhenyu
  - family: Sheng
    given: Ying
  - family: Zhou
    given: Tianyi
  - family: Chen
    given: Tianlong
  - family: Zheng
    given: Lianmin
  - family: Cai
    given: Ruisi
  - family: Song
    given: Zhao
  - family: Tian
    given: Yuandong
  - family: Ré
    given: Christopher
  - family: Barrett
    given: Clark
  - family: Wang
    given: Zhangyang \"Atlas\"
  - family: Chen
    given: Beidi
  container-title: Advances in neural information processing systems 36
    (NeurIPS 2023)
  editor:
  - family: Oh
    given: A.
  - family: Neumann
    given: T.
  - family: Globerson
    given: A.
  - family: Saenko
    given: K.
  - family: Hardt
    given: M.
  - family: Levine
    given: S.
  id: ZSZ+23a
  issued:
  - year: 2023
    month: 1
  page: 34661-34710
  publisher: Curran Associates, Inc.
  title: "H<sub>2</sub>o: Heavy-hitter oracle for efficient generative inference
    of large language models"
  title-short: H<sub>2</sub>o
  type: paper-conference
  url: "https://proceedings.neurips.cc/paper_files/paper/2023/file/6ceefa7b15572587b78ecfcebb2827f8-Paper-Conference.pdf"
  volume: 36
- abstract: Syntax-guided synthesis (SyGuS) is a recent software
    synthesis paradigm in which an automated synthesis tool is asked to
    synthesize a term that satisfies both a semantic and a syntactic
    specification. We consider a special case of the SyGuS problem,
    where a term is already known to satisfy the semantic specification
    but may not satisfy the syntactic one. The goal is then to find an
    equivalent term that additionally satisfies the syntactic
    specification, provided by a context-free grammar. We introduce a
    novel procedure for solving this problem which leverages pattern
    matching and automated discovery of rewrite rules. We also provide
    an implementation of the procedure by modifying the SyGuS solver
    embedded in the cvc5 SMT solver. Our evaluation shows that our new
    procedure significantly outperforms the state of the art on a large
    set of SyGuS problems for standard SMT-LIB theories such as
    bit-vectors, arithmetic, and strings.
  author:
  - family: Mohamed
    given: Abdalrhman
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Proceedings of the 23<sup>rd</sup> international conference
    on formal methods in computer-aided design (FMCAD'23)
  doi: 10.34727/2023/isbn.978-3-85448-060-0_27
  editor:
  - family: Nadel
    given: Alexander
  - family: Rozier
    given: Kristin Yvonne
  id: MRB+23
  issued:
  - year: 2023
    month: 10
  note: Ames, IA
  page: 189-198
  publisher: TU Wien Academic Press
  title: A procedure for SyGuS solution fitting via matching and rewrite
    rule discovery
  type: paper-conference
  url: "https://repositum.tuwien.at/handle/20.500.12708/188730"
- abstract: We present Self-Driven Strategy Learning (SDSL), a
    lightweight online learning methodology for automated reasoning
    tasks that involve solving a set of related problems. SDSL does not
    require offline training, but instead automatically constructs a
    dataset while solving earlier problems. It fits a machine learning
    model to this data which is then used to adjust the solving strategy
    for later problems. We formally define the approach as a set of
    abstract transition rules. We describe a concrete instance of the
    SDSL calculus which uses conditional sampling for generating data
    and random forests as the underlying machine learning model. We
    implement the approach on top of the KISSAT solver and show that the
    combination of KISSAT+SDSL certifies larger bounds and finds more
    counter-examples than other state-of-the-art bounded model checking
    approaches on benchmarks obtained from the latest Hardware Model
    Checking Competition.
  author:
  - family: Wu
    given: Haoze
  - family: Hahn
    given: Christopher
  - family: Lonsing
    given: Florian Matthias
  - family: Mann
    given: Makai
  - family: Ramanujan
    given: Raghuram
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 23<sup>rd</sup> international conference
    on formal methods in computer-aided design (FMCAD'23)
  doi: 10.34727/2023/isbn.978-3-85448-060-0_10
  editor:
  - family: Nadel
    given: Alexander
  - family: Rozier
    given: Kristin Yvonne
  id: WHL+23
  issued:
  - year: 2023
    month: 10
  note: Ames, IA
  page: 23-33
  publisher: TU Wien Academic Press
  title: Lightweight online learning for sets of related problems in
    automated reasoning
  type: paper-conference
  url: "https://repositum.tuwien.at/handle/20.500.12708/188730"
- abstract: For many users of Satisfiability Modulo Theories (SMT)
    solvers, the solver's performance is the main bottleneck in their
    application. One promising approach for improving performance is to
    leverage the increasing availability of parallel and cloud
    computing. However, despite many efforts, the best parallel approach
    to date consists of running a portfolio of solvers, meaning that
    performance is still limited by the best possible sequential
    performance. In this paper, we revisit divide-and-conquer approaches
    to parallel SMT, in which a challenging problem is partitioned into
    several subproblems. We introduce several new partitioning
    strategies and evaluate their performance, both alone as well as
    within portfolios, on a large set of difficult SMT benchmarks. We
    show that hybrid portfolios that include our new strategies can
    significantly outperform traditional portfolios for parallel SMT.
  author:
  - family: Wilson
    given: Amalee
  - family: Nötzli
    given: Andres
  - family: Reynolds
    given: Andrew
  - family: Cook
    given: Byron
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 23<sup>rd</sup> international conference
    on formal methods in computer-aided design (FMCAD'23)
  doi: 10.34727/2023/isbn.978-3-85448-060-0_28
  editor:
  - family: Nadel
    given: Alexander
  - family: Rozier
    given: Kristin Yvonne
  id: WNR+23
  issued:
  - year: 2023
    month: 10
  note: Ames, IA
  page: 199-208
  publisher: TU Wien Academic Press
  title: Partitioning strategies for distributed SMT solving
  type: paper-conference
  url: "https://repositum.tuwien.at/handle/20.500.12708/188827"
- abstract: Piecewise-affine (PWA) systems are widely used for modeling
    and control of robotics problems including modeling contact
    dynamics. A common approach is to encode the control problem of the
    PWA system as a Mixed-Integer Convex Program (MICP), which can be
    solved by general-purpose off-the-shelf MICP solvers. To mitigate
    the scalability challenge of solving these MICP problems, existing
    work focuses on devising efficient and strong formulations of the
    problems, while less effort has been spent on exploiting their
    specific structure to develop specialized solvers. The latter is the
    theme of our work. We focus on efficiently handling one-hot
    constraints, which are particularly relevant when encoding PWA
    dynamics. We have implemented our techniques in a tool, Soy, which
    organically integrates logical reasoning, arithmetic reasoning, and
    stochastic local search. For a set of PWA control benchmarks, Soy
    solves more problems, faster, than two state-of-the-art MICP
    solvers.
  author:
  - family: Wu
    given: Haoze
  - family: Wu
    given: Min
  - family: Sadigh
    given: Dorsa
  - family: Barrett
    given: Clark
  container-title: 2023 IEEE/RSJ international conference on intelligent
    robots and systems (IROS'23)
  doi: 10.1109/IROS55552.2023.10342011
  id: WWS+23
  issued:
  - year: 2023
    month: 10
  note: Detroit, MI, USA
  page: 6281-6288
  publisher: IEEE
  title: "Soy: An efficient MILP solver for piecewise-affine systems"
  title-short: Soy
  type: paper-conference
  url: "https://doi.org/10.1109/IROS55552.2023.10342011"
- abstract: "This work is a part of an ongoing effort to understand the
    relationships between properties used in theory combination. We here
    focus on including two properties that are related to shiny
    theories: the finite model property and stable finiteness. For any
    combination of properties, we consider the question of whether there
    exists a theory that exhibits it. When there is, we provide an
    example with the simplest possible signature. One particular class
    of interest includes theories with the finite model property that
    are not finitely witnessable. To construct such theories, we utilize
    the Busy Beaver function."
  author:
  - family: Toledo
    given: Guilherme V.
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 14<sup>th</sup> international symposium
    on frontiers of combining systems (FroCoS'23)
  doi: 10.1007/978-3-031-43369-6_9
  editor:
  - family: Sattler
    given: Uri
  - family: Suda
    given: Martin
  id: TZB23-frocos
  issued:
  - year: 2023
    month: 9
  note: Prague, Czech Republic
  page: 159-175
  publisher: Springer
  title: "Combining finite combination properties: Finite models and
    busy beavers"
  title-short: Combining finite combination properties
  type: paper-conference
  url: "https://doi.org/10.1007/978-3-031-43369-6_9"
  volume: 14279
- abstract: We prove the correctness of invertibility conditions for the
    theory of fixed-width bit-vectors---used to solve quantified
    bit-vector formulas in the Satisfiability Modulo Theories (SMT)
    solver cvc5---in the Coq proof assistant. Previous work proved many
    of these in a completely automatic fashion for arbitrary bit-width;
    however, some were only proved for bit-widths up to 65, even though
    they are being used to solve formulas over larger bit-widths. In
    this paper we describe the process of proving a representative
    subset of these invertibility conditions in Coq. In particular, we
    describe the BVList library for bit-vectors in Coq, our extensions
    to it, and proofs of the invertibility conditions.
  author:
  - family: Ekici
    given: Burak
  - family: Viswanathan
    given: Arjun
  - family: Zohar
    given: Yoni
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 14<sup>th</sup> international symposium
    on frontiers of combining systems (FroCoS'23)
  doi: 10.1007/978-3-031-43369-6_3
  editor:
  - family: Sattler
    given: Uri
  - family: Suda
    given: Martin
  id: EVZ+23
  issued:
  - year: 2023
    month: 9
  note: Prague, Czech Republic
  page: 41-59
  publisher: Springer
  title: Formal verification of bit-vector invertibility conditions in
    coq
  type: paper-conference
  url: "https://link.springer.com/chapter/10.1007/978-3-031-43369-6_3"
  volume: 14279
- abstract: "Hardware accelerators (HAs) underpin high-performance and
    energy-efficient digital systems. Correctness of these systems thus
    depends on the correctness of constituent HAs.
    Self-consistency-based pre-silicon verification techniques, like
    A-QED (Accelerator Quick Error Detection), provide a quick and
    provably thorough HA verification framework that does not require
    extensive design-specific properties or a full functional
    specification. However, A-QED is limited to verifying HAs which are
    non-interfering -- i.e., they produce the same result for a given
    input independent of its context within a sequence of inputs. We
    present a new technique called G-QED (Generalized QED) which goes
    beyond non-interfering HAs while retaining A-QED's benefits. Our
    extensive results as well as a detailed industrial case study show
    that: G-QED is highly thorough in detecting critical bugs in
    well-verified designs that otherwise escape traditional verification
    flows while simultaneously improving verification productivity
    18-fold (from 370 person days to 21 person days). These results are
    backed by theoretical guarantees of soundness and completeness."
  author:
  - family: Chattopadhyay
    given: Saranyu
  - family: Devarajegowda
    given: Keerthikumara
  - family: Zhao
    given: Bihan
  - family: Lonsing
    given: Florian
  - family: D'Agostino
    given: Brandon A.
  - family: Vavelidou
    given: Ioanna
  - family: Bhatt
    given: Vijay D.
  - family: Prebeck
    given: Sebastian
  - family: Ecker
    given: Wolfgang
  - family: Trippel
    given: Caroline
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  container-title: Proceedings of the 60<sup>th</sup> design automation
    conference (DAC'23)
  doi: 10.1109/DAC56929.2023.10247903
  id: CDZ+23
  issued:
  - year: 2023
    month: 7
  keyword: Productivity; Context; Design automation; Digital systems;
    Side-channel attacks; Energy efficiency; Timing; QED; Quick Error
    Detection; Accelerators; Processors; Functional consistency
  note: San Francisco, CA
  publisher: IEEE
  title: "G-QED: Generalized QED pre-silicon verification beyond
    non-interfering hardware accelerators"
  title-short: G-QED
  type: paper-conference
  url: "https://ieeexplore.ieee.org/document/10247903"
- abstract: The architecture of a coarse-grained reconfigurable array
    (CGRA) processing element (PE) has a significant effect on the
    performance and energy-efficiency of an application running on the
    CGRA. This paper presents APEX, an automated approach for generating
    specialized PE architectures for an application or an application
    domain. APEX first analyzes application domain benchmarks using
    frequent subgraph mining to extract commonly occurring computational
    subgraphs. APEX then generates specialized PEs by merging subgraphs
    using a datapath graph merging algorithm. The merged datapath graphs
    are translated into a PE specification from which we automatically
    generate the PE hardware description in Verilog along with a
    compiler that maps applications to the PE. The PE hardware and
    compiler are inserted into a flexible CGRA generation and
    compilation toolchain that allows for agile evaluation of CGRAs. We
    evaluate APEX for two domains, machine learning and image
    processing. For image processing applications, our automatically
    generated CGRAs with specialized PEs achieve from 5% to 30% less
    area and from 22% to 46% less energy compared to a general-purpose
    CGRA. For machine learning applications, our automatically generated
    CGRAs consume 16% to 59% less energy and 22% to 39% less area than a
    general-purpose CGRA. This work paves the way for creation of
    application domain-driven design-space exploration frameworks that
    automatically generate efficient programmable accelerators, with a
    much lower design effort for both hardware and compiler generation.
  author:
  - family: Melchert
    given: Jackson
  - family: Feng
    given: Kathleen
  - family: Donovick
    given: Caleb
  - family: Daly
    given: Ross
  - family: Sharma
    given: Ritvik
  - family: Barrett
    given: Clark
  - family: Horowitz
    given: Mark A.
  - family: Hanrahan
    given: Pat
  - family: Raina
    given: Priyanka
  collection-title: ASPLOS 2023
  container-title: Proceedings of the 28<sup>th</sup> ACM international
    conference on architectural support for programming languages and
    operating systems (ASPLOS), volume 3
  doi: 10.1145/3582016.3582070
  id: MFD+23
  isbn: 9781450399180
  issued:
  - year: 2023
    month: 3
  keyword: subgraph, reconfigurable accelerators, processing elements,
    hardware-software co-design, graph analysis, domain-specific
    accelerators, design space exploration, CGRA
  note: Vancouver, BC, Canada
  page: 33-45
  publisher: Association for Computing Machinery
  publisher-place: New York, NY, USA
  title: "APEX: A framework for automated processing element design
    space exploration using frequent subgraph analysis"
  title-short: APEX
  type: paper-conference
  url: "https://doi.org/10.1145/3582016.3582070"
- abstract: "Deep neural networks (DNNs) are increasingly being deployed
    to perform safety-critical tasks. The opacity of DNNs, which
    prevents humans from reasoning about them, presents new safety and
    security challenges. To address these challenges, the verification
    community has begun developing techniques for rigorously analyzing
    DNNs, with numerous verification algorithms proposed in recent
    years. While a significant amount of work has gone into developing
    these verification algorithms, little work has been devoted to
    rigorously studying the computability and complexity of the
    underlying theoretical problems. Here, we seek to contribute to the
    bridging of this gap. We focus on two kinds of DNNs: those that
    employ piecewise-linear activation functions (e.g., ReLU), and those
    that employ piecewise-smooth activation functions (e.g., Sigmoids).
    We prove the two following theorems: (i) the decidability of
    verifying DNNs with a particular set of piecewise-smooth activation
    functions, including Sigmoid and tanh, is equivalent to a
    well-known, open problem formulated by Tarski; and (ii) the DNN
    verification problem for any quantifier-free linear arithmetic
    specification can be reduced to the DNN reachability problem, whose
    approximation is NP-complete. These results answer two fundamental
    questions about the computability and complexity of DNN
    verification, and the ways it is affected by the network's
    activation functions and error tolerance; and could help guide
    future efforts in developing DNN verification tools."
  author:
  - family: Isac
    given: Omri
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  collection-title: Leibniz international proceedings in informatics
    (LIPIcs)
  container-title: 34<sup>th</sup> international conference on concurrency
    theory (CONCUR'23)
  doi: 10.4230/LIPIcs.CONCUR.2023.26
  editor:
  - family: Pérez
    given: Guillermo A.
  - family: Raskin
    given: Jean-François
  id: IZB+23
  isbn: 978-3-95977-299-0
  issn: 1868-8969
  issued:
  - year: 2023
    month: 9
  note: Antwerp, Belgium
  page: "26:1-26:18"
  publisher: Schloss Dagstuhl -- Leibniz-Zentrum für Informatik
  publisher-place: Dagstuhl, Germany
  title: DNN verification, reachability, and the exponential function
    problem
  type: paper-conference
  url: "https://drops.dagstuhl.de/opus/volltexte/2023/19020/"
  volume: 279
- abstract: Zero Knowledge Proofs (ZKPs) are cryptographic protocols by
    which a prover convinces a verifier of the truth of a statement
    without revealing any other information. Typically, statements are
    expressed in a high-level language and then compiled to a low-level
    representation on which the ZKP operates. Thus, a bug in a ZKP
    compiler can compromise the statement that the ZK proof is supposed
    to establish. This paper takes a step towards ZKP compiler
    correctness by partially verifying a field-blasting compiler pass, a
    pass that translates Boolean and bit-vector logic into equivalent
    operations in a finite field. First, we define correctness for
    field-blasters and ZKP compilers more generally. Next, we describe
    the specific field-blaster using a set of encoding rules and define
    verification conditions for individual rules. Finally, we connect
    the rules and the correctness definition by showing that if our
    verification conditions hold, the field-blaster is correct. We have
    implemented our approach in the CirC ZKP compiler and have proved
    bounded versions of the corresponding verification conditions. We
    show that our partially verified field-blaster does not hurt the
    performance of the compiler or its output; we also report on four
    bugs uncovered during verification.
  author:
  - family: Ozdemir
    given: Alex
  - family: Wahby
    given: Riad S.
  - family: Brown
    given: Fraser
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 35<sup>th</sup> international conference
    on computer aided verification (CAV'23)
  doi: 10.1007/978-3-031-37709-9_8
  editor:
  - family: Enea
    given: Constantin
  - family: Lal
    given: Akash
  id: OWB+23
  issued:
  - year: 2023
    month: 7
  note: Paris, France
  page: 154-175
  publisher: Springer
  title: Bounded verification for finite-field-blasting
  type: paper-conference
  url: "https://link.springer.com/chapter/10.1007/978-3-031-37709-9_8"
  volume: 13965
- abstract: We study satisfiability modulo the theory of finite fields
    and give a decision procedure for this theory. We implement our
    procedure for prime fields inside the cvc5 SMT solver. Using this
    theory, we construct SMT queries that encode translation validation
    for various zero knowledge proof compilers applied to Boolean
    computations. We evaluate our procedure on these benchmarks. Our
    experiments show that our implementation is superior to previous
    approaches (which encode field arithmetic using integers or
    bit-vectors).
  author:
  - family: Ozdemir
    given: Alex
  - family: Kremer
    given: Gereon
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 35<sup>th</sup> international conference
    on computer aided verification (CAV'23)
  doi: 10.1007/978-3-031-37703-7_8
  editor:
  - family: Enea
    given: Constantin
  - family: Lal
    given: Akash
  id: OKT+23
  issued:
  - year: 2023
    month: 7
  note: Paris, France
  page: 163-186
  publisher: Springer
  title: Satisfiability modulo finite fields
  type: paper-conference
  url: "https://link.springer.com/chapter/10.1007/978-3-031-37703-7_8"
  volume: 13965
- abstract: We make two contributions to the study of theory combination
    in satisfiability modulo theories. The first is a table of examples
    for the combinations of the most common model-theoretic properties
    in theory combination, namely stable infiniteness, smoothness,
    convexity, finite witnessability, and strong finite witnessability
    (and therefore politeness and strong politeness as well). All of our
    examples are sharp, in the sense that we also offer proofs that no
    theories are available within simpler signatures. This table
    significantly progresses the current understanding of the various
    properties and their interactions. The most remarkable example in
    this table is of a theory over a single sort that is polite but not
    strongly polite (the existence of such a theory was only known until
    now for two-sorted signatures). The second contribution is a new
    combination theorem showing that in order to apply polite theory
    combination, it is sufficient for one theory to be stably infinite
    and strongly finitely witnessable, thus showing that smoothness is
    not a critical property in this combination method. This result has
    the potential to greatly simplify the process of showing which
    theories can be used in polite combination, as showing stable
    infiniteness is considerably simpler than showing smoothness.
  author:
  - family: Toledo
    given: Guilherme V.
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 29<sup>th</sup> international conference
    on automated deduction (CADE'23)
  doi: 10.1007/978-3-031-38499-8_30
  editor:
  - family: Pientka
    given: Brigitte
  - family: Tinelli
    given: Cesare
  id: TZB23-cade
  issued:
  - year: 2023
    month: 7
  note: Rome, Italy
  page: 522-541
  publisher: Springer
  title: "Combining combination properties: An analysis of stable
    infiniteness, convexity, and politeness"
  title-short: Combining combination properties
  type: paper-conference
  url: "https://link.springer.com/chapter/10.1007/978-3-031-38499-8_30"
  volume: 14132
- abstract: The softmax function is a ubiquitous component at the output
    of neural networks and increasingly in intermediate layers as well.
    This paper provides convex lower bounds and concave upper bounds on
    the softmax function, which are compatible with convex optimization
    formulations for characterizing neural networks and other ML models.
    We derive bounds using both a natural exponential-reciprocal
    decomposition of the softmax as well as an alternative decomposition
    in terms of the log-sum-exp function. The new bounds are provably
    and/or numerically tighter than linear bounds obtained in previous
    work on robustness verification of transformers. As illustrations of
    the utility of the bounds, we apply them to verification of
    transformers as well as of the robustness of predictive uncertainty
    estimates of deep ensembles.
  author:
  - family: Wei
    given: Dennis
  - family: Wu
    given: Haoze
  - family: Wu
    given: Min
  - family: Chen
    given: Pin-Yu
  - family: Barrett
    given: Clark
  - family: Farchi
    given: Eitan
  collection-title: Proceedings of machine learning research
  container-title: Proceedings of the 26<sup>th</sup> international conference
    on artificial intelligence and statistics (AISTATS'23)
  editor:
  - family: Ruiz
    given: Francisco
  - family: Dy
    given: Jennifer
  - dropping-particle: van de
    family: Meent
    given: Jan-Willem
  id: WWW+23
  issued:
  - year: 2023
    month: 4
  note: Valencia, Spain
  page: 6853-6878
  publisher: PMLR
  title: Convex bounds on the softmax function with applications to
    robustness verification
  type: paper-conference
  url: "https://proceedings.mlr.press/v206/wei23c.html"
  volume: 206
- abstract: Neural networks have become critical components of reactive
    systems in various do- mains within computer science. Despite their
    excellent performance, using neural networks entails numerous risks
    that stem from our lack of ability to understand and reason about
    their behavior. Due to these risks, various formal methods have been
    proposed for verify- ing neural networks; but unfortunately, these
    typically struggle with scalability barriers. Recent attempts have
    demonstrated that abstraction-refinement approaches could play a
    significant role in mitigating these limitations; but these
    approaches can often produce net- works that are so abstract, that
    they become unsuitable for verification. To deal with this issue, we
    present CEGARETTE, a novel verification mechanism where both the
    system and the property are abstracted and refined simultaneously.
    We observe that this approach allows us to produce abstract networks
    which are both small and sufficiently accurate, allowing for quick
    verification times while avoiding a large number of refinement
    steps. For evaluation purposes, we implemented CEGARETTE as an
    extension to the recently proposed CEGAR-NN framework. Our results
    are highly promising, and demonstrate a significant improvement in
    performance over multiple benchmarks.
  author:
  - family: Cohen
    given: Elazar
  - family: Elboher
    given: Yizhak Yisrael
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  collection-title: EPiC series in computing
  container-title: Proceedings of 24<sup>th</sup> international conference on
    logic for programming, artificial intelligence and reasoning (LPAR
    '23)
  doi: 10.29007/3mk7
  editor:
  - family: Piskac
    given: Ruzica
  - family: Voronkov
    given: Andrei
  id: CEB+23
  issued:
  - year: 2023
    month: 3
  note: Manizales, Columbia
  page: 124-143
  publisher: EasyChair
  title: Tighter abstract queries in neural network verification
  type: paper-conference
  url: "https://easychair.org/publications/paper/q7L6"
  volume: 94
- abstract: A well-known challenge in leveraging automatic theorem
    provers, such as satisfiability modulo theories (SMT) solvers, to
    discharge proof obligations from interactive theorem provers (ITPs)
    is determining which axioms to send to the solver together with the
    con- jecture to be proven. Too many axioms may confuse or clog the
    solver, while too few may make a theorem unprovable. When a solver
    fails to prove a conjecture, it is unclear to the user which case
    transpired. In this paper we enhance SMTCoq --- an integration
    between the Coq ITP and the cvc5 SMT solver --- with a tactic called
    abduce aimed at mitigating the uncertainty above. When the solver
    fails to prove the goal, the user may invoke abduce which will use
    abductive reasoning to provide facts that will allow the solver to
    prove the goal, if any.
  author:
  - family: Barbosa
    given: Haniel
  - family: Keller
    given: Chantal
  - family: Reynolds
    given: Andrew
  - family: Viswanathan
    given: Arjun
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: EPiC series in computing
  container-title: Proceedings of 24<sup>th</sup> international conference on
    logic for programming, artificial intelligence and reasoning (LPAR
    '23)
  doi: 10.29007/432m
  editor:
  - family: Piskac
    given: Ruzica
  - family: Voronkov
    given: Andrei
  id: BKR+23
  issued:
  - year: 2023
    month: 3
  note: Manizales, Columbia
  page: 11-22
  publisher: EasyChair
  title: An interactive SMT tactic in coq using abductive reasoning
  type: paper-conference
  url: "https://easychair.org/publications/paper/lNvq"
  volume: 94
- abstract: We consider the problem of certifying the robustness of deep
    neural networks against real-world distribution shifts. To do so, we
    bridge the gap between hand-crafted specifications and realistic
    deployment settings by considering a neural-symbolic verification
    framework in which generative models are trained to learn
    perturbations from data and specifications are defined with respect
    to the output of these learned models. A pervasive challenge arising
    from this setting is that although S-shaped activations (e.g.,
    sigmoid, tanh) are common in the last layer of deep generative
    models, existing verifiers cannot tightly approximate S-shaped
    activations. To address this challenge, we propose a general
    meta-algorithm for handling S-shaped activations which leverages
    classical notions of counter-example-guided abstraction refinement.
    The key idea is to "lazily" refine the abstraction of S-shaped
    functions to exclude spurious counter-examples found in the previous
    abstraction, thus guaranteeing progress in the verification process
    while keeping the state-space small. For networks with sigmoid
    activations, we show that our technique outperforms state-of-the-art
    verifiers on certifying robustness against both canonical
    adversarial perturbations and numerous real-world distribution
    shifts. Furthermore, experiments on the MNIST and CIFAR-10 datasets
    show that distribution-shift-aware algorithms have significantly
    higher certified robustness against distribution shifts.
  author:
  - family: Wu
    given: Haoze
  - family: Tagomori
    given: Teruhiro
  - family: Robey
    given: Alexander
  - family: Yang
    given: Fengjun
  - family: Matni
    given: Nikolai
  - family: Pappas
    given: George
  - family: Hassani
    given: Hamed
  - family: Păsăreanu
    given: Corina
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 2023 IEEE conference on secure and
    trustworthy machine learning (SaTML)
  doi: 10.1109/SaTML54575.2023.00042
  editor:
  - family: McDaniel
    given: Patrick
  - family: Papernot
    given: Nicolas
  id: WTR+23
  issued:
  - year: 2023
    month: 2
  note: Raleigh, NC
  page: 537-553
  publisher: IEEE
  title: Toward certified robustness against real-world distribution
    shifts
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/WTR+23.pdf"
- abstract: Convolutional neural networks (CNNs) have achieved immense
    popularity in areas like computer vision, image processing, speech
    proccessing, and many others. Unfortunately, despite their excellent
    performance, they are prone to producing erroneous results---for
    example, minor perturbations to their inputs can result in severe
    classification errors. In this paper, we present the CNN-ABS
    framework, which implements an abstraction-refinement based scheme
    for CNN verification. Specifically, CNN-ABS simplifies the
    verification problem through the removal of convolutional
    connections in a way that soundly creates an over-approximation of
    the original problem; it then iteratively restores these connections
    if the resulting problem becomes too abstract. CNN-ABS is designed
    to use existing verification engines as a backend, and our
    evaluation demonstrates that it can significantly boost the
    performance of a state-of-the-art DNN verification engine, reducing
    runtime by 15.7% on average.
  author:
  - family: Ostrovsky
    given: Matan
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 20<sup>th</sup> international symposium
    on automated technology for verification and analysis (ATVA'22)
  doi: 10.1007/978-3-031-19992-9_25
  editor:
  - family: Bouajjani
    given: Ahmed
  - family: Holík
    given: Lukáš
  - family: Wu
    given: Zhilin
  id: OBK22
  issued:
  - year: 2022
    month: 10
  page: 391-396
  publisher: Springer International Publishing
  title: An abstraction-refinement approach to verifying convolutional
    neural networks
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/OBK22.pdf"
  volume: 13505
- abstract: Creating a compiler for an instruction set architecture
    (ISA) requires a set of rewrite rules describing how to translate
    from the compiler's intermediate representation (IR) to the ISA. We
    address this challenge by synthesizing rewrite rules from a
    register-transfer level (RTL) description of the target architecture
    (with minimal annotations about its state and the ISA format),
    together with formal IR semantics, by constructing SMT queries where
    solutions represent valid rewrite rules. We evaluate our approach on
    multiple architectures, supporting both integer and floating-point
    operations. We synthesize both integer and floating-point rewrite
    rules from an intermediate representation to various reconfigurable
    array architectures in under 1.2 seconds per rule. We also
    synthesize integer rewrite rules from WebAssembly to RISC-V with
    both standard and custom extensions in under 4 seconds per rule, and
    we synthesize floating-point rewrite rules in under 8 seconds per
    rule.
  author:
  - family: Daly
    given: Ross
  - family: Donovick
    given: Caleb
  - family: Melchert
    given: Jackson
  - family: Setaluri
    given: Rajsekhar
  - family: Tsiskaridze
    given: Nestan
  - family: Raina
    given: Priyanka
  - family: Barrett
    given: Clark
  - family: Hanrahan
    given: Pat
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on formal methods in computer-aided design (FMCAD'22)
  doi: 10.34727/2022/isbn.978-3-85448-053-2_20
  editor:
  - family: Griggio
    given: Alberto
  - family: Rungta
    given: Neha
  id: DDM+22
  issued:
  - year: 2022
    month: 10
  page: 139-150
  publisher: TU Wien Academic Press
  title: Synthesizing instruction selection rewrite rules from RTL using
    SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/DDM+22.pdf"
- abstract: Satisfiability modulo theories (SMT) solvers are widely used
    to prove security and safety properties of computer systems. For
    these applications, it is crucial that the result reported by an SMT
    solver be correct. Recently, there has been a renewed focus on
    producing independently checkable proofs in SMT solvers, partly with
    the aim of addressing this risk. These proofs record the reasoning
    done by an SMT solver and are ideally detailed enough to be easy to
    check. At the same time, modern SMT solvers typically implement
    hundreds of different term-rewriting rules in order to achieve
    state-of-the-art performance. Generating detailed proofs for
    applications of these rules is a challenge, because code
    implementing rewrite rules can be large and complex. Instrumenting
    this code to additionally produce proofs makes it even more complex
    and makes it harder to add new rewrite rules. We propose an
    alternative approach to the direct instrumentation of the rewriting
    module of an SMT solver. The approach uses a domain-specific
    language (DSL) to describe a set of rewrite rules declaratively and
    then reconstructs detailed proofs for specific rewrite steps on
    demand based on those declarative descriptions.
  author:
  - family: Nötzli
    given: Andres
  - family: Barbosa
    given: Haniel
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on formal methods in computer-aided design (FMCAD'22)
  doi: 10.34727/2022/isbn.978-3-85448-053-2_12
  editor:
  - family: Griggio
    given: Alberto
  - family: Rungta
    given: Neha
  id: NBN+22
  issued:
  - year: 2022
    month: 10
  page: 65-74
  publisher: TU Wien Academic Press
  title: Reconstructing fine-grained proofs of rewrites using a
    domain-specific language
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NBN+22.pdf"
- abstract: With the increasing availability of parallel computing
    power, there is a growing focus on parallelizing algorithms for
    important automated reasoning problems such as Boolean
    satisfiability (SAT). Divide-and-Conquer (D&C) is a popular parallel
    SAT solving paradigm that partitions SAT instances into independent
    sub-problems which are then solved in parallel. For unsatisfiable
    instances, state-of-the-art D&C solvers generate DRAT refutations
    for each sub-problem. However, they do not generate a single
    refutation for the original instance. To close this gap, we present
    Proof-Stitch, a procedure for combining refutations of different
    sub-problems into a single refutation for the original instance. We
    prove the correctness of the procedure and propose optimizations to
    reduce the size and checking time of the combined refutations by
    invoking existing trimming tools in the proof-combination process.
    We also provide an extensible implementation of the proposed
    technique. Experiments on instances from last year's SAT competition
    show that the optimized refutations are checkable up to seven times
    faster than unoptimized refutations.
  author:
  - family: Nair
    given: Abhishek
  - family: Chattopadhyay
    given: Saranyu
  - family: Wu
    given: Haoze
  - family: Ozdemir
    given: Alex
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on formal methods in computer-aided design (FMCAD'22)
  doi: 10.34727/2022/isbn.978-3-85448-053-2_14
  editor:
  - family: Griggio
    given: Alberto
  - family: Rungta
    given: Neha
  id: NCW+22
  issued:
  - year: 2022
    month: 10
  page: 84-88
  publisher: TU Wien Academic Press
  title: "Proof-stitch: Proof combination for divide-and-conquer SAT
    solvers"
  title-short: Proof-stitch
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NCW+22.pdf"
- abstract: With the increasing application of deep learning in
    mission-critical systems, there is a growing need to obtain formal
    guarantees about the behaviors of neural networks. Indeed, many
    approaches for verifying neural networks have been recently
    proposed, but these generally struggle with limited scalability or
    insufficient accuracy. A key component in many state-of-the-art
    verification schemes is computing lower and upper bounds on the
    values that neurons in the network can obtain for a specific input
    domain---and the tighter these bounds, the more likely the
    verification is to succeed. Many common algorithms for computing
    these bounds are variations of the symbolic-bound propagation
    method; and among these, approaches that utilize a process called
    back-substitution are particularly successful. In this paper, we
    present an approach for making back-substitution produce tighter
    bounds. To achieve this, we formulate and then minimize the
    imprecision errors incurred during back-substitution. Our technique
    is general, in the sense that it can be integrated into numerous
    existing symbolic-bound propagation techniques, with only minor
    modifications. We implement our approach as a proof-of-concept tool,
    and present favorable results compared to state-of-the-art verifiers
    that perform back-substitution.
  author:
  - family: Zelazny
    given: Tom
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on formal methods in computer-aided design (FMCAD'22)
  doi: 10.34727/2022/isbn.978-3-85448-053-2_7
  editor:
  - family: Griggio
    given: Alberto
  - family: Rungta
    given: Neha
  id: ZWB+22
  issued:
  - year: 2022
    month: 10
  page: 17-26
  publisher: TU Wien Academic Press
  title: On optimizing back-substitution methods for neural network
    verification
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/ZWB+22.pdf"
- abstract: "Deep neural networks (DNNs) are increasingly being employed
    in safety-critical systems, and there is an urgent need to guarantee
    their correctness. Consequently, the verification community has
    devised multiple techniques and tools for verifying DNNs. When DNN
    verifiers discover an input that triggers an error, that is easy to
    confirm; but when they report that no error exists, there is no way
    to ensure that the verification tool itself is not flawed. As
    multiple errors have already been observed in DNN verification
    tools, this calls the applicability of DNN verification into
    question. In this work, we present a novel mechanism for enhancing
    Simplex-based DNN verifiers with proof production capabilities: the
    generation of an easy-to-check witness of unsatisfiability, which
    attests to the absence of errors. Our proof production is based on
    an efficient adaptation of the well-known Farkas' lemma, combined
    with mechanisms for handling piecewise-linear functions and
    numerical precision errors. As a proof of concept, we implemented
    our technique on top of the Marabou DNN verifier. Our evaluation on
    a safety-critical system for airborne collision avoidance shows that
    proof production succeeds in almost all cases and requires only
    minimal overhead."
  author:
  - family: Isac
    given: Omri
  - family: Barrett
    given: Clark
  - family: Zhang
    given: Min
  - family: Katz
    given: Guy
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on formal methods in computer-aided design (FMCAD'22)
  doi: 10.34727/2022/isbn.978-3-85448-053-2_9
  editor:
  - family: Griggio
    given: Alberto
  - family: Rungta
    given: Neha
  id: IBZ+22
  issued:
  - year: 2022
    month: 10
  page: 38-48
  publisher: TU Wien Academic Press
  title: Neural network verification with proof production
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/IBZ+22.pdf"
- abstract: Dynamic arrays, also referred to as vectors, are fundamental
    data structures used in many programs. Modeling their semantics
    efficiently is crucial when reasoning about such programs. The
    theory of arrays is widely supported but is not ideal, because the
    number of elements is fixed (determined by its index sort) and
    cannot be adjusted, which is a problem, given that the length of
    vectors often plays an important role when reasoning about vector
    programs. In this paper, we propose reasoning about vectors using a
    theory of sequences. We introduce the theory, propose a basic
    calculus adapted from one for the theory of strings, and extend it
    to efficiently handle common vector operations. We prove that our
    calculus is sound and show how to construct a model when it
    terminates with a saturated configuration. Finally, we describe an
    implementation of the calculus in cvc5 and demonstrate its efficacy
    by evaluating it on verification conditions for smart contracts and
    benchmarks derived from existing array benchmarks.
  author:
  - family: Sheng
    given: Ying
  - family: Nötzli
    given: Andres
  - family: Reynolds
    given: Andrew
  - family: Zohar
    given: Yoni
  - family: Dill
    given: David
  - family: Grieskamp
    given: Wolfgang
  - family: Park
    given: Junkil
  - family: Qadeer
    given: Shaz
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 11<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'22)
  doi: 10.1007/978-3-031-10769-6_7
  editor:
  - family: Blanchette
    given: Jasmin
  - family: Kovács
    given: Laura
  - family: Pattinson
    given: Dirk
  id: SNR+22
  issued:
  - year: 2022
    month: 8
  page: 125-143
  publisher: Springer Nature
  title: Reasoning about vectors using an SMT theory of sequences
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SNR+22.pdf"
  volume: 13385
- abstract: The cvc5 SMT solver solves quantifier-free nonlinear real
    arithmetic problems by combining the cylindrical algebraic coverings
    method with incremental linearization in an abstraction-refinement
    loop. The result is a complete algebraic decision procedure that
    leverages efficient heuristics for refining candidate models.
    Furthermore, it can be used with quantifiers, integer variables, and
    in combination with other theories. We describe the overall
    framework, individual solving techniques, and a number of
    implementation details. We demonstrate its effectiveness with an
    evaluation on the SMT-LIB benchmarks.
  author:
  - family: Kremer
    given: Gereon
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 11<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'22)
  doi: 10.1007/978-3-031-10769-6_7
  editor:
  - family: Blanchette
    given: Jasmin
  - family: Kovács
    given: Laura
  - family: Pattinson
    given: Dirk
  id: KRB+22
  issued:
  - year: 2022
    month: 8
  page: 95-105
  publisher: Springer Nature
  title: Cooperating techniques for solving nonlinear real arithmetic in
    the cvc5 SMT solver (system description)
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KRB+22.pdf"
  volume: 13385
- abstract: Proof production for SMT solvers is paramount to ensure
    their correctness independently from implementations, which are
    often prohibitively difficult to verify. Historically, however, SMT
    proof production has struggled with performance and coverage issues,
    resulting in the disabling of many crucial solving techniques and in
    coarse-grained (and thus hard to check) proofs. We present a
    flexible proof-production architecture designed to handle the
    complexity of versatile, industrial-strength SMT solvers and show
    how we leverage it to produce detailed proofs, including for
    components previously unsupported by any solver. The architecture
    allows proofs to be produced modularly, lazily, and with numerous
    safeguards for correctness. This architecture has been implemented
    in the state-of-the-art SMT solver cvc5. We evaluate its proofs for
    SMT-LIB benchmarks and show that the new architecture produces
    better coverage than previous approaches, has acceptable performance
    overhead, and supports detailed proofs for most solving components.
  author:
  - family: Barbosa
    given: Haniel
  - family: Reynolds
    given: Andrew
  - family: Kremer
    given: Gereon
  - family: Lachnitt
    given: Hanna
  - family: Niemetz
    given: Aina
  - family: Nötzli
    given: Andres
  - family: Ozdemir
    given: Alex
  - family: Preiner
    given: Mathias
  - family: Viswanathan
    given: Arjun
  - family: Viteri
    given: Scott
  - family: Zohar
    given: Yoni
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 11<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'22)
  doi: 10.1007/978-3-031-10769-6_3
  editor:
  - family: Blanchette
    given: Jasmin
  - family: Kovács
    given: Laura
  - family: Pattinson
    given: Dirk
  id: BRK+22
  issued:
  - year: 2022
    month: 8
  page: 15-35
  publisher: Springer Nature
  title: Flexible proof production in an industrial-strength SMT solver
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BRK+22.pdf"
  volume: 13385
- abstract: In the past decade, satisfiability modulo theories (SMT)
    solvers have been extended to support the theory of strings and
    regular expressions. This theory has proven to be useful in a wide
    range of applications in academia and industry. To accommodate the
    expressive nature of string constraints used in those applications,
    string solvers use a multi-layered architecture where extended
    operators are reduced to a set of core operators. These reductions,
    however, are often costly to reason about. In this work, we propose
    new techniques for eagerly discovering conflicts based on equality
    reasoning and lazily avoiding reductions for certain extended
    functions based on lightweight reasoning. We present a strategy for
    integrating and scheduling these techniques in a CDCL(T)-based
    theory solver for strings and regular expressions. We implement the
    techniques and the strategy in cvc5, a state-of-the-art SMT solver,
    and show that they lead to a significant performance improvement.
  author:
  - family: Nötzli
    given: Andres
  - family: Reynolds
    given: Andrew
  - family: Barbosa
    given: Haniel
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 34<sup>th</sup> international conference
    on computer aided verification (CAV'22)
  doi: 10.1007/978-3-031-13188-2_11
  editor:
  - family: Shoham
    given: Sharon
  - family: Vizel
    given: Yakir
  id: NRB+22
  issued:
  - year: 2022
    month: 8
  page: 205-226
  publisher: Springer
  title: Even faster conflicts and lazier reductions for string solvers
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NRB+22.pdf"
  volume: 13372
- abstract: SMT solvers are highly complex pieces of software with
    performance, robustness, and correctness as key requirements.
    Complementing traditional testing techniques for these solvers with
    randomized stress testing has been shown to be quite effective.
    Recent work has showcased the value of input fuzzing for finding
    issues, but this approach typically does not comprehensively test a
    solver's API. Previous work on model-based API fuzzing was tailored
    to a single solver and a small subset of SMT-LIB. We present Murxla,
    a comprehensive, modular, and highly extensible model-based API
    fuzzer for SMT solvers. Murxla randomly generates valid sequences of
    solver API calls based on a customizable API model, with full
    support for the semantics and features of SMT-LIB. It is
    solver-agnostic but extensible to allow for solver-specific testing
    and supports option fuzzing, cross-checking with other solvers,
    translation to SMT-LIBv2, and SMT-LIBv2 input fuzzing. Our
    evaluation confirms its efficacy in finding issues in multiple
    state-of-the-art SMT solvers.
  author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 34<sup>th</sup> international conference
    on computer aided verification (CAV'22)
  doi: 10.1007/978-3-031-13188-2_5
  editor:
  - family: Shoham
    given: Sharon
  - family: Vizel
    given: Yakir
  id: NPB22
  issued:
  - year: 2022
    month: 8
  page: 92-106
  publisher: Springer
  title: "Murxla: A modular and highly extensible API fuzzer for SMT
    solvers"
  title-short: Murxla
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NPB22.pdf"
  volume: 13372
- abstract: cvc5 is the latest SMT solver in the cooperating validity
    checker series and builds on the successful code base of CVC4. This
    paper serves as a comprehensive system description of cvc5's
    architectural design and highlights the major features and
    components introduced since CVC4 1.8. We evaluate cvc5's performance
    on all benchmarks in SMT-LIB and provide a comparison against CVC4
    and Z3.
  author:
  - family: Barbosa
    given: Haniel
  - family: Barrett
    given: Clark W.
  - family: Brain
    given: Martin
  - family: Kremer
    given: Gereon
  - family: Lachnitt
    given: Hanna
  - family: Mann
    given: Makai
  - family: Mohamed
    given: Abdalrhman
  - family: Mohamed
    given: Mudathir
  - family: Niemetz
    given: Aina
  - family: Nötzli
    given: Andres
  - family: Ozdemir
    given: Alex
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Sheng
    given: Ying
  - family: Tinelli
    given: Cesare
  - family: Zohar
    given: Yoni
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 28<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'22)
  doi: 10.1007/978-3-030-99524-9\\\_24
  editor:
  - family: Fisman
    given: Dana
  - family: Rosu
    given: Grigore
  id: BBB+22
  issued:
  - year: 2022
    month: 4
  award: SCP Best Tool Paper Award
  page: 415-442
  publisher: Springer
  title: "cvc5: A versatile and industrial-strength SMT solver"
  title-short: cvc5
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BBB+22.pdf"
  volume: 13243
- abstract: "Inspired by sum-of-infeasibilities methods in convex
    optimization, we propose a novel procedure for analyzing
    verification queries on neural networks with piecewise-linear
    activation functions. Given a convex relaxation which
    over-approximates the non-convex activation functions, we encode the
    violations of activation functions as a cost function and optimize
    it with respect to the convex relaxation. The cost function,
    referred to as the Sum-of-Infeasibilities (SoI), is designed so that
    its minimum is zero and achieved only if all the activation
    functions are satisfied. We propose a stochastic procedure, DeepSoI,
    to efficiently minimize the SoI. An extension to a canonical
    case-analysis-based complete search procedure can be achieved by
    replacing the convex procedure executed at each search state with
    DeepSoI. Extending the complete search with DeepSoI achieves
    multiple simultaneous goals: 1) it guides the search towards a
    counter-example; 2) it enables more informed branching decisions;
    and 3) it creates additional opportunities for bound derivation. An
    extensive evaluation across different benchmarks and solvers
    demonstrates the benefit of the proposed techniques. In particular,
    we demonstrate that SoI significantly improves the performance of an
    existing complete search procedure. Moreover, the SoI-based
    implementation outperforms other state-of-the-art complete
    verifiers. We also show that our technique can efficiently improve
    upon the perturbation bound derived by a recent adversarial attack
    algorithm."
  author:
  - family: Wu
    given: Haoze
  - family: Zeljić
    given: Aleksandar
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 28<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'22)
  doi: 10.1007/978-3-030-99524-9\\\_24
  editor:
  - family: Fisman
    given: Dana
  - family: Rosu
    given: Grigore
  id: WZK+22
  issued:
  - year: 2022
    month: 4
  page: 143-163
  publisher: Springer
  title: Efficient neural network analysis with sum-of-infeasibilities
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/WZK+22.pdf"
  volume: 13243
- abstract: The state of the art for bit-precise reasoning in the
    context of Satisfiability Modulo Theories (SMT) is a SAT-based
    technique called bit-blasting where the input formula is first
    simplified and then translated to an equisatisfiable propositional
    formula. The main limitation of this technique is scalability,
    especially in the presence of large bit-widths and arithmetic
    operators. We introduce an alternative technique, which we call
    int-blasting, based on a translation to an extension of integer
    arithmetic rather than propositional logic. We present several
    translations, discuss their differences, and evaluate them on
    benchmarks that arise from the verification of rewrite rule
    candidates for bit-vector solving, as well as benchmarks from
    SMT-LIB. We also provide preliminary results on 35 benchmarks that
    arise from smart contract verification. The evaluation shows that
    this technique is particularly useful for benchmarks with large
    bit-widths and can solve benchmarks that the state of the art
    cannot.
  author:
  - family: Zohar
    given: Yoni
  - family: Irfan
    given: Ahmed
  - family: Mann
    given: Makai
  - family: Niemetz
    given: Aina
  - family: Nötzli
    given: Andres
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 23<sup>rd</sup> international conference
    on verification, model checking, and abstract interpretion (VMCAI
    '22)
  doi: 10.1007/978-3-030-94583-1_24
  editor:
  - family: Finkbeiner
    given: Bernd
  - family: Wies
    given: Thomas
  id: ZIM+22
  issued:
  - year: 2022
    month: 1
  page: 496-518
  publisher: Springer
  title: Bit-precise reasoning via int-blasting
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/ZIM+22.pdf"
  volume: 13182
- abstract: The increasing complexity of modern confgurable systems
    makes it critical to improve the level of automation in the process
    of system confguration. Such automation can also improve the agility
    of the development cycle, allowing for rapid and automated
    integration of decoupled workfows. In this paper, we present a new
    framework for automated confguration of systems representable as
    state machines. The framework leverages model checking and
    satisfability modulo theories (SMT) and can be applied to any
    application domain representable using SMT formulas. Our approach
    can also be applied modularly, improving its scalability.
    Furthermore, we show how optimization can be used to produce
    confgurations that are best according to some metric and also more
    likely to be understandable to humans. We showcase this framework
    and its fexibility by using it to confgure a CGRA memory tile for
    various image processing applications.
  author:
  - family: Tsiskaridze
    given: Nestan
  - family: Strange
    given: Maxwell
  - family: Mann
    given: Makai
  - family: Sreedhar
    given: Kavya
  - family: Liu
    given: Qiaoyi
  - family: Horowitz
    given: Mark
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 21<sup>st</sup> international conference
    on formal methods in computer-aided design (FMCAD'21)
  doi: 10.34727/2021/isbn.978-3-85448-046-4_19
  editor:
  - family: Piskac
    given: Ruzica
  - family: Whalen
    given: Michael W.
  id: TSM+21
  issued:
  - year: 2021
    month: 10
  page: 102-111
  publisher: TU Wien Academic Press
  title: Automating system configuration
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/TSM+21.pdf"
- abstract: Hardware accelerators (HAs) are essential building blocks
    for fast and energy-efficient computing systems. Accelerator Quick
    Error Detection (A-QED) is a recent formal technique which uses
    Bounded Model Checking for pre-silicon verification of HAs. A-QED
    checks an HA for self-consistency, i.e., whether identical inputs
    within a sequence of operations always produce the same output.
    Under modest assumptions, A-QED is both sound and complete. However,
    as is well-known, large design sizes significantly limit the
    scalability of formal verification, including A-QED. We overcome
    this scalability challenge through a new decomposition technique for
    A-QED, called A-QED with Decomposition (A-QED$^2$). A-QED$^2$
    systematically decomposes an HA into smaller, functional
    sub-modules, called sub-accelerators, which are then verified
    independently using A-QED. We prove completeness of A-QED$^2$ ; in
    particular, if the full HA under verification contains a bug, then
    A-QED$^2$ ensures detection of that bug during A-QED verification of
    the corresponding subaccelerators. Results on over 100 (buggy)
    versions of a wide variety of HAs with millions of logic gates
    demonstrate the effectiveness and practicality of A-QED$^2$.
  author:
  - family: Chattopadhyay
    given: Saranyu
  - family: Lonsing
    given: Florian
  - family: Piccolboni
    given: Luca
  - family: Soni
    given: Deepraj
  - family: Wei
    given: Peng
  - family: Zhang
    given: Xiaofan
  - family: Zhou
    given: Yuan
  - family: Carloni
    given: Luca
  - family: Chen
    given: Deming
  - family: Cong
    given: Jason
  - family: Karri
    given: Ramesh
  - family: Zhang
    given: Zhiru
  - family: Trippel
    given: Caroline
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  container-title: Proceedings of the 21<sup>st</sup> international conference
    on formal methods in computer-aided design (FMCAD'21)
  doi: 10.34727/2021/isbn.978-3-85448-046-4_12
  editor:
  - family: Piskac
    given: Ruzica
  - family: Whalen
    given: Michael W.
  id: CLP+21
  issued:
  - year: 2021
    month: 10
  page: 42-52
  publisher: TU Wien Academic Press
  title: Scaling up hardware accelerator verification using A-QED with
    functional decomposition
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/CLP+21.pdf"
- abstract: "In recent years, cloud service providers have sold
    computation in increasingly granular units. Most recently,
    \\\"serverless\\\" executors run a single executable with restricted
    network access and for a limited time. The beneft of these
    restrictions is scale: thousand-way parallelism can be allocated in
    seconds, and CPU time is billed with sub-second granularity. To
    exploit these executors, we introduce gg-SAT: an implementation of
    divide-and-conquer SAT solving. Infrastructurally, gg-SAT departs
    substantially from previous implementations: rather than handling
    process or server management itself, gg-SAT builds on the gg
    framework, allowing computations to be executed on a confgurable
    backend, including serverless offerings such as AWS Lambda. Our
    experiments suggest that when run on the same hardware, gg-SAT
    performs competitively with other D&C solvers, and that the 1000-way
    parallelism it offers (through AWS Lambda) is useful for some
    challenging SAT instances."
  author:
  - family: Ozdemir
    given: Alex
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 21<sup>st</sup> international conference
    on formal methods in computer-aided design (FMCAD'21)
  doi: 10.34727/2021/isbn.978-3-85448-046-4_33
  editor:
  - family: Piskac
    given: Ruzica
  - family: Whalen
    given: Michael W.
  id: OWB21
  issued:
  - year: 2021
    month: 10
  page: 241-245
  publisher: TU Wien Academic Press
  title: SAT solving in the serverless cloud
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/OWB21.pdf"
- abstract: "We introduce DeepCert, a tool-supported method for
    verifying the robustness of deep neural network (DNN) image
    classifiers to contextually relevant perturbations such as blur,
    haze, and changes in image contrast. While the robustness of DNN
    classifiers has been the subject of intense research in recent
    years, the solutions delivered by this research focus on verifying
    DNN robustness to small perturbations in the images being
    classified, with perturbation magnitude measured using established
    L_p norms. This is useful for identifying potential adversarial
    attacks on DNN image classifiers, but cannot verify DNN robustness
    to contextually relevant image perturbations, which are typically
    not small when expressed with L_p norms. DeepCert addresses this
    underexplored verification problem by supporting: (1) the encoding
    of real-world image perturbations; (2) the systematic evaluation of
    contextually relevant DNN robustness, using both testing and formal
    verification; (3) the generation of contextually relevant
    counterexamples; and, through these, (4) the selection of DNN image
    classifiers suitable for the operational context (i) envisaged when
    a potentially safety-critical system is designed, or (ii) observed
    by a deployed system. We demonstrate the effectiveness of DeepCert
    by showing how it can be used to verify the robustness of DNN image
    classifiers build for two benchmark datasets ('German Traffic Sign'
    and 'CIFAR-10') to multiple contextually relevant perturbations."
  author:
  - family: Paterson
    given: Colin
  - family: Wu
    given: Haoze
  - family: Grese
    given: John
  - family: Calinescu
    given: Radu
  - family: Păsăreanu
    given: Corina S.
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Computer safety, reliability, and security (SAFECOMP
    '21)
  doi: 10.1007/978-3-030-83903-1_5
  editor:
  - family: Habli
    given: Ibrahim
  - family: Sujan
    given: Mark
  - family: Bitsch
    given: Friedemann
  id: PWG+21
  issued:
  - year: 2021
    month: 9
  page: 3-17
  publisher: Springer International Publishing
  title: "DeepCert: Verification of contextually relevant robustness for
    neural network image classifiers"
  title-short: DeepCert
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/PWG+21.pdf"
  volume: 12852
- abstract: Symbolic model checking is an important tool for finding
    bugs (or proving the absence of bugs) in modern system designs.
    Because of this, improving the ease of use, scalability, and
    performance of model checking tools and algorithms continues to be
    an important research direction. In service of this goal, we present
    Pono, an open-source SMT-based model checker. Pono is designed to be
    both a research platform for developing and improving model checking
    algorithms, as well as a performance-competitive tool that can be
    used for academic and industry verification applications. In
    addition to performance, Pono prioritizes transparency (developed as
    an open-source project on GitHub), flexibility (Pono can be adapted
    to a variety of tasks by exploiting its general SMT-based
    interface), and extensibility (it is easy to add new algorithms and
    new back-end solvers). In this paper, we describe the design of the
    tool with a focus on the flexible and extensible architecture, cover
    its current capabilities, and demonstrate that Pono is competitive
    with state-of-the-art tools.
  author:
  - family: Mann
    given: Makai
  - family: Irfan
    given: Ahmed
  - family: Lonsing
    given: Florian
  - family: Yang
    given: Yahan
  - family: Zhang
    given: Hongce
  - family: Brown
    given: Kristopher
  - family: Gupta
    given: Aarti
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 33<sup>rd</sup> international conference
    on computer aided verification (CAV'21)
  doi: 10.1007/978-3-030-81688-9_22
  editor:
  - family: Leino
    given: Rustan
  - family: Silva
    given: Alexandra
  id: MIL+21
  issued:
  - year: 2021
    month: 7
  page: 461-474
  publisher: Springer International Publishing
  title: "Pono: A flexible and extensible SMT-based model checker"
  title-short: Pono
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MIL+21.pdf"
  volume: 12760
- abstract: We make two contributions to the study of polite combination
    in satisfiability modulo theories. The first is a separation between
    politeness and strong politeness, by presenting a polite theory that
    is not strongly polite. This result shows that proving strong
    politeness (which is often harder than proving politeness) is
    sometimes needed in order to use polite combination. The second
    contribution is an optimization to the polite combination method,
    obtained by borrowing from the Nelson-Oppen method. The Nelson-Oppen
    method is based on guessing arrangements over shared variables. In
    contrast, polite combination requires an arrangement over all
    variables of the shared sorts. We show that when using polite
    combination, if the other theory is stably infinite with respect to
    a shared sort, only the shared variables of that sort need be
    considered in arrangements, as in the Nelson-Oppen method. The time
    required to reason about arrangements is exponential in the worst
    case, so reducing the number of variables considered has the
    potential to improve performance significantly. We show preliminary
    evidence for this by demonstrating a speed-up on a smart contract
    verification benchmark.
  author:
  - family: Sheng
    given: Ying
  - family: Zohar
    given: Yoni
  - family: Ringeissen
    given: Christophe
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 28<sup>th</sup> international conference
    on automated deduction (CADE'21)
  editor:
  - family: Platzer
    given: André
  - family: Sutcliffe
    given: Geoff
  id: SZR+21
  issued:
  - year: 2021
    month: 7
  page: 148-165
  publisher: Springer
  title: "Politeness and stable infiniteness: Stronger together"
  title-short: Politeness and stable infiniteness
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SZR+21.pdf"
  volume: 12699
- abstract: This paper presents Smt-Switch, an open-source,
    solver-agnostic API for SMT solving. Smt-Switch provides simple,
    uniform, and high-performance access to SMT solving for applications
    in areas such as automated reasoning, planning, and formal
    verification. It defines an abstract interface, which can be
    implemented by different SMT solvers. The interface allows the user
    to create, traverse, and manipulate terms, as well as dynamically
    dispatch queries to various underlying SMT solvers.
  author:
  - family: Mann
    given: Makai
  - family: Wilson
    given: Amalee
  - family: Zohar
    given: Yoni
  - family: Stuntz
    given: Lindsey
  - family: Irfan
    given: Ahmed
  - family: Brown
    given: Kristopher
  - family: Donovick
    given: Caleb
  - family: Guman
    given: Allison
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 24<sup>th</sup> international conference
    on theory and applications of satisfiability testing (SAT'21)
  doi: 10.1007/978-3-030-80223-3_26
  editor:
  - family: Li
    given: Chu-Min
  - family: Manyà
    given: Felip
  id: MWZ+21
  issued:
  - year: 2021
    month: 7
  note: Barcelona, Spain
  page: 377-386
  publisher: Springer
  title: "Smt-switch: A solver-agnostic C++ API for SMT solving"
  title-short: Smt-switch
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MWZ+21.pdf"
  volume: 12831
- abstract: We develop a framework for model checking infinite-state
    systems by automatically augmenting them with auxiliary variables,
    enabling quantifier-free induction proofs for systems that would
    otherwise require quantified invariants. We combine this mechanism
    with a counterexample-guided abstraction refinement scheme for the
    theory of arrays. Our framework can thus, in many cases, reduce
    inductive reasoning with quantifiers and arrays to quantifier-free
    and array-free reasoning. We evaluate the approach on a wide set of
    benchmarks from the literature. The results show that our
    implementation often outperforms state-of-the-art tools,
    demonstrating its practical potential.
  author:
  - family: Mann
    given: Makai
  - family: Irfan
    given: Ahmed
  - family: Griggio
    given: Alberto
  - family: Padon
    given: Oded
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'21)
  doi: 10.1007/978-3-030-72016-2
  editor:
  - family: Groote
    given: Jan Friso
  - family: Larsen
    given: Kim Guldstrand
  id: MIG+21
  issued:
  - year: 2021
    month: 3
  page: 113-132
  publisher: Springer
  title: Counterexample-guided prophecy for model checking modulo the
    theory of arrays
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MIG+21.pdf"
  volume: 12651
- abstract: This paper presents a novel approach for quantifier
    instantiation in Satisfiability Modulo Theories (SMT) that leverages
    syntax-guided synthesis (SyGuS) to choose instantiation terms. It
    targets quantified constraints over background theories such as
    (non)linear integer, reals and floating-point arithmetic,
    bit-vectors, and their combinations. Unlike previous approaches for
    quantifier instantiation in these domains which rely on
    theory-specific strategies, the new approach can be applied to any
    (combined) theory, when provided with a grammar for instantiation
    terms for all sorts in the theory. We implement syntax-guided
    instantiation in the SMT solver CVC4, leveraging its support for
    enumerative SyGuS. Our experiments demonstrate the versatility of
    the approach, showing that it is competitive with or exceeds the
    performance of state-of-the-art solvers on a range of background
    theories.
  author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'21)
  doi: 10.1007/978-3-030-72013-1
  editor:
  - family: Groote
    given: Jan Friso
  - family: Larsen
    given: Kim Guldstrand
  id: NPR+21
  issued:
  - year: 2021
    month: 3
  award: Nominated for the EATCS Best ETAPS Theory Paper Award
  page: 145-163
  publisher: Springer
  title: Syntax-guided quantifier instantiation
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NPR+21.pdf"
  volume: 12652
- abstract: Deep learning has emerged as an effective approach for
    creating modern software systems, with neural networks often
    surpassing hand-crafted systems. Unfortunately, neural networks are
    known to suffer from various safety and security issues. Formal
    verification is a promising avenue for tackling this difficulty, by
    formally certifying that networks are correct. We propose an
    SMT-based technique for verifying binarized neural networks---a
    popular kind of neural network, where some weights have been
    binarized in order to render the neural network more memory and
    energy efficient, and quicker to evaluate. One novelty of our
    technique is that it allows the verification of neural networks that
    include both binarized and non-binarized components. Neural network
    verification is computationally very difficult, and so we propose
    here various optimizations, integrated into our SMT procedure as
    deduction steps, as well as an approach for parallelizing
    verification queries. We implement our technique as an extension to
    the Marabou framework, and use it to evaluate the approach on
    popular binarized neural network architectures.
  author:
  - family: Amir
    given: Guy
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'21)
  doi: 10.1007/978-3-030-72013-1_11
  editor:
  - family: Groote
    given: Jan Friso
  - family: Larsen
    given: Kim Guldstrand
  id: AWB+21
  issued:
  - year: 2021
    month: 3
  page: 203-222
  publisher: Springer
  title: An SMT-based approach for verifying binarized neural networks
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/AWB+21.pdf"
  volume: 12652
- abstract: The ACAS X family of aircraft collision avoidance systems
    uses large numeric lookup tables to make decisions. Recent work used
    a deep neural network to approximate and compress a collision
    avoidance table, and simulations showed that the neural network
    performance was comparable to the original table. Consequently,
    neural network representations are being explored for use on small
    aircraft with limited storage capacity. However, the black-box
    nature of deep neural networks raises safety concerns because
    simulation results are not exhaustive. This work takes steps towards
    addressing these concerns by applying formal methods to analyze the
    behavior of collision avoidance neural networks both in isolation
    and in a closed-loop system. We evaluate our approach on a specific
    set of collision avoidance networks and show that even though the
    networks are not always locally robust, their closed-loop behavior
    ensures that they will not reach an unsafe (collision) state.
  author:
  - family: Irfan
    given: Ahmed
  - family: Julian
    given: Kyle D.
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  - family: Kochenderfer
    given: Mykel J.
  - family: Meng
    given: Baoluo
  - family: Lopez
    given: James
  container-title: Proceedings of the 39<sup>th</sup> digital avionics systems
    conference (DASC'20)
  doi: 10.1109/DASC50938.2020.9256616
  id: IJW+20
  issued:
  - year: 2020
    month: 10
  title: Towards verification of neural networks for small unmanned
    aircraft collision avoidance
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/IJW+20.pdf"
- abstract: Deep neural networks are revolutionizing the way complex
    systems are developed. However, these automatically-generated
    networks are opaque to humans, making it difficult to reason about
    them and guarantee their correctness. Here, we propose a novel
    approach for verifying properties of a widespread variant of neural
    networks, called recurrent neural networks. Recurrent neural
    networks play a key role in, e.g., speech recognition, and their
    verification is crucial for guaranteeing the reliability of many
    critical systems. Our approach is based on the inference of
    invariants, which allow us to reduce the complex problem of
    verifying recurrent networks into simpler, non-recurrent problems.
    Experiments with a proof-of-concept implementation of our approach
    demonstrate that it performs orders-of-magnitude better than the
    state of the art.
  author:
  - family: Jacoby
    given: Yuval
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 18<sup>th</sup> international symposium
    on automated technology for verification and analysis (ATVA'20)
  doi: 10.1007/978-3-030-59152-6_3
  editor:
  - family: Hung
    given: Dang Van
  - family: Sokolsky
    given: Oleg
  id: JBK20
  issued:
  - year: 2020
    month: 10
  page: 57-74
  publisher: Springer International Publishing
  title: Verifying recurrent neural networks using invariant inference
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/JBK20.pdf"
  volume: 12302
- abstract: The theory of strings supported by solvers in formal methods
    contains a large number of operators. Instead of implementing a
    semi-decision procedure that reasons about all the operators
    directly, string solvers often reduce operators to a core fragment
    and implement a semi-decision procedure over that fragment. These
    reductions considerably increase the number of constraints and thus
    have to be done carefully to achieve good performance. We propose
    novel reductions from regular expressions to string constraints and
    a framework for minimizing the introduction of new variables in
    current reductions of string constraints. The reductions of regular
    expression constraints enable string solvers to handle a significant
    fragment of such constraints without using dedicated reasoning over
    regular expressions. Minimizing the number of variables in the
    reduced constraints makes those constraints significantly cheaper to
    solve by the core solver. An experimental evaluation of our
    implementation of both techniques in CVC4, a state-of-the-art SMT
    solver with extensive support for the theory of strings, shows that
    they significantly improve the solver's performance.
  author:
  - family: Reynolds
    given: Andrew
  - family: Nötzli
    given: Andres
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Proceedings of the 20<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'20)
  doi: 10.34727/2020/isbn.978-3-85448-042-6_30
  editor:
  - family: Ivrii
    given: Alexander
  - family: Strichman
    given: Ofer
  id: RNB+20-FMCAD
  issued:
  - year: 2020
    month: 9
  page: 225-235
  publisher: TU Wien Academic Press
  title: Reductions for strings and regular expressions revisited
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RNB+20-FMCAD.pdf"
- abstract: Inspired by recent successes of parallel techniques for
    solving Boolean satisfiability, we investigate a set of strategies
    and heuristics to leverage parallelism and improve the scalability
    of neural network verification. We present a general description of
    the Split-and-Conquer partitioning algorithm, implemented within the
    Marabou framework, and discuss its parameters and heuristic choices.
    In particular, we explore two novel partitioning strategies, that
    partition the input space or the phases of the neuron activations,
    respectively. We introduce a branching heuristic and a direction
    heuristic that are based on the notion of polarity. We also
    introduce a highly parallelizable pre-processing algorithm for
    simplifying neural network verification problems. An extensive
    experimental evaluation shows the benefit of these techniques on
    both existing and new benchmarks. A preliminary experiment
    ultra-scaling our algorithm using a large distributed cloud-based
    platform also shows promising results.
  author:
  - family: Wu
    given: Haoze
  - family: Ozdemir
    given: Alex
  - family: Zeljić
    given: Aleksandar
  - family: Julian
    given: Kyle
  - family: Irfan
    given: Ahmed
  - family: Gopinath
    given: Divya
  - family: Fouladi
    given: Sadjad
  - family: Katz
    given: Guy
  - family: Pasareanu
    given: Corina
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 20<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'20)
  doi: 10.34727/2020/isbn.978-3-85448-042-6_20
  editor:
  - family: Ivrii
    given: Alexander
  - family: Strichman
    given: Ofer
  id: WOZ+20
  issued:
  - year: 2020
    month: 9
  page: 128-137
  publisher: TU Wien Academic Press
  title: Parallelization techniques for verifying neural networks
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/WOZ+20.pdf"
- abstract: "Symbolic quick error detection (SQED) is a formal
    pre-silicon verification technique targeted at processor designs. It
    leverages bounded model checking (BMC) to check a design for
    counterexamples to a self-consistency property: given the
    instruction set architecture (ISA) of the design, executing an
    instruction sequence twice on the same inputs must always produce
    the same outputs. Self-consistency is a universal,
    implementation-independent property. Consequently, in contrast to
    traditional verification approaches that use implementationspecific
    assertions (often generated manually), SQED does not require a full
    formal design specification or manually-written properties. Case
    studies have shown that SQED is effective for commercial designs and
    that SQED substantially improves design productivity. However, until
    now there has been no formal characterization of its bug-finding
    capabilities. We aim to close this gap by laying a formal foundation
    for SQED. We use a transition-system processor model and define the
    notion of a bug using an abstract specification relation. We prove
    the soundness of SQED, i.e., that any bug reported by SQED is in
    fact a real bug in the processor. Importantly, this result holds
    regardless of what the actual specification relation is. We next
    describe conditions under which SQED is complete, that is, what
    kinds of bugs it is guaranteed to find. We show that for a large
    class of bugs, SQED can always find a trace exhibiting the bug.
    Ultimately, we prove full completeness of a variant of SQED that
    uses specialized state reset instructions. Our results enable a
    rigorous understanding of SQED and its bug-finding capabilities and
    give insights on how to optimize implementations of SQED in
    practice."
  author:
  - family: Lonsing
    given: Florian
  - family: Mitra
    given: Subhasish
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 20<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'20)
  doi: 10.34727/2020/isbn.978-3-85448-042-6_9
  editor:
  - family: Ivrii
    given: Alexander
  - family: Strichman
    given: Ofer
  id: LMB20
  issued:
  - year: 2020
    month: 9
  page: 26-35
  publisher: TU Wien Academic Press
  title: A theoretical framework for symbolic quick error detection
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/LMB20.pdf"
- abstract: While hardware generators have drastically improved design
    productivity, they have introduced new challenges for the task of
    verification. To effectively cover the functionality of a
    sophisticated generator, verification engineers require tools that
    provide the flexibility of metaprogramming. However, flexibility
    alone is not enough; components must also be portable in order to
    encourage the proliferation of verification libraries as well as
    enable new methodologies. This paper introduces fault, a Python
    embedded hardware verification language that aims to empower design
    teams to realize the full potential of generators.
  author:
  - family: Truong
    given: Lenny
  - family: Herbst
    given: Steven
  - family: Setaluri
    given: Rajsekhar
  - family: Mann
    given: Makai
  - family: Daly
    given: Ross
  - family: Zhang
    given: Keyi
  - family: Donovick
    given: Caleb
  - family: Stanley
    given: Daniel
  - family: Horowitz
    given: Mark
  - family: Barrett
    given: Clark
  - family: Hanrahan
    given: Pat
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 32<sup>nd</sup> international conference
    on computer aided verification (CAV'20)
  editor:
  - family: Lahiri
    given: Shuvendu K.
  - family: Wang
    given: Chao
  id: THS+20
  isbn: 978-3-030-53288-8
  issued:
  - year: 2020
    month: 7
  page: 403-414
  publisher: Springer International Publishing
  title: "Fault: A python embedded domain-specific language for
    metaprogramming portable hardware verification components"
  title-short: Fault
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/THS+20.pdf"
  volume: 12224
- abstract: The Libra blockchain is designed to store billions of
    dollars in assets, so the security of code that executes
    transactions is important. The Libra blockchain has a new language
    for implementing transactions, called "Move." This paper describes
    the Move Prover, an automatic formal verification system for Move.
    We overview the unique features of the Move language and then
    describe the architecture of the Prover, including the language for
    formal specification and the translation to the Boogie intermediate
    verification language.
  author:
  - family: Zhong
    given: Jingyi Emma
  - family: Cheang
    given: Kevin
  - family: Qadeer
    given: Shaz
  - family: Grieskamp
    given: Wolfgang
  - family: Blackshear
    given: Sam
  - family: Park
    given: Junkil
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  - family: Dill
    given: David L.
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 32<sup>nd</sup> international conference
    on computer aided verification (CAV'20)
  editor:
  - family: Lahiri
    given: Shuvendu K.
  - family: Wang
    given: Chao
  id: ZCQ+20
  isbn: 978-3-030-53288-8
  issued:
  - year: 2020
    month: 7
  page: 137-150
  publisher: Springer International Publishing
  title: The move prover
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/ZCQ+20.pdf"
  volume: 12224
- abstract: Although an agile approach is standard for software design,
    how to properly adapt this method to hardware is still an open
    question. This work addresses this question while building a system
    on chip (SoC) with specialized accelerators. Rather than using a
    traditional waterfall design flow, which starts by studying the
    application to be accelerated, we begin by constructing a complete
    flow from an application expressed in a high-level domain-specific
    language (DSL), in our case Halide, to a generic coarse-grained
    reconfigurable array (CGRA). As our under-standing of the
    application grows, the CGRA design evolves, and we have developed a
    suite of tools that tune application code, the compiler, and the
    CGRA to increase the efficiency of the resulting implementation. To
    meet our continued need to update parts of the system while
    maintaining the end-to-end flow, we have created DSL-based hardware
    generators that not only provide the Verilog needed for the
    implementation of the CGRA, but also create the collateral that the
    compiler/mapper/place and route system needs to configure its
    operation. This work provides a systematic approach for desiging and
    evolving high-performance and energy-efficient hardware-software
    systems for any application domain.
  author:
  - family: Bahr
    given: R.
  - family: Barrett
    given: C.
  - family: Bhagdikar
    given: N.
  - family: Carsello
    given: A.
  - family: Daly
    given: R.
  - family: Donovick
    given: C.
  - family: Durst
    given: D.
  - family: Fatahalian
    given: K.
  - family: Feng
    given: K.
  - family: Hanrahan
    given: P.
  - family: Hofstee
    given: T.
  - family: Horowitz
    given: M.
  - family: Huff
    given: D.
  - family: Kjolstad
    given: F.
  - family: Kong
    given: T.
  - family: Liu
    given: Q.
  - family: Mann
    given: M.
  - family: Melchert
    given: J.
  - family: Nayak
    given: A.
  - family: Niemetz
    given: A.
  - family: Nyengele
    given: G.
  - family: Raina
    given: P.
  - family: Richardson
    given: S.
  - family: Setaluri
    given: R.
  - family: Setter
    given: J.
  - family: Sreedhar
    given: K.
  - family: Strange
    given: M.
  - family: Thomas
    given: J.
  - family: Torng
    given: C.
  - family: Truong
    given: L.
  - family: Tsiskaridze
    given: N.
  - family: Zhang
    given: K.
  container-title: Proceedings of the 57<sup>th</sup> design automation
    conference (DAC'20)
  doi: 10.1109/DAC18072.2020.9218553
  id: BBB+20
  issued:
  - year: 2020
    month: 7
  publisher: Association for Computing Machinery
  title: Creating an agile hardware design flow
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BBB+20.pdf"
- abstract: "We present A-QED (Accelerator-Quick Error Detection), a new
    approach for pre-silicon formal verification of stand-alone hardware
    accelerators. A-QED relies on bounded model checking -- however, it
    does not require extensive design-specific properties or a full
    formal design specification. While A- QED is effective for both RTL
    and high-level synthesis (HLS) design flows, it integrates
    seamlessly with HLS flows. Our A-QED results on several hardware
    accelerator designs demonstrate its practicality and
    effectiveness: 1. A-QED detected all bugs detected by conventional
    verification flow. 2. A-QED detected bugs that escaped conventional
    verification flow. 3. A-QED improved verification productivity
    dramatically, by 30X, in one of our case studies (1 person-day using
    A-QED vs. 30 person-days using conventional verification flow). 4.
    A-QED produced short counterexamples for easy debug (37X shorter on
    average vs. conventional verification flow)."
  author:
  - family: Singh
    given: Eshan
  - family: Lonsing
    given: Florian
  - family: Chattopadhyay
    given: Saranyu
  - family: Strange
    given: Max
  - family: Wei
    given: Peng
  - family: Zhang
    given: Xiaofan
  - family: Zhao
    given: Yuan
  - family: Cong
    given: Jason
  - family: Chen
    given: Deming
  - family: Zhang
    given: Zhiru
  - family: Raina
    given: Priyankja
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  container-title: Proceedings of the 57<sup>th</sup> design automation
    conference (DAC'20)
  doi: 10.1109/DAC18072.2020.9218715
  id: SLC+20
  issued:
  - year: 2020
    month: 7
  publisher: Association for Computing Machinery
  title: A-QED verification of hardware accelerators
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SLC+20.pdf"
- abstract: Algebraic datatypes, and among them lists and trees, have
    attracted a lot of interest in automated reasoning and
    Satisfiability Modulo Theories (SMT). Since its latest stable
    version, the SMT-LIB standard defines a theory of algebraic
    datatypes, which is currently supported by several mainstream SMT
    solvers. In this paper, we study this particular theory of datatypes
    and prove that it is strongly polite, showing also how it can be
    combined with other arbitrary disjoint theories using polite
    combination. Our results cover both inductive and finite datatypes,
    as well as their union. The combination method uses a new, simple,
    and natural notion of additivity, that enables deducing strong
    politeness from (weak) politeness.
  author:
  - family: Sheng
    given: Ying
  - family: Zohar
    given: Yoni
  - family: Ringeissen
    given: Christophe
  - family: Lange
    given: Jane
  - family: Fontaine
    given: Pascal
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 10<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'20)
  editor:
  - family: Peltier
    given: Nicolas
  - family: Sofronie-Stokkermans
    given: Viorica
  id: SZR+20
  isbn: 978-3-030-51074-9
  issued:
  - year: 2020
    month: 7
  award: Best Paper Award
  page: 238-255
  publisher: Springer International Publishing
  title: Politeness for the theory of algebraic datatypes
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SZR+20.pdf"
  volume: 12166
- abstract: In text encoding standards such as Unicode, text strings are
    sequences of code points, each of which can be represented as a
    natural number. We present a decision procedure for a
    concatenation-free theory of strings that includes length and a
    conversion function from strings to integer code points.
    Furthermore, we show how many common string operations, such as
    conversions between lowercase and uppercase, can be naturally
    encoded using this conversion function. We describe our
    implementation of this approach in the SMT solver CVC4, which
    contains a high-performance string subsolver, and show that the use
    of a native procedure for code points significantly improves its
    performance with respect to other state-of-the-art string solvers.
  author:
  - family: Reynolds
    given: Andrew
  - family: Nötzli
    given: Andres
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 9<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'20)
  editor:
  - family: Peltier
    given: Nicolas
  - family: Sofronie-Stokkermans
    given: Viorica
  id: RNB+20-IJCAR
  isbn: 978-3-030-51074-9
  issued:
  - year: 2020
    month: 7
  page: 218-237
  publisher: Springer International Publishing
  title: A decision procedure for string to code point conversion
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RNB+20-IJCAR.pdf"
  volume: 12166
- abstract: "Deep neural network (DNN) verification is an emerging
    field, with diverse verification engines quickly becoming available.
    Demonstrating the effectiveness of these engines on real-world DNNs
    is an important step towards their wider adoption. We present a tool
    that can leverage existing verification engines in performing a
    novel application: neural network simplification, through the
    reduction of the size of a DNN without harming its accuracy. We
    report on the work-flow of the simplification process, and
    demonstrate its potential significance and applicability on a family
    of real-world DNNs for aircraft collision avoidance, whose sizes we
    were able to reduce by as much as 10%."
  author:
  - family: Gokulanathan
    given: Sumathi
  - family: Feldsher
    given: Alexander
  - family: Malca
    given: Adi
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  collection-title: Lecture notes in computer science
  container-title: "NASA formal methods: 12th international symposium,
    (NFM'20)"
  editor:
  - family: Lee
    given: Ritchie
  - family: Jha
    given: Susmit
  - family: Mavridou
    given: Anastasia
  id: GFM+20
  isbn: 978-3-030-55754-6
  issued:
  - year: 2020
    month: 5
  note: Moffet Field, California
  page: 85-93
  publisher: Springer
  title: Simplifying neural networks using formal verification
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/GFM+20.pdf"
- abstract: Symbolic model checking has become an important part of the
    verification flow in industrial hardware design. However, its use is
    still limited due to scaling issues. One way to address this is to
    exploit the large amounts of symmetry present in many real world
    designs. In this paper, we adapt partial order reduction for bounded
    model checking of synchronous hardware and introduce a novel
    technique that makes partial order reduction practical in this new
    domain. These approaches are largely automatic, requiring only
    minimal manual effort. We evaluate our technique on open-source and
    commercial packet mover circuits - designs containing FIFOs and
    arbiters.
  author:
  - family: Mann
    given: Makai
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 26<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'20)
  editor:
  - family: Biere
    given: Armin
  - family: Parker
    given: David
  id: MB20
  isbn: 978-3-030-45190-5
  issued:
  - year: 2020
    month: 4
  page: 367-386
  publisher: Springer
  title: Partial order reduction for deep bug finding in synchronous
    hardware
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MB20.pdf"
  volume: 12078
- abstract: The required manual effort and verification expertise are
    among the main hurdles for adopting formal verification in processor
    design flows. Developing a set of properties that fully covers all
    instruction behaviors is a laborious and challenging task. This
    paper proposes a highly automated and "complete" processor
    verification approach which requires considerably less manual effort
    and expertise compared to the state of the art. The proposed
    approach extends the S$^2$QED approach to cover both single and
    multiple instruction bugs and ensures that a design is completely
    verified according to a well-defined criterion. This makes the
    approach robust against human errors. The properties are simple and
    can be automatically generated from an ISA model with small manual
    effort. Furthermore, unlike in conventional property checking, the
    verification engineer does not need to explicitly specify the
    processor's behavior in different special scenarios, such as
    stalling, exception, or speculation, since these are taken care of
    implicitly by the proposed computational model. The great promise of
    the approach is shown by an industrial case study with a 5-stage
    RISC-V processor
  author:
  - family: Devarajegowda
    given: Keerthikumara
  - family: Fadiheh
    given: Mohammad Rahmani
  - family: Singh
    given: Eshan
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  - family: Ecker
    given: Wolfgang
  - family: Stoffel
    given: Dominik
  - family: Kunz
    given: Wolfgang
  container-title: Proceedings of the 2020 design, automation and test
    in europe (DATE'20)
  doi: 10.23919/DATE48585.2020.9116515
  id: DFS+20
  issued:
  - year: 2020
    month: 3
  note: Grenoble, France
  page: 526-531
  publisher: IEEE
  title: Gap-free processor verification by S$^2$QED and property
    generation
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/DFS+20.pdf"
- abstract: Coarse-grained reconfigurable architectures (CGRAs) are
    becoming popular accelerators for computationally intensive tasks.
    CGRAs offer the reconfigurability of an FPGA, but with larger
    configurable blocks which provide performance closer to ASICs. CGRAs
    can achieve very high compute density if the routing networks are
    restricted; however, mapping using traditional annealing-based
    approaches does not perform well for such architectures. This paper
    uses Satisfiability Modulo Theories (SMT) solvers to rapidly map
    designs onto arbitrary CGRA fabrics. This approach is sound,
    complete, and in many cases an order of magnitude faster than
    state-of-the-art constraint-based mapping techniques using integer
    linear programming (ILP). Additionally, we propose a functional
    duplication strategy that decreases pressure on the routing network
    from high-fanout operations, leading to significant performance
    improvements.
  author:
  - family: Donovick
    given: Caleb
  - family: Mann
    given: Makai
  - family: Barrett
    given: Clark
  - family: Hanrahan
    given: Pat
  container-title: Proceedings of the international conference on
    ReConFigurable computing and FPGAs (ReConFig '19)
  doi: 10.1109/ReConFig48160.2019.8994781
  editor:
  - family: Andrews
    given: David
  - family: Cumplido
    given: René
  - family: Feregrino
    given: Claudia
  - family: Platzner
    given: Marco
  id: DMB+19
  issued:
  - year: 2019
    month: 12
  note: Cancun, Mexico
  publisher: IEEE
  title: Agile SMT-based mapping for CGRAs with restricted routing
    networks
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/DMB+19.pdf"
- abstract: The Boolean Satisfiability (SAT) problem is the canonical
    NP-complete problem and is fundamental to computer science, with a
    wide array of applications in planning, verification, and theorem
    proving. Developing and evaluating practical SAT solvers relies on
    extensive empirical testing on a set of real-world benchmark
    formulas. However, the availability of such real-world SAT formulas
    is limited. While these benchmark formulas can be augmented with
    synthetically generated ones, existing approaches for doing so are
    heavily hand-crafted and fail to simultaneously capture a wide range
    of characteristics exhibited by real-world SAT instances. In this
    work, we present G2SAT, the first deep generative framework that
    learns to generate SAT formulas from a given set of input formulas.
    Our key insight is that SAT formulas can be transformed into latent
    bipartite graph representations which we model using a specialized
    deep generative neural network. We show that G2SAT can generate SAT
    formulas that closely resemble given real-world SAT instances, as
    measured by both graph metrics and SAT solver behavior. Further, we
    show that our synthetic SAT formulas could be used to improve SAT
    solver performance on real-world benchmarks, which opens up new
    opportunities for the continued development of SAT solvers and a
    deeper understanding of their performance.
  author:
  - family: You
    given: Jiaxuan
  - family: Wu
    given: Haoze
  - family: Barrett
    given: Clark
  - family: Ramanujan
    given: Raghuram
  - family: Leskovec
    given: Jure
  container-title: Advances in neural information processing systems 32
    (NeurIPS'19)
  editor:
  - family: Wallach
    given: H.
  - family: Larochelle
    given: H.
  - family: Beygelzimer
    given: A.
  - family: d'Alché-Buc
    given: F.
  - family: Fox
    given: E.
  - family: Garnett
    given: R.
  id: YWB+19
  issued:
  - year: 2019
    month: 12
  note: Vancouver, Canada
  page: 10552-10563
  publisher: Curran Associates, Inc.
  title: "G2SAT: Learning to generate SAT formulas"
  title-short: G2SAT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/YWB+19.pdf"
- abstract: As designs grow in size and complexity, design verification
    becomes one of the most difficult and costly tasks facing design
    teams. Formal verification techniques offer great promise because of
    their ability to exhaustively explore design behaviors. However,
    formal techniques also have a reputation for being labor-intensive
    and limited to small blocks. Is there any hope for successful
    application of formal techniques at design scale? We answer this
    question affirmatively by digging deeper to understand what the real
    technological issues and opportunities are. First, we look at
    satisfiability solvers, the engines underlying formal techniques
    such as model checking. Given the recent innovations in
    satisfiability solving, we argue that there are many reasons to be
    optimistic that formal techniques will scale to designs of practical
    interest. We use our CoSA model checker as a demonstration platform
    to illustrate how advances in solvers can improve scalability.
    However, even if solvers become blazingly fast, applying them well
    is still labor-intensive. This is because formal tools are only as
    useful as the properties they are given to prove, which
    traditionally have required great effort to develop. Symbolic quick
    error detection (SQED) addresses this issue by using a single,
    universal property that checks designs automatically. We demonstrate
    how SQED can automatically find logic bugs in a variety of designs
    and report on bugs found and efficiency gains realized in academic
    and industry designs. We also present a generator for an improved
    SQED module that further reduces the amount of manual effort that
    has to be spent by the designer.
  author:
  - family: Lonsing
    given: Florian
  - family: Ganesan
    given: Karthik
  - family: Mann
    given: Makai
  - family: Nuthakki
    given: Srinivasa Shashank
  - family: Singh
    given: Eshan
  - family: Srouji
    given: Mario
  - family: Yang
    given: Yahan
  - family: Mitra
    given: Subhasish
  - family: Barrett
    given: Clark
  container-title: Proceedings of the international conference on
    computer-aided design (ICCAD'19)
  doi: 10.1109/ICCAD45719.2019.8942096
  editor:
  - family: Pan
    given: David
  id: LGM+19
  issued:
  - year: 2019
    month: 11
  note: Westminster, Colorado
  publisher: IEEE
  title: "Unlocking the power of formal hardware verification with CoSA
    and symbolic QED: Invited paper"
  title-short: Unlocking the power of formal hardware verification with
    CoSA and symbolic QED
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/LGM+19.pdf"
- abstract: Detect and avoid (DAA) all other aircraft is a critical
    component to enable small unmanned aircraft system (sUAS) beyond
    visual line of sight (BVLOS) operations. Derived from the version of
    Airborne Collision Avoidance System X (ACAS X) for large UAS (ACAS
    Xu), a new member of the ACAS X family for sUAS (ACAS sXu) is being
    developed by the Federal Aviation Administration's (FAA's)
    Traffic-Alert and Collision Avoidance System (TCAS) Program Office.
    ACAS sXu is intended to provide both collision avoidance (CA) and
    remain well clear (RWC) capabilities with both vertical and
    horizontal advisories for the remote pilot in command (RPIC) and/or
    automated response system onboard the aircraft. ACAS sXu is
    envisioned to utilize a standard logic to serve sUASs with different
    equipages and operating in different airspace domains. The standard
    ACAS sXu logic may be hosted either in the embedded environment on
    board the sUAS vehicle or in a Cloud environment such as a UAS
    traffic management (UTM) Service Suppler (USS) platform. It may be
    integrated with surveillance sources such as Automatic Dependent
    Surveillance-Broadcast (ADS-B), the anticipated remote
    identification (remote ID) tracking, networked/shared telemetry,
    airborne surveillance radar, and ground based surveillance radar,
    for both cooperative and non-cooperative intruders. To demonstrate
    proof of concept, gather surveillance data, verify simulation
    environment, and characterize early logic performance, the FAA and
    industry partners integrated DAA systems featuring the ACAS sXu
    logic Version 0, in both embedded environments and a Cloud
    environment, and successfully conducted a week-long flight test in
    October 2018 at the New York UAS Test Site in Rome, NY. This paper
    presents the integration of the sUAS DAA on a miniaturized avionics
    platform and flight test with a fixed-wing sUAS platform.
  author:
  - family: Lopez
    given: J. G.
  - family: Ren
    given: L.
  - family: Meng
    given: B.
  - family: Fisher
    given: R.
  - family: Markham
    given: J.
  - family: Figard
    given: M.
  - family: Evans
    given: R.
  - family: Evans
    given: R.
  - family: Spoelhof
    given: R.
  - family: Rubenstahl
    given: M.
  - family: Edwards
    given: S.
  - family: Pedan
    given: I.
  - family: Barrett
    given: C.
  container-title: Proceedings of the 38<sup>th</sup> digital avionics systems
    conference (DASC'19)
  doi: 10.1109/DASC43569.2019.9081780
  id: LRM+19
  issued:
  - year: 2019
    month: 9
  title: Integration and flight test of small UAS detect and avoid on a
    miniaturized avionics platform
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/LRM+19.pdf"
- abstract: Many SMT solvers implement efficient SAT-based procedures
    for solving fixed-size bit-vector formulas. These approaches,
    however, cannot be used directly to reason about bit-vectors of
    symbolic bit-width. To address this shortcoming, we propose a
    translation from bit-vector formulas with parametric bit-width to
    formulas in a logic supported by SMT solvers that includes
    non-linear integer arithmetic, uninterpreted functions, and
    universal quantification. While this logic is undecidable, this
    approach can still solve many formulas by capitalizing on advances
    in SMT solving for non-linear arithmetic and universally quantified
    formulas. We provide several case studies in which we have applied
    this approach with promising results, including the bit-width
    independent verification of invertibility conditions, compiler
    optimizations, and bit-vector rewrites.
  author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on automated deduction (CADE'19)
  editor:
  - family: Fontaine
    given: Pascal
  id: NPR+19
  issued:
  - year: 2019
    month: 8
  note: Natal, Brazil
  page: 366-384
  publisher: Springer
  title: Towards bit-width-independent proofs in SMT solvers
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NPR+19.pdf"
  volume: 11716
- abstract: SMT solvers have throughout the years been able to cope with
    increasingly expressive formulas, from ground logics to full
    first-order logic (FOL). In contrast, the extension of SMT solvers
    to higher-order logic (HOL) is mostly unexplored. We propose a
    pragmatic extension for SMT solvers to support HOL reasoning
    natively without compromising performance on FOL reasoning, thus
    leveraging the extensive research and implementation efforts
    dedicated to efficient SMT solving. We show how to generalize data
    structures and the ground decision procedure to support partial
    applications and extensionality, as well as how to reconcile
    quantifier instantiation techniques with higher-order variables. We
    also discuss a separate approach for redesigning an HOL SMT solver
    from the ground up via new data structures and algorithms. We apply
    our pragmatic extension to the CVC4 SMT solver and discuss a
    redesign of the veriT SMT solver. Our evaluation shows they are
    competitive with state-of-the-art HOL provers and often outperform
    the traditional encoding into FOL.
  author:
  - family: Barbosa
    given: Haniel
  - family: Reynolds
    given: Andrew
  - family: Ouraoui
    given: Daniel El
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on automated deduction (CADE'19)
  editor:
  - family: Fontaine
    given: Pascal
  id: BREO+19
  issued:
  - year: 2019
    month: 8
  note: Natal, Brazil
  page: 35-54
  publisher: Springer
  title: Extending SMT solvers to higher-order logic
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BREO+19.pdf"
  volume: 11716
- abstract: The performance of modern Satisfiability Modulo Theories
    (SMT) solvers relies crucially on efficient decision procedures as
    well as static simplification techniques, which include large sets
    of rewrite rules. Manually discovering and implementing rewrite
    rules is challenging. In this work, we propose a framework that uses
    enumerative syntax-guided synthesis (SyGuS) to propose rewrite rules
    that are not implemented in a given SMT solver. We implement this
    framework in CVC4, a state-of-the-art SMT and SyGuS solver, and
    evaluate several use cases. We show that some SMT solvers miss
    rewriting opportunities, or worse, have bugs in their rewriters. We
    also show that a variation of our approach can be used to test the
    correctness of a rewriter. Finally, we show that rewrites discovered
    with this technique lead to significant improvements in CVC4 on both
    SMT and SyGuS problems over bit-vectors and strings.
  author:
  - family: Nötzli
    given: Andres
  - family: Reynolds
    given: Andrew
  - family: Barbosa
    given: Haniel
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on theory and applications of satisfiability testing (SAT'19)
  doi: 10.1007/978-3-030-24258-9_20
  editor:
  - family: Janota
    given: Mikolás̆
  - family: Lynce
    given: Inês
  id: NRB+19
  isbn: 978-3-030-24257-2
  issued:
  - year: 2019
    month: 7
  note: Lisbon, Portugal
  page: 279-297
  publisher: Springer
  title: Syntax-guided rewrite rule enumeration for SMT solvers
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NRB+19.pdf"
  volume: 11628
- abstract: Many state-of-the-art Satisfiability Modulo Theories (SMT)
    solvers for the theory of fixed-size bit-vectors employ an approach
    called bit-blasting, where a given formula is translated into a
    Boolean satisfiability (SAT) problem and delegated to a SAT solver.
    Consequently, producing bit-vector proofs in an SMT solver requires
    incorporating SAT proofs into its proof infrastructure. In this
    paper, we describe three approaches for integrating DRAT proofs
    generated by an off-the-shelf SAT solver into the proof
    infrastructure of the SMT solver CVC4 and explore their strengths
    and weaknesses. We implemented all three approaches using
    CryptoMiniSat as the SAT back-end for its bit-blasting engine and
    evaluated performance in terms of proof-production and
    proof-checking.
  author:
  - family: Ozdemir
    given: Alex
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on theory and applications of satisfiability testing (SAT'19)
  doi: 10.1007/978-3-030-24258-9_21
  editor:
  - family: Janota
    given: Mikolás̆
  - family: Lynce
    given: Inês
  id: ONP+19
  isbn: 978-3-030-24257-2
  issued:
  - year: 2019
    month: 7
  note: Lisbon, Portugal
  page: 298-305
  publisher: Springer
  title: DRAT-based bit-vector proofs in CVC4
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/ONP+19.pdf"
  volume: 11628
- abstract: Satisfiability Modulo Theories (SMT) solvers with support
    for the theory of strings have recently emerged as powerful tools
    for reasoning about string-manipulating programs. However, due to
    the complex semantics of extended string functions, it is
    challenging to develop scalable solvers for the string constraints
    produced by program analysis tools. We identify several classes of
    simplification techniques that are critical for the efficient
    processing of string constraints in SMT solvers. These techniques
    can reduce the size and complexity of input constraints by reasoning
    about arithmetic entailment, multisets, and string containment
    relationships over input terms. We provide experimental evidence
    that implementing them results in significant improvements over the
    performance of state-of-the-art SMT solvers for extended string
    constraints.
  author:
  - family: Reynolds
    given: Andrew
  - family: Nötzli
    given: Andres
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 31<sup>st</sup> international conference
    on computer aided verification (CAV'19)
  doi: 10.1007/978-3-030-25543-5_2
  editor:
  - family: Dillig
    given: Isil
  - family: Tasiran
    given: Serdar
  id: RNB+19
  isbn: 978-3-030-25542-8
  issued:
  - year: 2019
    month: 7
  note: New York, New York
  page: 23-42
  publisher: Springer International Publishing
  title: High-level abstractions for simplifying extended string
    constraints in SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RNB+19.pdf"
  volume: 11561
- abstract: We present CVC4SY, a syntax-guided synthesis (SyGuS) solver
    based on three bounded term enumeration strategies. The first
    encodes term enumeration as an extension of the quantifier-free
    theory of algebraic datatypes. The second is based on a highly
    optimized brute-force algorithm. The third combines elements of the
    others. Our implementation of the strategies within the
    satisfiability modulo theories (SMT) solver CVC4 and a heuristic to
    choose between them leads to significant improvements over
    state-of-the-art SyGuS solvers.
  author:
  - family: Reynolds
    given: Andrew
  - family: Barbosa
    given: Haniel
  - family: Nötzli
    given: Andres
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 31<sup>st</sup> international conference
    on computer aided verification (CAV'19)
  doi: 10.1007/978-3-030-25543-5_5
  editor:
  - family: Dillig
    given: Isil
  - family: Tasiran
    given: Serdar
  id: RBN+19
  isbn: 978-3-030-25542-8
  issued:
  - year: 2019
    month: 7
  note: New York, New York
  page: 74-83
  publisher: Springer International Publishing
  title: "CVC4SY: Smart and fast term enumeration for syntax-guided
    synthesis"
  title-short: CVC4SY
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RBN+19.pdf"
  volume: 11561
- abstract: Automated reasoning procedures are essential for a number of
    applications that involve bit-exact floating-point computations.
    This paper presents conditions that characterize when a variable in
    a floating-point constraint has a solution, which we call
    invertibility conditions. We describe a novel workflow that combines
    human interaction and a syntax-guided synthesis (SyGuS) solver that
    was used for discovering these conditions. We verify our conditions
    for several floating-point formats. One implication of this result
    is that a fragment of floating-point arithmetic admits compact
    quantifier elimination. We implement our invertibility conditions in
    a prototype extension of our solver CVC4, showing their usefulness
    for solving quantified constraints over floating-points.
  author:
  - family: Brain
    given: Martin
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 31<sup>st</sup> international conference
    on computer aided verification (CAV'19)
  doi: 10.1007/978-3-030-25543-5_8
  editor:
  - family: Dillig
    given: Isil
  - family: Tasiran
    given: Serdar
  id: BNP+19
  isbn: 978-3-030-25542-8
  issued:
  - year: 2019
    month: 7
  note: New York, New York
  page: 116-136
  publisher: Springer International Publishing
  title: Invertibility conditions for floating-point formulas
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BNP+19.pdf"
  volume: 11561
- abstract: Deep neural networks are revolutionizing the way complex
    systems are designed. Consequently, there is a pressing need for
    tools and techniques for network analysis and certification. To help
    in addressing that need, we present Marabou, a framework for
    verifying deep neural networks. Marabou is an SMT-based tool that
    can answer queries about a network's properties by transforming
    these queries into constraint satisfaction problems. It can
    accommodate networks with different activation functions and
    topologies, and it performs high-level reasoning on the network that
    can curtail the search space and improve performance. It also
    supports parallel execution to further enhance scalability. Marabou
    accepts multiple input formats, including protocol buffer files
    generated by the popular TensorFlow framework for neural networks.
    We describe the system architecture and main components, evaluate
    the technique and discuss ongoing work.
  author:
  - family: Katz
    given: Guy
  - family: Huang
    given: Derek A.
  - family: Ibeling
    given: Duligur
  - family: Julian
    given: Kyle
  - family: Lazarus
    given: Christopher
  - family: Lim
    given: Rachel
  - family: Shah
    given: Parth
  - family: Thakoor
    given: Shantanu
  - family: Wu
    given: Haoze
  - family: Zeljić
    given: Aleksandar
  - family: Dill
    given: David L.
  - family: Kochenderfer
    given: Mykel J.
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 31<sup>st</sup> international conference
    on computer aided verification (CAV'19)
  doi: 10.1007/978-3-030-25540-4_26
  editor:
  - family: Dillig
    given: Isil
  - family: Tasiran
    given: Serdar
  id: KHI+19
  isbn: 978-3-030-25539-8
  issued:
  - year: 2019
    month: 7
  note: New York, New York
  page: 443-452
  publisher: Springer International Publishing
  title: The marabou framework for verification and analysis of deep
    neural networks
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KHI+19.pdf"
  volume: 11561
- abstract: "Recent discovery of security attacks in advanced
    processors, known as Spectre and Meltdown, has resulted in high
    public alertness about security of hardware. The root cause of these
    attacks is information leakage across covert channels that reveal
    secret data without any explicit information flow between the secret
    and the attacker. Many sources believe that such covert channels are
    intrinsic to highly advanced processor architectures based on
    speculation and out-of-order execution, suggesting that such
    security risks can be avoided by staying away from highend
    processors. This paper, however, shows that the problem is of wider
    scope: we present new classes of covert channel attacks which are
    possible in average-complexity processors with in-order pipelining,
    as they are mainstream in applications ranging from
    Internet-of-Things to Autonomous Systems. We present a new approach
    as a foundation for remedy against covert channels: while all
    previous attacks were found by clever thinking of human attackers,
    this paper presents a formal method called Unique Program Execution
    Checking which detects and locates vulnerabilities to covert
    channels systematically, including those to covert channels unknown
    so far."
  author:
  - family: Fadiheh
    given: M. R.
  - family: Stoffel
    given: D.
  - family: Barrett
    given: C.
  - family: Mitra
    given: S.
  - family: Kunz
    given: W.
  container-title: Proceedings of the 2019 design, automation and test
    in europe (DATE'19)
  doi: 10.23919/DATE.2019.8715004
  id: FSB+19
  isbn: 978-3-9819263-2-3
  issued:
  - year: 2019
    month: 3
  note: Florence, Italy
  page: 994-999
  publisher: IEEE
  title: Processor hardware security vulnerabilities and their detection
    by unique program execution checking
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/FSB+19.pdf"
- abstract: "We present an industrial case study that demonstrates the
    practicality and effectiveness of Symbolic Quick Error Detection
    (Symbolic QED) in detecting logic design flaws (logic bugs) during
    pre-silicon verification. Our study focuses on several
    microcontroller core designs ( 1,800 flip-flops,  70,000 logic
    gates) that have been extensively verified using an industrial
    verification flow and used for various commercial automotive
    products. The results of our study are as follows: 1. Symbolic QED
    detected all logic bugs in the designs that were detected by the
    industrial verification flow (which includes various flavors of
    simulation-based verification and formal verification). 2. Symbolic
    QED detected additional logic bugs that were not recorded as
    detected by the industrial verification flow. (These additional bugs
    were also perhaps detected by the industrial verification flow.)
    3.Symbolic QED enables significant design productivity improvements:
    (a) 8X improved (i.e., reduced) verification effort for a new design
    (8 person-weeks for Symbolic QED vs. 17 person-months using the
    industrial verification flow). (b) 60X improved verification effort
    for subsequent designs (2 person-days for Symbolic QED vs. 4-7
    person-months using the industrial verification flow). (c) Quick bug
    detection (runtime of 20 seconds or less), together with short
    counterexamples (10 or fewer instructions) for quick debug, using
    Symbolic QED."
  author:
  - family: Singh
    given: E.
  - family: Devarajegowda
    given: K.
  - family: Simon
    given: S.
  - family: Schnieder
    given: R.
  - family: Ganesan
    given: K.
  - family: Fadiheh
    given: M.
  - family: Stoffel
    given: D.
  - family: Kunz
    given: W.
  - family: Barrett
    given: C.
  - family: Ecker
    given: W.
  - family: Mitra
    given: S.
  container-title: Proceedings of the 2019 design, automation and test
    in europe (DATE'19)
  doi: 10.23919/DATE.2019.8715271
  id: SDS+19
  isbn: 978-3-9819263-2-3
  issued:
  - year: 2019
    month: 3
  note: Florence, Italy
  page: 1000-1005
  publisher: IEEE
  title: "Symbolic QED pre-silicon verification for automotive
    microcontroller cores: Industrial case study"
  title-short: Symbolic QED pre-silicon verification for automotive
    microcontroller cores
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SDS+19.pdf"
- abstract: Symbolic model-checking is a well-established technique used
    in hardware design to assess, and formally verify, functional
    correctness. However, most modern model-checkers encode the problem
    into propositional satisfiability (SAT) and do not leverage any
    additional information beyond the input design, which is typically
    provided in a hardware description language such as Verilog. In this
    paper, we present CoSA (CoreIR Symbolic Analyzer), a model-checking
    tool for CoreIR designs. CoreIR is a new intermediate representation
    for hardware. CoSA encodes model-checking queries into first-order
    formulas that can be solved by Satisfiability Modulo Theories (SMT)
    solvers. In particular, it natively supports encodings using the
    theories of bitvectors and arrays. CoSA is closely integrated with
    CoreIR and can thus leverage CoreIR-generated metadata in addition
    to user-provided lemmas to assist with formal verification. CoSA
    supports multiple input formats and provides a broad set of analyses
    including equivalence checking and safety and liveness verification.
    CoSA is open-source and written in Python, making it easily
    extendable.
  author:
  - family: Mattarei
    given: Cristian
  - family: Mann
    given: Makai
  - family: Barrett
    given: Clark
  - family: Daly
    given: Ross G.
  - family: Huff
    given: Dillon
  - family: Hanrahan
    given: Pat
  container-title: Proceedings of the 18<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'18)
  doi: 10.23919/FMCAD.2018.8603014
  editor:
  - family: Bjørner
    given: Nikolaj
  - family: Gurfinkel
    given: Arie
  id: MMB+18
  isbn: 978-0-9835678-8-2
  issued:
  - year: 2018
    month: 10
  note: Austin, Texas
  page: 7-11
  publisher: FMCAD Inc.
  title: "CoSA: Integrated verification for agile hardware design"
  title-short: CoSA
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MMB+18.pdf"
- abstract: Deep neural networks have achieved impressive results in
    many complex applications, including classification tasks for image
    and speech recognition, pattern analysis or perception in
    self-driving vehicles. However, it has been observed that even
    highly trained networks are very vulnerable to adversarial
    perturbations. Adding minimal changes to inputs that are correctly
    classified can lead to wrong predictions, raising serious security
    and safety concerns. Existing techniques for checking robustness
    against such perturbations only consider searching locally around a
    few individual inputs, providing limited guarantees. We propose
    DeepSafe, a novel approach for automatically assessing the overall
    robustness of a neural network. DeepSafe applies clustering over
    known labeled data and leverages off-the-shelf constraint solvers to
    automatically identify and check safe regions in which the network
    is robust, i.e. all the inputs in the region are guaranteed to be
    classified correctly. We also introduce the concept of targeted
    robustness, which ensures that the neural network is guaranteed not
    to misclassify inputs within a region to a specific target
    (adversarial) label. We evaluate DeepSafe on a neural network
    implementation of a controller for the next-generation Airborne
    Collision Avoidance System for unmanned aircraft (ACAS Xu) and for
    the well known MNIST network. For these networks, DeepSafe
    identified many regions which were safe, and also found adversarial
    perturbations of interest.
  author:
  - family: Gopinath
    given: Divya
  - family: Katz
    given: Guy
  - family: Păsăreanu
    given: Corina S.
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 16<sup>th</sup> international symposium
    on automated technology for verification and analysis (ATVA'18)
  doi: 10.1007/978-3-030-01090-4_1
  editor:
  - family: Lahiri
    given: Shuvendu
  - family: Wang
    given: Chao
  id: GKP+18
  isbn: 978-3-030-01090-4
  issued:
  - year: 2018
    month: 10
  note: Los Angeles, California
  page: 3-19
  publisher: Springer
  title: "DeepSafe: A data-driven approach for assessing robustness of
    neural networks"
  title-short: DeepSafe
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/GKP+18.pdf"
  volume: 11138
- abstract: We introduce a new theory of algebraic datatypes where
    selector symbols can be shared between multiple constructors,
    thereby reducing the number of terms considered by current SMT-based
    solving approaches. We show that the satisfiability problem for the
    traditional theory of algebraic datatypes can be reduced to problems
    where selectors are mapped to shared symbols based on a
    transformation provided in this paper. The use of shared selectors
    addresses a key bottleneck for an SMT-based enumerative approach to
    the Syntax-Guided Synthesis (SyGuS) problem. Our experimental
    evaluation of an implementation of the new theory in the SMT solver
    cvc4 on syntax-guided synthesis and other domains provides evidence
    that the use of shared selectors improves state-of-the-art SMT-based
    approaches for constraints over algebraic datatypes.
  author:
  - family: Reynolds
    given: Andrew
  - family: Viswanathan
    given: Arjun
  - family: Barbosa
    given: Haniel
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 9<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'18)
  doi: 10.1007/978-3-319-94205-6_39
  editor:
  - family: Galmiche
    given: Didier
  - family: Schulz
    given: Stephan
  - family: Sebastiani
    given: Roberto
  id: RVB+18
  isbn: 978-3-319-94205-6
  issued:
  - year: 2018
    month: 6
  note: Oxford, United Kingdom
  page: 591-608
  publisher: Springer International Publishing
  title: Datatypes with shared selectors
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RVB+18.pdf"
  volume: 10900
- abstract: We present a novel approach for solving quantified
    bit-vector formulas in Satisfiability Modulo Theories (SMT) based on
    computing symbolic inverses of bit-vector operators. We derive
    conditions that precisely characterize when bit-vector constraints
    are invertible for a representative set of bit-vector operators
    commonly supported by SMT solvers. We utilize syntax-guided
    synthesis techniques to aid in establishing these conditions and
    verify them independently by using several SMT solvers. We show that
    invertibility conditions can be embedded into quantifier
    instantiations using Hilbert choice expressions, and give
    experimental evidence that a counterexample-guided approach for
    quantifier instantiation utilizing these techniques leads to
    performance improvements with respect to state-of-the-art solvers
    for quantified bit-vector constraints.
  author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 30<sup>th</sup> international conference
    on computer aided verification (CAV'18)
  doi: 10.1007/978-3-319-96142-2_16
  editor:
  - family: Chockler
    given: Hana
  - family: Weissenbacher
    given: Georg
  id: NPR+18
  isbn: 978-3-319-96142-2
  issued:
  - year: 2018
    month: 7
  note: Oxford, United Kingdom
  page: 236-255
  publisher: Springer
  title: Solving quantified bit-vectors using invertibility conditions
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NPR+18.pdf"
  volume: 10982
- abstract: Driven by the demand for highly customizable processor cores
    for IoT and related applications, there is a renewed interest in
    effective but low-cost techniques for verifying systems-on-chip
    (SoCs). This paper revisits the problem of processor verification
    and presents a radically different approach when compared to the
    state of the art. The proposed approach is highly automated and
    leverages recent progress in the field of post-silicon validation by
    the method of Quick Error Detection (QED) and Symbolic Quick Error
    Detection (SQED). In this paper, we modify SQED by incorporating a
    symbolic initial state in its BMC-based analysis and generalize the
    approach into the S$^2$QED method. As a first advantage, S$^2$QED
    can separate logic bugs from electrical bugs in QED-based
    postsilicon validation. Secondly, it also makes a strong
    contribution to pre-silicon verification by proving that the
    execution of each instruction is independent of its context in the
    program. The manual efforts for the proposed approach are orders of
    magnitude smaller than for conventional property checking. Our
    experimental results demonstrate the potential of S$^2$QED using the
    Aquarius open-source processor example.
  author:
  - family: Fadiheh
    given: M. R.
  - family: Urdahl
    given: J.
  - family: Nuthakki
    given: S. S.
  - family: Mitra
    given: S.
  - family: Barrett
    given: C.
  - family: Stoffel
    given: D.
  - family: Kunz
    given: W.
  container-title: Proceedings of the 2018 design, automation and test
    in europe (DATE'18)
  doi: 10.23919/DATE.2018.8341979
  id: FUN+18
  isbn: 978-3-9819263-0-9
  issued:
  - year: 2018
    month: 3
  note: Dresden, Germany
  page: 55-60
  publisher: IEEE
  title: Symbolic quick error detection using symbolic initial state for
    pre-silicon verification
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/FUN+18.pdf"
- abstract: With the rise of programmable network switches, network
    infrastructure is becoming more flexible and more capable than ever
    before. Programming languages such as P4 lower the barrier for
    changing the inner workings of network switches and offer a uniform
    experience across different devices. How- ever, this programmability
    also brings the risk of introducing hard-to-catch bugs at a level
    that was previously covered by well-tested devices with a fixed set
    of capabilities. Subtle discrepancies between different
    implementations pose a risk of introducing bugs at a layer that is
    opaque to the user. To reap the benefit of programmable hardware and
    keep--or improve upon--the reliability of traditional approaches,
    new tools are needed. In this work, we present p4pktgen, a tool for
    automatically generating test cases for P4 programs using symbolic
    execution. These test cases can be used to validate that P4 programs
    act as intended on a device.
  author:
  - family: Nötzli
    given: Andres
  - family: Khan
    given: Jehandad
  - family: Fingerhut
    given: Andy
  - family: Barrett
    given: Clark
  - family: Athanas
    given: Peter
  container-title: Proceedings of the ACM symposium on SDN research
    (SOSR'18)
  doi: 10.1145/3185467.3185497
  id: NKF+18
  isbn: 978-1-4503-5664-0
  issued:
  - year: 2018
    month: 3
  note: Los Angeles, California
  page: "5:1-5:7"
  publisher: ACM
  title: "p4pktgen: Automated test case generation for P4 programs"
  title-short: p4pktgen
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/NKF+18.pdf"
- abstract: Nearly all web-based interfaces are written in JavaScript.
    Given its prevalence, the support for high performance JavaScript
    code is crucial. The ECMA Technical Committee 39 (TC39) has recently
    extended the ECMAScript language (i.e., JavaScript) to support
    shared memory accesses between different threads. The extension is
    given in terms of a natural language memory model specification. In
    this paper we describe a formal approach for validating both the
    memory model and its implementations in various JavaScript engines.
    We first introduce a formal version of the memory model and report
    results on checking the model for consistency and other properties.
    We then introduce our tool, EMME, built on top of the Alloy
    analyzer, which leverages the model to generate all possible valid
    executions of a given JavaScript program. Finally, we report results
    using EMME together with small test programs to analyze industrial
    JavaScript engines. We show that EMME can find bugs as well as
    missed opportunities for optimization.
  author:
  - family: Mattarei
    given: Cristian
  - family: Barrett
    given: Clark
  - family: Guo
    given: Shu-yu
  - family: Nelson
    given: Bradley
  - family: Smith
    given: Ben
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 24<sup>th</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'18)
  doi: 10.1007/978-3-319-89963-3_4
  editor:
  - family: Beyer
    given: Dirk
  - family: Huisman
    given: Marieke
  id: MBG+18
  isbn: 978-3-319-89963-3
  issued:
  - year: 2018
    month: 4
  note: Thessaloniki, Greece.
  award: Distinguished Artifact Award
  page: 55-71
  publisher: Springer
  title: "EMME: A formal tool for ECMAScript memory model evaluation"
  title-short: EMME
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MBG+18.pdf"
  volume: 10806
- abstract: Satisfiability Modulo Theories (SMT) solvers have been
    developed to natively support a wide range of theories, including
    linear arithmetic, bit-vectors, strings, algebraic datatypes and
    finite sets. They handle constraints in these theories using
    specialized theory solvers. In this paper, we overview the design of
    these solvers, specifically focusing on theories whose function
    symbols are partitioned into a base signature and an extended
    signature. We introduce generic techniques that can be used in
    solvers for extended theories, including a new context-dependent
    simplification technique and model-based refinement techniques. We
    provide case studies showing our techniques can be leveraged for
    reasoning in an extended theory of strings, for bit-vector
    approaches that rely on lazy bit-blasting and for new approaches to
    non-linear arithmetic.
  author:
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 11<sup>th</sup> international symposium
    on frontiers of combining systems (FroCoS'17)
  editor:
  - family: Dixon
    given: Clare
  - family: Finger
    given: Marcelo
  id: RTJ+17
  issued:
  - year: 2017
    month: 9
  note: Brasilia, Brazil
  page: 22-40
  publisher: Springer
  title: Designing theory solvers with extensions
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RTJ+17.pdf"
  volume: 10483
- abstract: Relational logic is useful for reasoning about computational
    problems with relational structures, including high-level system
    design, architectural con- figurations of network systems,
    ontologies, and verification of programs with linked data
    structures. We present a modular extension of an earlier calculus
    for the theory of finite sets to a theory of finite relations with
    such operations as transpose, product, join, and transitive closure.
    We implement this extension as a theory solver of the SMT solver
    CVC4. Combining this new solver with the finite model finding
    features of CVC4 enables several compelling use cases. For instance,
    native support for relations enables a natural mapping from Alloy, a
    declarative modeling language based on first-order relational logic,
    to SMT constraints. It also enables a natural encoding of several
    description logics with concrete domains, allowing the use of an SMT
    solver to analyze, for instance, Web Ontology Language (OWL) models.
    We provide an initial evaluation of our solver on a number of Alloy
    and OWL models which shows promising results.
  author:
  - family: Meng
    given: Baoluo
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 26<sup>th</sup> international conference
    on automated deduction (CADE'17)
  editor:
  - dropping-particle: de
    family: Moura
    given: Leonardo
  id: MRT+17
  issued:
  - year: 2017
    month: 8
  note: Gothenburg, Sweden
  page: 148-165
  publisher: Springer
  title: Relational constraint solving in SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MRT+17.pdf"
  volume: 10395
- abstract: Deep neural networks have emerged as a widely used and
    effective means for tackling complex, real-world problems. However,
    a major obstacle in applying them to safety-critical systems is the
    great difficulty in providing formal guarantees about their
    behavior. We present a novel, scalable, and efficient technique for
    verifying properties of deep neural networks (or providing
    counter-examples). The technique is based on the simplex method,
    extended to handle the non-convex Rectified Linear Unit (ReLU )
    activation function, which is a crucial ingredient in many modern
    neural networks. The verification procedure tackles neural networks
    as a whole, without making any simplifying assumptions. We evaluated
    our technique on a prototype deep neural network implementation of
    the next-generation airborne collision avoidance system for unmanned
    aircraft (ACAS Xu). Results show that our technique can successfully
    prove properties of networks that are an order of magnitude larger
    than the largest networks verified using existing methods.
  author:
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Dill
    given: David L.
  - family: Julian
    given: Kyle
  - family: Kochenderfer
    given: Mykel J.
  collection-number: 1
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 29<sup>th</sup> international conference
    on computer aided verification (CAV'17)
  editor:
  - family: Majumdar
    given: Rupak
  - family: Kuncak
    given: Viktor
  id: KBD+17
  issued:
  - year: 2017
    month: 7
  note: Heidelberg, Germany
  page: 97-117
  publisher: Springer
  title: "Reluplex: An efficient SMT solver for verifying deep neural
    networks"
  title-short: Reluplex
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KBD+17.pdf"
  volume: 10426
- abstract: "During post-silicon validation, manufactured integrated
    circuits are extensively tested in actual system environments to
    detect design bugs. Bug localization involves identification of a
    bug trace (a sequence of inputs that activates and detects the bug)
    and a hardware design block where the bug is located. Existing bug
    localization practices during post-silicon validation are mostly
    manual and ad hoc, and, hence, extremely expensive and time
    consuming. This is particularly true for subtle electrical bugs
    caused by unexpected interactions between a design and its
    electrical state. We present E-QED, a new approach that
    automatically localizes electrical bugs during post-silicon
    validation. Our results on the OpenSPARC T2, an open-source
    500-million-transistor multicore chip design, demonstrate the
    effectiveness and practicality of E-QED: starting with a failed
    post-silicon test, in a few hours (9 hours on average) we can
    automatically narrow the location of the bug to (the fan-in logic
    cone of) a handful of candidate flip-flops (18 flip-flops on average
    for a design with   1 Million flip-flops) and also obtain the
    corresponding bug trace. The area impact of E-QED is  2.5%. In
    contrast, determining this same information might take weeks (or
    even months) of mostly manual work using traditional approaches."
  author:
  - family: Singh
    given: Eshan
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  collection-number: 1
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 29<sup>th</sup> international conference
    on computer aided verification (CAV'17)
  editor:
  - family: Majumdar
    given: Rupak
  - family: Kuncak
    given: Viktor
  id: SBM17
  issued:
  - year: 2017
    month: 7
  note: Heidelberg, Germany
  page: 104-125
  publisher: Springer
  title: "E-QED: Electrical bug localization during post-silicon
    validation enabled by quick error detection and formal methods"
  title-short: E-QED
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SBM17.pdf"
  volume: 10426
- abstract: This paper describes SMTCoq, a plug-in for the integration
    of external solvers into the Coq proof assistant. Based on a checker
    for generic first-order proof certificates fully implemented and
    proved correct in Coq, SMTCoq offers facilities to check answers
    from external SAT and SMT solvers and to increase Coq's automation
    using such solvers, all in a safe way. The current version supports
    proof certificates produced by the SAT solver ZChaff, for
    propositional logic, and the SMT solvers veriT and CVC4, for the
    quantifier-free fragment of the combined theory of fixed-size bit
    vectors, functional arrays with extensionality, linear integer
    arithmetic, and uninterpreted function symbols.
  author:
  - family: Ekici
    given: Burak
  - family: Mebsout
    given: Alain
  - family: Tinelli
    given: Cesare
  - family: Keller
    given: Chantal
  - family: Katz
    given: Guy
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  collection-number: 1
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 29<sup>th</sup> international conference
    on computer aided verification (CAV'17)
  editor:
  - family: Majumdar
    given: Rupak
  - family: Kuncak
    given: Viktor
  id: EMT+17
  issued:
  - year: 2017
    month: 7
  note: Heidelberg, Germany
  page: 126-136
  publisher: Springer
  title: "SMTCoq: A plug-in for integrating SMT solvers into Coq"
  title-short: SMTCoq
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/EMT+17.pdf"
  volume: 10426
- abstract: Efficient reasoning about strings is essential to a growing
    number of security and verification applications. We describe
    satisfiability checking techniques in an extended theory of strings
    that includes operators commonly occurring in these applications,
    such as contains, index of and replace. We introduce a novel
    context-dependent simplification technique that improves the
    scalability of string solvers on challenging constraints coming from
    real-world problems. Our evaluation shows that an implementation of
    these techniques in the SMT solver CVC4 significantly outperforms
    state-of-the-art string solvers on benchmarks generated using PyEx,
    a symbolic execution engine for Python programs. Using a test suite
    sampled from four popular Python packages, we show that PyEx uses
    only 41% of the runtime when coupled with CVC4 than when coupled
    with CVC4's closest competitor while achieving comparable program
    coverage.
  author:
  - family: Reynolds
    given: Andrew
  - family: Woo
    given: Maverick
  - family: Barrett
    given: Clark
  - family: Brumley
    given: David
  - family: Liang
    given: Tianyi
  - family: Tinelli
    given: Cesare
  collection-number: 1
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 29<sup>th</sup> international conference
    on computer aided verification (CAV'17)
  editor:
  - family: Majumdar
    given: Rupak
  - family: Kuncak
    given: Viktor
  id: RWB+17
  issued:
  - year: 2017
    month: 7
  note: Heidelberg, Germany
  page: 453-474
  publisher: Springer
  title: Scaling up DPLL(T) string solvers using context-dependent
    simplification
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RWB+17.pdf"
  volume: 10426
- abstract: Scalability is a key challenge in static analysis. For
    imperative languages like C, the approach taken for modeling memory
    can play a significant role in scalability. In this paper, we
    explore a family of memory models called partitioned memory models
    which divide memory up based on the results of a points-to analysis.
    We review Steensgaard's original and field-sensitive points-to
    analyses as well as Data Structure Analysis (DSA), and introduce a
    new cell-based points-to analysis which more precisely handles heap
    data structures and type-unsafe operations like pointer arithmetic
    and pointer casting. We give experimental results on benchmarks from
    the software verification competition using the program verification
    framework in Cascade. We show that a partitioned memory model using
    our cell-based points-to analysis outperforms models using other
    analyses.
  author:
  - family: Wang
    given: Wei
  - family: Barrett
    given: Clark
  - family: Wies
    given: Thomas
  container-title: Proceedings of the 18<sup>th</sup> international conference
    on verification, model checking, and abstract interpretion (VMCAI
    '17)
  doi: 10.1007/978-3-319-52234-0_29
  editor:
  - family: Bouajjani
    given: Ahmed
  - family: Monniaux
    given: David
  id: WBW17
  isbn: 978-3-319-52234-0
  issued:
  - year: 2017
    month: 1
  note: Paris, France
  page: 539-558
  publisher: Springer International Publishing
  title: Partitioned memory models for program analysis
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/WBW17.pdf"
- abstract: With the integration of SMT solvers into analysis frameworks
    aimed at ensuring a system's end-to-end correctness, having a high
    level of confidence in these solvers' results has become crucial.
    For unsatisfiable queries, a reasonable approach is to have the
    solver return an independently checkable proof of unsatisfiability.
    We propose a lazy, extensible and robust method for enhancing
    DPLL(T)-style SMT solvers with proof-generation capabilities. Our
    method maintains separate Boolean-level and theory-level proofs, and
    weaves them together into one coherent artifact. Each
    theory-specific solver is called upon lazily, a posteriori, to prove
    precisely those solution steps it is responsible for and that are
    needed for the final proof. We present an implementation of our
    technique in the CVC4 SMT solver. CVC4 can produce unsatisfiability
    proofs for quantifier-free queries involving uninterpreted
    functions, arrays, bitvectors and combinations thereof. We discuss
    an evaluation of our tool using industrial benchmarks and benchmarks
    from the SMT-LIB library, which shows promising results.
  author:
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  - family: Reynolds
    given: Andrew
  - family: Hadarean
    given: Liana
  container-title: Proceedings of the 16<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'16)
  editor:
  - family: Piskac
    given: Ruzica
  - family: Talupur
    given: Muralidhar
  id: KBT+16
  issued:
  - year: 2016
    month: 10
  note: Mountain View, California.
  award: Best Paper Award
  page: 93-100
  publisher: FMCAD Inc.
  title: Lazy proofs for DPLL(T)-based SMT solvers
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KBT+16.pdf"
- abstract: We consider the problem of deciding the theory of finite
    sets with cardinality constraints in a satisfiability modulo
    theories solver. Sets are a common high-level data structure used in
    programming; thus, such a theory is useful for modeling program
    constructs directly. More importantly, sets are a basic construct of
    mathematics and thus natural to use when mathematically defining the
    properties of a computer system. We develop a calculus consisting of
    a modular combination of a procedure for reasoning about membership
    constraints and a procedure for reasoning about cardinality
    constraints. The reasoning for cardinality involves tracking how
    different sets overlap. For efficiency, we avoid considering Venn
    regions directly, which has been the approach in earlier work.
    Instead, we develop a novel technique wherein potentially
    overlapping regions are considered incrementally. We use a graph to
    track the interaction of the different regions. Early experimental
    results demonstrate that the new technique is competitive with
    previous techniques and scales much better on certain classes of
    problems.
  author:
  - family: Bansal
    given: Kshitij
  - family: Reynolds
    given: Andrew
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 8<sup>th</sup> international joint
    conference on automated reasoning (IJCAR'16)
  doi: 10.1007/978-3-319-40229-1_7
  editor:
  - family: Olivetti
    given: Nicola
  - family: Tiwari
    given: Ashish
  id: BRBT16
  isbn: 978-3-319-40229-1
  issued:
  - year: 2016
    month: 6
  note: Coimbra, Portugal
  page: 82-98
  publisher: Springer International Publishing
  title: A new decision procedure for finite sets and cardinality
    constraints in SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BRBT16.pdf"
  volume: 9706
- abstract: Many high-level verification tools rely on SMT solvers to
    efficiently discharge complex verification conditions. Some
    applications require more than just a yes/no answer from the solver.
    For satisfiable quantifier-free problems, a satisfying assignment is
    a natural artifact. In the unsatisfiable case, an externally
    checkable proof can serve as a certificate of correctness and can be
    mined to gain additional insight into the problem. We present a
    method of encoding and checking SMT-generated proofs for the
    quantifier-free theory of fixed-width bitvectors. Proof generation
    and checking for this theory poses several challenges, especially
    for proofs based on reductions to propositional logic. Such
    reductions can result in large resolution subproofs in addition to
    requiring a proof that the reduction itself is correct. We describe
    a fine-grained proof system formalized in the LFSC framework that
    addresses some of these challenges with the use of computational
    side-conditions. We report results using a proof-producing version
    of the CVC4 SMT solver on unsatisfiable quantifier-free bit-vector
    benchmarks from the SMT-LIB benchmark library.
  author:
  - family: Hadarean
    given: Liana
  - family: Barrett
    given: Clark
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Deters
    given: Morgan
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 20<sup>th</sup> international conference
    on logic for programming, artificial intelligence, and reasoning
    (LPAR'15)
  editor:
  - family: Davis
    given: Martin
  - family: Fehnker
    given: Ansgar
  - family: McIver
    given: Annabelle
  - family: Voronkov
    given: Andrei
  id: HBR+15
  issued:
  - year: 2015
    month: 11
  note: Suva, Fiji
  page: 340-355
  publisher: Springer
  title: Fine-grained SMT proofs for the theory of fixed-width
    bit-vectors
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/HBR+.pdf"
  volume: 9450
- abstract: "During post-silicon validation and debug, manufactured
    integrated circuits (ICs) are tested in actual system environments
    to detect and fix design flaws (bugs). Existing postsilicon
    validation and debug techniques are mostly ad hoc and often involve
    manual steps. Such ad hoc approaches cannot scale with increasing IC
    complexity. We present Symbolic Quick Error Detection (Symbolic
    QED), a structured approach to post-silicon validation and debug.
    Symbolic QED combines the following steps in a coordinated
    fashion: 1. Quick Error Detection (QED) tests that quickly detect
    bugs with short error detection latencies and high coverage. 2.
    Formal analysis techniques to localize bugs and generate
    minimal-length bug traces upon detection of the corresponding bugs.
    We demonstrate the practicality and effectiveness of Symbolic QED
    using the OpenSPARC T2, a 500-million-transistor open-source
    multicore System-on-Chip (SoC) design, and using \"difficult\" logic
    bug scenarios that occurred in various state-of-the-art commercial
    multicore SoCs. Our results show that Symbolic QED: (i) is fully
    automatic (unlike manual techniques in use today that can be
    extremely time-consuming and expensive); (ii) requires only a few
    hours in contrast to manual approaches that might take days (or even
    months) or formal techniques that often take days or fail completely
    for large designs; (iii) generates counter-examples (for activating
    and detecting logic bugs) that are up to 6 orders of magnitude
    shorter than those produced by traditional techniques; and, (iv)
    does not require any additional hardware."
  author:
  - family: Lin
    given: David
  - family: Singh
    given: Eshan
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  container-title: Proceedings of the 42<sup>nd</sup> international test
    conference (ITC'15)
  id: LSB+15
  issued:
  - year: 2015
    month: 10
  note: Anaheim, California.
  award: Best Paper Award
  page: 1-10
  publisher: IEEE
  title: A structured approach to post-silicon validation and debug
    using symbolic quick error detection
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/LSB+.pdf"
- abstract: We present a method for the automatic compositional
    verification of certain classes of concurrent programs. Our approach
    is based on the casting of the model checking problem into a theory
    of transition systems within CVC4, a DPLL(T) based SMT solver. Our
    transition system theory then cooperates with other theories
    supported by the solver (e.g., arithmetic, arrays), which can help
    accelerate the verification process. More specifically, our theory
    solver looks for known patterns within the input programs and uses
    them to generate lemmas in the languages of other theories. When
    applicable, these lemmas can often steer the search away from safe
    parts of the search space, reducing the number of states to be
    explored and expediting the model checking procedure. We demonstrate
    the potential of our technique on a number of broad classes of
    programs.
  author:
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Harel
    given: David
  container-title: Proceedings of the 15<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'15)
  id: KBH15
  issued:
  - year: 2015
    month: 9
  note: Austin, Texas
  page: 81-88
  publisher: FMCAD Inc.
  title: Theory-aided model checking of concurrent transition systems
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KBH15.pdf"
- abstract: We prove that the quantifier-free fragment of the theory of
    character strings with regular language membership constraints and
    linear integer constraints over string lengths is decidable. We do
    that by describing a sound, complete and terminating tableaux
    calculus for that fragment which uses as oracles a decision
    procedure for linear integer arithmetic and a number of computable
    functions over regular expressions. A distinguishing feature of this
    calculus is that it provides a completely algebraic method for
    solving membership constraints which can be easily integrated into
    multi-theory SMT solvers. Another is that it can be used to generate
    symbolic solutions for such constraints, that is, solved forms that
    provide simple and compact representations of entire sets of
    complete solutions. The calculus is part of a larger one providing
    the theoretical foundations of a high performance theory solver for
    string constraints implemented in the SMT solver CVC4.
  author:
  - family: Liang
    given: Tianyi
  - family: Tsiskaridze
    given: Nestan
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 10<sup>th</sup> international symposium
    on frontiers of combining systems (FroCoS'15)
  doi: 10.1007/978-3-319-24246-0_9
  editor:
  - family: Lutz
    given: Carsten
  - family: Ranise
    given: Silvio
  id: LTR+15
  issued:
  - year: 2015
    month: 9
  note: Wroclaw, Poland
  page: 135-150
  publisher: Springer
  title: A decision procedure for regular membership and length
    constraints over unbounded strings
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/LTR+15.pdf"
  volume: 9322
- abstract: We introduce the first program synthesis engine implemented
    inside an SMT solver. We present an approach that extracts solution
    functions from unsatisfiability proofs of the negated form of
    synthesis conjectures. We also discuss novel counterexample-guided
    techniques for quantifier instantiation that we use to make finding
    such proofs practically feasible. A particularly important class of
    specifications are single-invocation properties, for which we
    present a dedicated algorithm. To support syntax restrictions on
    generated solutions, our approach can transform a solution found
    without restrictions into the desired syntactic form. As an
    alternative, we show how to use evaluation function axioms to embed
    syntactic restrictions into constraints over algebraic datatypes,
    and then use an algebraic datatype decision procedure to drive
    synthesis. Our experimental evaluation on syntax-guided synthesis
    benchmarks shows that our implementation in the CVC4 SMT solver is
    competitive with state-of-the-art tools for synthesis.
  author:
  - family: Reynolds
    given: Andrew
  - family: Deters
    given: Morgan
  - family: Kuncak
    given: Viktor
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-number: 2
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on computer aided verification (CAV'15)
  editor:
  - family: Kroening
    given: Daniel
  - family: Păsăreanu
    given: Corina S.
  id: RDK+15
  issued:
  - year: 2015
    month: 7
  note: San Francisco, California
  page: 198-216
  publisher: Springer
  title: Counterexample guided quantifier instantiation for synthesis in
    SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RDK+15.pdf"
  volume: 9206
- abstract: Satisfiability Modulo Theories (SMT) solvers incorporate
    decision procedures for theories of data types that commonly occur
    in software. This makes them important tools for automating
    verification problems. A limitation frequently encountered is that
    verification problems are often not fully expressible in the
    theories supported natively by the solvers. Many solvers allow the
    specification of application-specific theories as quantified axioms,
    but their handling is incomplete outside of narrow special cases. In
    this work, we show how SMT solvers can be used to obtain complete
    decision procedures for local theory extensions, an important class
    of theories that are decidable using finite instantiation of axioms.
    We present an algorithm that uses E-matching to generate instances
    incrementally during the search, significantly reducing the number
    of generated instances compared to eager instantiation strategies.
    We have used two SMT solvers to implement this algorithm and
    conducted an extensive experimental evaluation on benchmarks derived
    from verification conditions for heap-manipulating programs. We
    believe that our results are of interest to both the users of SMT
    solvers as well as their developers.
  author:
  - family: Bansal
    given: Kshitij
  - family: Reynolds
    given: Andrew
  - family: King
    given: Tim
  - family: Barrett
    given: Clark
  - family: Wies
    given: Thomas
  collection-number: 2
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 27<sup>th</sup> international conference
    on computer aided verification (CAV'15)
  editor:
  - family: Kroening
    given: Daniel
  - family: Păsăreanu
    given: Corina S.
  id: BRK+15
  issued:
  - year: 2015
    month: 7
  note: San Francisco, California
  page: 87-105
  publisher: Springer
  title: Deciding local theory extensions via E-matching
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BRK+15.pdf"
  volume: 9206
- abstract: Cascade is a static program analysis tool developed at New
    York University. It uses bounded model checking to generate
    verification conditions and checks them using an SMT solver which
    either produces a proof of correctness or gives a concrete trace
    showing how an assertion can fail. It supports the majority of
    standard C features except for floating point. A distinguishing
    feature of Cascade is that its analysis uses a memory model which
    divides up memory into several partitions based on alias
    information.
  author:
  - family: Wang
    given: Wei
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 21<sup>st</sup> international conference
    on tools and algorithms for the construction and analysis of systems
    (TACAS'15)
  editor:
  - family: Baier
    given: Christel
  - family: Tinelli
    given: Cesare
  id: WB15
  issued:
  - year: 2015
    month: 4
  note: London, United Kingdom
  page: 420-422
  publisher: Springer
  title: Cascade (competition contribution)
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/WB15.pdf"
  volume: 9035
- abstract: SMT solvers combine SAT reasoning with specialized theory
    solvers to either find a feasible solution to a set of constraints
    or prove that no such solution exists. Linear programming (LP)
    solvers come from the tradition of optimization, and are designed to
    find feasible solutions that are optimal with respect to some
    optimization function. Typical LP solvers are designed to solve
    large systems quickly using floating point arithmetic. Because
    floating point arithmetic is inexact, rounding errors can lead to
    incorrect results, making inexact solvers inappropriate for direct
    use in theorem proving. Previous efforts to leverage such solvers in
    the context of SMT have concluded that in addition to being
    potentially unsound, such solvers are too heavyweight to compete in
    the context of SMT. In this paper, we describe a technique for
    integrating LP solvers that dramatically improves the performance of
    SMT solvers without compromising correctness. These techniques have
    been implemented using the SMT solver CVC4 and the LP solver GLPK.
    Experiments show that this implementation outperforms other
    state-of-the-art SMT solvers on the QF_LRA SMT-LIB benchmarks and is
    competitive on the QF_LIA benchmarks.
  author:
  - family: King
    given: Tim
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Proceedings of the 14<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'14)
  id: KBT14
  issued:
  - year: 2014
    month: 10
  note: Lausanne, Switzerland
  page: 139-146
  publisher: FMCAD Inc.
  title: Leveraging linear and mixed integer programming for SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KBT14.pdf"
- abstract: The standard method for deciding bit-vector constraints is
    via eager reduction to propositional logic. This is usually done
    after first applying powerful rewrite techniques. While often
    efficient in practice, this method does not scale on problems for
    which top-level rewrites cannot reduce the problem size
    sufficiently. A lazy solver can target such problems by doing many
    satisfiability checks, each of which only reasons about a small
    subset of the problem. In addition, the lazy approach enables a wide
    range of optimization techniques that are not available to the eager
    approach. In this paper we describe the architecture and features of
    our lazy solver (LBV). We provide a comparative analysis of the
    eager and lazy approaches, and show how they are complementary in
    terms of the types of problems they can efficiently solve. For this
    reason, we propose a portfolio approach that runs a lazy and eager
    solver in parallel. Our empirical evaluation shows that the lazy
    solver can solve problems none of the eager solvers can and that the
    portfolio solver outperforms other solvers both in terms of total
    number of problems solved and the time taken to solve them.
  author:
  - family: Hadarean
    given: Liana
  - family: Barrett
    given: Clark
  - family: Jovanović
    given: Dejan
  - family: Tinelli
    given: Cesare
  - family: Bansal
    given: Kshitij
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 26<sup>th</sup> international conference
    on computer aided verification (CAV'14)
  editor:
  - family: Biere
    given: Armin
  - family: Bloem
    given: Roderick
  id: HBJ+14
  issued:
  - year: 2014
    month: 7
  note: Vienna, Austria
  page: 680-695
  publisher: Springer
  title: "A tale of two solvers: Eager and lazy approaches to
    bit-vectors"
  title-short: A tale of two solvers
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/HBJ+14.pdf"
  volume: 8559
- abstract: An increasing number of applications in verification and
    security rely on or could benefit from automatic solvers that can
    check the satisfiability of constraints over a rich set of data
    types that includes character strings. Unfortunately, most string
    solvers today are standalone tools that can reason only about (some
    fragment) of the theory of strings and regular expressions,
    sometimes with strong restrictions on the expressiveness of their
    input language. These solvers are based on reductions to
    satisfiability problems over other data types, such as bit vectors,
    or to automata decision problems. We present a set of algebraic
    techniques for solving constraints over the theory of unbounded
    strings natively, without reduction to other problems. These
    techniques can be used to integrate string reasoning into general,
    multi-theory SMT solvers based on the DPLL(T) architecture. We have
    implemented them in our SMT solver CVC4 to expand its already large
    set of built-in theories to a theory of strings with concatenation,
    length, and membership in regular languages. Our initial
    experimental results show that, in addition, over pure string
    problems, CVC4 is highly competitive with specialized string solvers
    with a comparable input language.
  author:
  - family: Liang
    given: Tianyi
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  - family: Deters
    given: Morgan
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 26<sup>th</sup> international conference
    on computer aided verification (CAV'14)
  editor:
  - family: Biere
    given: Armin
  - family: Bloem
    given: Roderick
  id: LRT+14
  issued:
  - year: 2014
    month: 7
  note: Vienna, Austria
  page: 646-662
  publisher: Springer
  title: A DPLL(T) theory solver for a theory of strings and regular
    expressions
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/LRT+14.pdf"
  volume: 8559
- abstract: Cascade is a program static analysis tool developed at New
    York University. Cascade takes as input a program and a control
    file. The control file specifies one or more assertions to be
    checked together with restrictions on program behaviors. The tool
    generates verification conditions for the specified assertions and
    checks them using an SMT solver which either produces a proof or
    gives a concrete trace showing how an assertion can fail. Version
    2.0 supports the majority of standard C features except for floating
    point. It can be used to verify both memory safety as well as
    user-defined assertions. In this paper, we describe the Cascade
    system including some of its distinguishing features such as its
    support for different memory models (trading off precision for
    scalability) and its ability to reason about linked data structures.
  author:
  - family: Wang
    given: Wei
  - family: Barrett
    given: Clark
  - family: Wies
    given: Thomas
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 15<sup>th</sup> international conference
    on verification, model checking, and abstract interpretation (VMCAI
    '14)
  editor:
  - family: McMillan
    given: Kenneth L.
  - family: Rival
    given: Xavier
  id: WBW14
  issued:
  - year: 2014
    month: 1
  note: San Diego, California
  page: 142-160
  publisher: Springer Berlin Heidelberg
  title: Cascade 2.0
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/WBW14.pdf"
  volume: 8318
- abstract: The de facto standard for state-of-the-art real and integer
    linear reasoning within Satisfiability Modulo Theories (SMT) solvers
    is the Simplex for DPLL(T) algorithm given by Dutertre and de Moura.
    This algorithm works by performing a sequence of local optimization
    operations. While the algorithm is generally efficient in practice,
    its local pivoting heuristics lead to slow convergence on some
    problems. More traditional Simplex algorithms minimize a global
    criterion to determine the feasibility of the input constraints. We
    present a novel Simplexbased decision procedure for use in SMT that
    minimizes the sum of infeasibilities of the constraints.
    Experimental results show that this new algorithm is comparable with
    or outperforms Simplex for DPLL(T) on a broad set of benchmarks.
  author:
  - family: King
    given: Timothy
  - family: Barrett
    given: Clark
  - family: Dutertre
    given: Bruno
  container-title: Proceedings of the 13<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'13)
  id: KBD13
  issued:
  - year: 2013
    month: 10
  note: Portland, Oregon
  page: 189-196
  publisher: FMCAD Inc.
  title: Simplex with sum of infeasibilities for SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KBD13.pdf"
- abstract: We present the design and implementation of the Model
    Constructing Satisfiability (MCSat) calculus. The MCSat calculus
    generalizes ideas found in CDCL-style propositional SAT solvers to
    SMT solvers, and provides a common framework where recent
    model-based procedures and techniques can be justified and combined.
    We describe how to incorporate support for linear real arithmetic
    and uninterpreted function symbols in the calculus. We report
    encouraging experimental results, where MCSat performs competitive
    with the state-of-the art SMT solvers without using pre-processing
    techniques and ad-hoc optimizations. The implementation is flexible,
    additional plugins can be easily added, and the code is freely
    available.
  author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  - dropping-particle: de
    family: Moura
    given: Leonardo
  container-title: Proceedings of the 13<sup>th</sup> international conference
    on formal methods in computer-aided design (FMCAD'13)
  id: JBdM13
  issued:
  - year: 2013
    month: 10
  note: Portland, Oregon
  page: 173-180
  publisher: FMCAD Inc.
  title: The design and implementation of the model constructing
    satisfiability calculus
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/JBdM13.pdf"
- abstract: In this paper, we present recent results about the
    verification of counter machines by using decision procedures for
    Presburger arithmetic. We recall several known classes of counter
    machines for which the reachability sets are Presburger-definable as
    well as temporal logics with arithmetical constraints. We discuss
    issues related to flat counter machines, path schema enumeration,
    and the use of SMT solers.
  author:
  - family: Barrett
    given: Clark
  - family: Demri
    given: Stephané
  - family: Deters
    given: Morgan
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 9<sup>th</sup> international symposium
    on frontiers of combining systems (FroCoS'13)
  doi: 10.1007/978-3-642-40885-4_9
  editor:
  - family: Fontaine
    given: Pascal
  - family: Ringeissen
    given: Christophe
  - family: Schmidt
    given: Renate A.
  id: BDD13
  isbn: 978-3-642-40884-7
  issued:
  - year: 2013
    month: 9
  note: Nancy, France
  page: 120-150
  publisher: Springer Berlin Heidelberg
  title: Witness runs for counter machines
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDD13.pdf"
  volume: 8152
- abstract: SMT-based applications increasingly rely on SMT solvers
    being able to deal with quantified formulas. Current work shows that
    for formulas with quantifiers over uninterpreted sorts
    counter-models can be obtained by integrating a finite model finding
    capability into the architecture of a modern SMT solver. We examine
    various strategies for on-demand quantifier instantiation in this
    setting. Here, completeness can be achieved by considering all
    ground instances over the finite domain of each quantifier. However,
    exhaustive instantiation quickly becomes unfeasible with larger
    domain sizes. We propose instantiation strategies to identify and
    consider only a selection of ground instances that suffices to
    determine the satisfiability of the input formula. We also examine
    heuristic quantifier instantiation techniques such as E-matching for
    the purpose of accelerating the search. We give experimental
    evidence that our approach is practical for use in industrial
    applications and is competitive with other approaches.
  author:
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  - family: Goel
    given: Amit
  - family: Krstic
    given: Sava
  - family: Deters
    given: Morgan
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 24<sup>th</sup> international conference
    on automated deduction (CADE'13)
  doi: 10.1007/978-3-642-38574-2_26
  editor:
  - family: Bonacina
    given: Maria Paola
  id: RTG+13
  isbn: 978-3-642-38573-5
  issued:
  - year: 2013
    month: 1
  note: Lake Placid, New York
  page: 377-391
  publisher: Springer Berlin Heidelberg
  title: Quantifier instantiation techniques for finite model finding in
    SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RTG+13.pdf"
  volume: 7898
- abstract: One of the main shortcomings of the traditional methods for
    combining theories is the complexity of guessing the arrangement of
    the variables shared by the individual theories. This paper presents
    a reformulation of the Nelson-Oppen method that takes into account
    explicit equality propagation and can ignore pairs of shared
    variables that the theories do not care about. We show the
    correctness of the new approach and present care functions for the
    theory of uninterpreted functions and the theory of arrays. The
    effectiveness of the new method is illustrated by experimental
    results demonstrating a dramatic performance improvement on
    benchmarks combining arrays and bit-vectors.
  author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 8<sup>th</sup> international symposium
    on frontiers of combining systems (FroCoS'11)
  editor:
  - family: Tinelli
    given: Cesare
  - family: Sofronie-Stokkermans
    given: Viorica
  id: JB11-FroCoS
  issued:
  - year: 2011
    month: 10
  note: Saarbrücken, Germany
  page: 195-210
  publisher: Springer
  title: "Sharing is caring: Combination of theories"
  title-short: Sharing is caring
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/JB11-FroCoS.pdf"
  volume: 6989
- abstract: CVC4 is the latest version of the Cooperating Validity
    Checker. A joint project of NYU and U Iowa, CVC4 aims to support the
    useful feature set of CVC3 and SMT-LIBv2 while optimizing the design
    of the core system architecture and decision procedures to take
    advantage of recent engineering and algorithmic advances. CVC4
    represents a completely new code base; it is a from-scratch rewrite
    of CVC3, and many subsystems have been completely redesigned.
    Additional decision procedures for CVC4 are currently under
    development, but for what it currently achieves, it is a
    lighter-weight and higher-performing tool than CVC3. We describe the
    system architecture, subsystems of note, and discuss some
    applications and continuing work.
  author:
  - family: Barrett
    given: Clark
  - family: Conway
    given: Christopher L.
  - family: Deters
    given: Morgan
  - family: Hadarean
    given: Liana
  - family: Jovanović
    given: Dejan
  - family: King
    given: Tim
  - family: Reynolds
    given: Andrew
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 23<sup>rd</sup> international conference
    on computer aided verification (CAV'11)
  editor:
  - family: Gopalakrishnan
    given: Ganesh
  - family: Qadeer
    given: Shaz
  id: BCD+11
  issued:
  - year: 2011
    month: 7
  note: Snowbird, Utah
  page: 171-177
  publisher: Springer
  title: CVC4
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BCD+11.pdf"
  volume: 6806
- abstract: The classic method of Nelson and Oppen for combining
    decision procedures requires the theories to be stably-infinite.
    Unfortunately, some important theories do not fall into this
    category (e.g. the theory of bit-vectors). To remedy this problem,
    previous work introduced the notion of polite theories. Polite
    theories can be combined with any other theory using an extension of
    the Nelson-Oppen approach. In this paper we revisit the notion of
    polite theories, fixing a subtle flaw in the original definition. We
    give a new combination theorem which specifies the degree to which
    politeness is preserved when combining polite theories. We also give
    conditions under which politeness is preserved when instantiating
    theories by identifying two sorts. These results lead to a more
    general variant of the theorem for combining multiple polite
    theories.
  author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 17<sup>th</sup> international conference
    on logic for programming, artificial intelligence, and reasoning
    (LPAR'10)
  editor:
  - family: Fermüller
    given: Christian G.
  - family: Voronkov
    given: Andrei
  id: JB10-LPAR
  isbn: 3-642-16241-X, 978-3-642-16241-1
  issn: 0302-9743
  issued:
  - year: 2010
    month: 10
  note: Yogyakarta, Indonesia
  page: 402-416
  publisher: Springer
  title: Polite theories revisited
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/JB10-LPAR.pdf"
  volume: 6397
- abstract: For efficiency and portability, network packet processing
    code is typically written in low-level languages and makes use of
    bit-level operations to compactly represent data. Although packet
    data is highly structured, low-level implementation details make it
    difficult to verify that the behavior of the code is consistent with
    high-level data invariants. We introduce a new approach to the
    verification problem, using a high-level definition of packet types
    as part of a specification rather than an implementation. The types
    are not used to check the code directly; rather, the types introduce
    functions and predicates that can be used to assert the consistency
    of code with programmer-defined data assertions. We describe an
    encoding of these types and functions using the theories of
    inductive datatypes, bit vectors, and arrays in the Cvc SMT solver.
    We present a case study in which the method is applied to
    open-source networking code and verified within the Cascade
    verification platform.
  author:
  - family: Conway
    given: Christopher L.
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 22<sup>nd</sup> international conference
    on computer aided verification (CAV'10)
  editor:
  - family: Touili
    given: Tayssir
  - family: Cook
    given: Byron
  - family: Jackson
    given: Paul
  id: CB10
  issued:
  - year: 2010
    month: 7
  note: Edinburgh, Scotland
  page: 306-320
  publisher: Springer
  title: Verifying low-level implementations of high-level datatypes
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/CB10.pdf"
  volume: 6174
- abstract: It is well known that the use of points-to information can
    substantially improve the accuracy of a static program analysis.
    Commonly used algorithms for computing points-to information are
    known to be sound only for memory-safe programs. Thus, it appears
    problematic to utilize points-to information to verify the memory
    safety property without giving up soundness. We show that a sound
    combination is possible, even if the points-to information is
    computed separately and only conditionally sound. This result is
    based on a refined statement of the soundness conditions of
    points-to analyses and a general mechanism for composing
    conditionally sound analyses.
  author:
  - family: Conway
    given: Christopher L.
  - family: Dams
    given: Dennis
  - family: Namjoshi
    given: Kedar S.
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 15<sup>th</sup> international static
    analysis symposium (SAS '08)
  editor:
  - family: Alpuente
    given: María
  - family: Vidal
    given: Germán
  id: CDN+08
  issued:
  - year: 2008
    month: 7
  note: Valencia, Spain
  page: 62-77
  publisher: Springer
  title: Pointer analysis, conditional soundness, and proving the
    absence of errors
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/CDN+08.pdf"
  volume: 5079
- abstract: First order logic provides a convenient formalism for
    describing a wide variety of verification conditions. Two main
    approaches to checking such conditions are pure first order
    automated theorem proving (ATP) and automated theorem proving based
    on satisfiability modulo theories (SMT). Traditional ATP systems are
    designed to handle quantifiers easily, but often have difficulty
    reasoning with respect to theories. SMT systems, on the other hand,
    have built-in support for many useful theories, but have a much more
    difficult time with quantifiers. One clue on how to get the best of
    both worlds can be found in the legacy system Simplify which
    combines built-in theory reasoning with quantifier instantiation
    heuristics. Inspired by Simplify and motivated by a desire to
    provide a competitive alternative to ATP systems, this paper
    describes a methodology for reasoning about quantifiers in SMT
    systems. We present the methodology in the context of the Abstract
    DPLL Modulo Theories framework. Besides adapting many of Simplify's
    techniques, we also introduce a number of new heuristics. Most
    important is the notion of instantiation level which provides an
    effective mechanism for prioritizing and managing the large search
    space inherent in quantifier instantiation techniques. These
    techniques have been implemented in the SMT system CVC3.
    Experimental results show that our methodology enables CVC3 to solve
    a significant number of benchmarks that were not solvable with any
    previous approach.
  author:
  - family: Ge
    given: Yeting
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 21<sup>st</sup> international conference
    on automated deduction (CADE '07)
  editor:
  - family: Pfenning
    given: Frank
  id: GBT07
  issued:
  - year: 2007
    month: 7
  note: Bremen, Germany
  page: 167-182
  publisher: Springer-Verlag
  title: Solving quantified verification conditions using satisfiability
    modulo theories
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/GBT07.pdf"
  volume: 4603
- abstract: CVC3, a joint project of NYU and U Iowa, is the new and
    latest version of the Cooperating Validity Checker. CVC3 extends and
    builds on the functionality of its predecessors and includes many
    new features such as support for additional theories, an abstract
    architecture for Boolean reasoning, and SMT-LIB compliance. We
    describe the system and discuss some applications and continuing
    work.
  author:
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 19<sup>th</sup> international conference
    on computer aided verification (CAV '07)
  editor:
  - family: Damm
    given: Werner
  - family: Hermanns
    given: Holger
  id: BT07
  issued:
  - year: 2007
    month: 7
  note: Berlin, Germany
  page: 298-302
  publisher: Springer-Verlag
  title: CVC3
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BT07.pdf"
  volume: 4590
- abstract: Lazy algorithms for Satisfiability Modulo Theories (SMT)
    combine a generic DPLL-based SAT engine with a theory solver for the
    given theory T that can decide the T-consistency of conjunctions of
    ground literals. For many theories of interest, theory solvers need
    to reason by performing internal case splits. Here we argue that it
    is more convenient to delegate these case splits to the DPLL engine
    instead. The delegation can be done on demand for solvers that can
    encode their internal case splits into one or more clauses, possibly
    including new constants and literals. This results in drastically
    simpler theory solvers. We present this idea in an improved version
    of DPLL(T), a general SMT architecture for the lazy approach, and
    formalize and prove it correct in an extension of Abstract DPLL
    Modulo Theories, a framework for modeling and reasoning about lazy
    algorithms for SMT. A remarkable additional feature of the
    architecture, also discussed in the paper, is that it naturally
    includes an efficient Nelson-Oppen-like combination of multiple
    theories and their solvers.
  author:
  - family: Barrett
    given: Clark
  - family: Nieuwenhuis
    given: Robert
  - family: Oliveras
    given: Albert
  - family: Tinelli
    given: Cesare
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 13<sup>th</sup> international conference
    on logic for programming, artificial intelligence, and reasoning
    (LPAR '06)
  editor:
  - family: Hermann
    given: Miki
  - family: Voronkov
    given: Andrei
  id: BNO+06
  issued:
  - year: 2006
    month: 11
  note: Phnom Penh, Cambodia
  page: 512-526
  publisher: Springer-Verlag
  title: Splitting on demand in SAT modulo theories
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BNO+06.pdf"
  volume: 4246
- abstract: We present a tool, called Cascade, to check assertions in C
    programs as part of a multi-stage verification strategy. Cascade
    takes as input a C program and a control file (the output of an
    earlier stage) that specifies one or more assertions to be checked
    together with (optionally) some restrictions on program behaviors.
    For each assertion, Cascade produces either a concrete trace
    violating the assertion or a deduction (proof) that the assertion
    cannot be violated.
  author:
  - family: Sethi
    given: Nikhil
  - family: Barrett
    given: Clark
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 18<sup>th</sup> international conference
    on computer aided verification (CAV '06)
  editor:
  - family: Ball
    given: Thomas
  - family: Jones
    given: Robert B.
  id: SB06
  issued:
  - year: 2006
    month: 8
  note: Seattle, Washington
  page: 166-169
  publisher: Springer-Verlag
  title: "CASCADE: C assertion checker and deductive engine"
  title-short: CASCADE
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SB06.pdf"
  volume: 4144
- author:
  - family: Barrett
    given: Clark
  - dropping-particle: de
    family: Moura
    given: Leonardo
  - family: Stump
    given: Aaron
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 17<sup>th</sup> international conference
    on computer aided verification (CAV '05)
  editor:
  - family: Etessami
    given: Kousha
  - family: Rajamani
    given: Sriram K.
  id: BdMS05-CAV
  issued:
  - year: 2005
    month: 7
  note: Edinburgh, Scotland
  page: 20-23
  publisher: Springer-Verlag
  title: "SMT-COMP: Satisfiability modulo theories competition"
  title-short: SMT-COMP
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BdMS05-CAV.pdf"
  volume: 3576
- abstract: "We describe a tool called TVOC, that uses the translation
    validation approach to check the validity of compiler optimizations:
    for a given source program, TVOC proves the equivalence of the
    source code and the target code produced by running the compiler.
    There are two phases to the verification process: the first phase
    verifies loop transformations using the proof rule permute; the
    second phase verifies structure-preserving optimizations using the
    proof rule Validate. Verification conditions are validated using the
    automatic theorem prover CVC Lite."
  author:
  - family: Barrett
    given: Clark
  - family: Fang
    given: Yi
  - family: Goldberg
    given: Ben
  - family: Hu
    given: Ying
  - family: Pnueli
    given: Amir
  - family: Zuck
    given: Lenore
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 17<sup>th</sup> international conference
    on computer aided verification (CAV '05)
  editor:
  - family: Etessami
    given: Kousha
  - family: Rajamani
    given: Sriram K.
  id: BFG+05
  issued:
  - year: 2005
    month: 7
  note: Edinburgh, Scotland
  page: 291-295
  publisher: Springer-Verlag
  title: "TVOC: A translation validator for optimizing compilers"
  title-short: TVOC
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BFG+05.pdf"
  volume: 3576
- abstract: Translation validation is a technique that verifies the
    results of every run of a translator, such as a compiler, instead of
    the translator itself. Previous papers by the authors and others
    have described translation validation for compilers that perform
    loop optimizations (such as interchange, tiling, fusion, etc), using
    a proof rule that treats loop optimizations as permutations.
  author:
  - family: Hu
    given: Ying
  - family: Barrett
    given: Clark
  - family: Goldberg
    given: Benjamin
  container-title: Proceedings of the 2<sup>nd</sup> IEEE international
    conference on software engineering and formal methods (SEFM '04)
  id: HBG04
  issued:
  - year: 2004
    month: 9
  note: Beijing, China
  page: 281-289
  publisher: IEEE Computer Society
  title: Theory and algorithms for the generation and validation of
    speculative loop optimizations
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/HBG04.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Berezin
    given: Sergey
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 16<sup>th</sup> international conference
    on computer aided verification (CAV '04)
  editor:
  - family: Alur
    given: Rajeev
  - family: Peled
    given: Doron A.
  id: BB04
  issued:
  - year: 2004
    month: 7
  note: Boston, Massachusetts
  page: 515-518
  publisher: Springer-Verlag
  title: "CVC Lite: A new implementation of the cooperating validity
    checker"
  title-short: CVC Lite
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BB04.pdf"
  volume: 3114
- author:
  - family: Stump
    given: Aaron
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 14<sup>th</sup> international conference
    on computer aided verification (CAV '02)
  editor:
  - family: Brinksma
    given: Ed
  - family: Larsen
    given: Kim Guldstrand
  id: SBD02
  issued:
  - year: 2002
    month: 7
  note: Copenhagen, Denmark
  page: 500-504
  publisher: Springer-Verlag
  title: "CVC: A cooperating validity checker"
  title-short: CVC
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SBD02.pdf"
  volume: 2404
- author:
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  - family: Stump
    given: Aaron
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 14<sup>th</sup> international conference
    on computer aided verification (CAV '02)
  editor:
  - family: Brinksma
    given: Ed
  - family: Larsen
    given: Kim Guldstrand
  id: BDS02-CAV02
  issued:
  - year: 2002
    month: 7
  note: Copenhagen, Denmark
  page: 236-249
  publisher: Springer-Verlag
  title: Checking satisfiability of first-order formulas by incremental
    translation to SAT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDS02-CAV02.pdf"
  volume: 2404
- author:
  - family: Stump
    given: Aaron
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  - family: Levitt
    given: Jeremy
  container-title: Proceedings of the 16<sup>th</sup> IEEE symposium on logic
    in computer science (LICS '01)
  id: SBDL01
  issued:
  - year: 2001
    month: 6
  note: Boston, Massachusetts
  page: 29-37
  publisher: IEEE Computer Society
  title: A decision procedure for an extensional theory of arrays
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SBDL01.pdf"
- author:
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  - family: Stump
    given: Aaron
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 17<sup>th</sup> international conference
    on computer-aided deduction (CADE '00)
  editor:
  - family: McAllester
    given: David
  id: BDS00
  issued:
  - year: 2000
    month: 6
  note: Pittsburgh, Pennsylvania
  page: 79-97
  publisher: Springer-Verlag
  title: A framework for cooperating decision procedures
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDS00.pdf"
  volume: 1831
- author:
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  - family: Levitt
    given: Jeremy R.
  container-title: Proceedings of the 35<sup>th</sup> design automation
    conference (DAC '98)
  id: BDL98
  issued:
  - year: 1998
    month: 6
  note: San Francisco, California.
  award: Best Paper Award
  page: 522-527
  publisher: Association for Computing Machinery
  title: A decision procedure for bit-vector arithmetic
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDL98.pdf"
- author:
  - family: Su
    given: Jeffrey X.
  - family: Dill
    given: David L.
  - family: Barrett
    given: Clark W.
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 1<sup>st</sup> international conference
    on formal methods in computer-aided design (FMCAD '96)
  editor:
  - family: Srivas
    given: Mandayam
  - family: Camilleri
    given: Albert
  id: SDB96
  issued:
  - year: 1996
    month: 11
  note: Palo Alto, California
  page: 377-388
  publisher: Springer-Verlag
  title: Automatic generation of invariants in processor verification
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SDB96.pdf"
  volume: 1166
- author:
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  - family: Levitt
    given: Jeremy R.
  collection-title: Lecture notes in computer science
  container-title: Proceedings of the 1<sup>st</sup> international conference
    on formal methods in computer-aided design (FMCAD '96)
  editor:
  - family: Srivas
    given: Mandayam
  - family: Camilleri
    given: Albert
  id: BDL96
  issued:
  - year: 1996
    month: 11
  note: Palo Alto, California
  page: 187-201
  publisher: Springer-Verlag
  title: Validity checking for combinations of theories with equality
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDL96.pdf"
  volume: 1166
- abstract: This extended abstract describes work in progress on
    Smt-Switch, an open-source, solver-agnostic API for SMT solving.
    Smt-Switch provides an abstract interface, which can be implemented
    by different SMT solvers. Smt-Switch provides simple, uniform, and
    high-performance access to SMT solving for applications in areas
    such as automated reasoning, planning, and formal verification. The
    interface allows the user to create, traverse, and manipulate terms,
    as well as to dynamically dispatch queries to different underlying
    SMT solvers.
  author:
  - family: Mann
    given: Makai
  - family: Wilson
    given: Amalee
  - family: Tinelli
    given: Cesare
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 18<sup>th</sup> international workshop
    on satisfiability modulo theories (SMT'20)
  id: MWT+20
  issued:
  - year: 2020
    month: 7
  title: "Smt-switch: A solver-agnostic c++ API for SMT solving
    (extended abstract)"
  title-short: Smt-switch
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MWT+20.pdf"
- abstract: This work is a part of an ongoing effort to prove the
    correctness of invertibility conditions for the theory of
    fixed-width bit-vectors, which are used to solve quantified
    bit-vector formulas in the Satisfiability Modulo Theories (SMT)
    solver CVC4. While many of these were proved in a completely
    automatic fashion for any bit-width, some were only proved for
    bit-widths up to 65, even though they are being used to solve
    formulas over arbitrary bit-widths. In this paper we describe our
    initial efforts in proving a subset of these invertibility
    conditions in the Coq proof assistant. We describe the Coq library
    that we use, as well as the extensions that we introduced to it.
  author:
  - family: Ekici
    given: Burak
  - family: Viswanathan
    given: Arjun
  - family: Zohar
    given: Yoni
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  collection-title: Electronic proceedings in theoretical computer
    science
  container-title: Proceedings of the sixth workshop on proof eXchange
    for theorem proving (PxTP'19)
  editor:
  - family: Reis
    given: Giselle
  - family: Barbosa
    given: Haniel
  id: EVZ+19
  issued:
  - year: 2019
    month: 8
  note: Natal, Brazil
  page: 18-26
  title: Verifying bit-vector invertibility conditions in coq (extended
    abstract)
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/EVZ+19.pdf"
  volume: 301
- abstract: Deep reinforcement learning (RL) has recently been
    successfully applied to networking contexts including routing, flow
    scheduling, congestion control, packet classification, cloud
    resource management, and video streaming. Deep-RL-driven systems
    automate decision making, and have been shown to outperform
    state-of-the-art handcrafted systems in important domains. However,
    the (typical) non-explainability of decisions induced by the deep
    learning machinery employed by these systems renders reasoning about
    crucial system properties, including correctness and security,
    extremely difficult. We show that despite the obscurity of decision
    making in these contexts, verifying that deep-RL-driven systems
    adhere to desired, designer-specified behavior, is achievable. To
    this end, we initiate the study of formal verification of deep RL
    and present Verily, a system for verifying deep-RL-based systems
    that leverages recent advances in verification of deep neural
    networks. We employ Verily to verify recently-introduced
    deep-RL-driven systems for adaptive video streaming, cloud resource
    management, and Internet congestion control. Our results expose
    scenarios in which deep-RL-driven decision making yields undesirable
    behavior. We discuss guidelines for building deep-RL-driven systems
    that are both safer and easier to verify.
  author:
  - family: Kazak
    given: Yafim
  - family: Barrett
    given: Clark
  - family: Katz
    given: Guy
  - family: Schapira
    given: Michael
  container-title: Proceedings of the 2019 workshop on network meets AI
    & ML (NetAI'19)
  doi: 10.1145/3341216.3342218
  id: KBK+19
  isbn: 9781450368728
  issued:
  - year: 2019
    month: 8
  note: Beijing, China
  page: 83-89
  publisher: Association for Computing Machinery
  title: Verifying deep-RL-driven systems
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KBK+19.pdf"
- abstract: In this paper, we explore a development paradigm for SMT
    solver developers where rewrite rules are suggested to the developer
    using syntax-guided enumeration. We capitalize on the recent
    advances in enumerative syntax-guided synthesis (SyGuS) techniques
    for efficiently enumerating terms in a grammar of interest, and
    novel sampling techniques for testing equivalence between terms. We
    present our preliminary experience with this feature in the SMT
    solver cvc4, showing its impact on its rewriting capabilities using
    several internal metrics, and its subsequent impact on solving
    bit-vector and string constraints.
  author:
  - family: Reynolds
    given: Andrew
  - family: Barbosa
    given: Haniel
  - family: Niemetz
    given: Aina
  - family: Nötzli
    given: Andres
  - family: Preiner
    given: Mathias
  - family: Barrett
    given: Clark
  - family: Tinelli
    given: Cesare
  container-title: Proceedings of the 16<sup>th</sup> international workshop
    on satisfiability modulo theories (SMT'18)
  id: RBN+18
  issued:
  - year: 2018
    month: 7
  note: Oxford, United Kingdom
  title: Rewrites for SMT solvers using syntax-guided enumeration
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RBN+18.pdf"
- abstract: Autonomous vehicles are highly complex systems, required to
    function reliably in a wide variety of situations. Manually crafting
    software controllers for these vehicles is difficult, but there has
    been some success in using deep neural networks generated using
    machine-learning. However, deep neural networks are opaque to human
    engineers, rendering their correctness very difficult to prove
    manually; and existing automated techniques, which were not designed
    to operate on neural networks, fail to scale to large systems. This
    paper focuses on proving the adversarial robustness of deep neural
    networks, i.e. proving that small perturbations to a
    correctly-classified input to the network cannot cause it to be
    misclassified. We describe some of our recent and ongoing work on
    verifying the adversarial robustness of networks, and discuss some
    of the open questions we have encountered and how they might be
    addressed.
  author:
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Dill
    given: David L.
  - family: Julian
    given: Kyle
  - family: Kochenderfer
    given: Mykel J.
  collection-title: Electronic proceedings in theoretical computer
    science
  container-title: Proceedings of the first workshop on formal
    verification of autonomous vehicles (FVAV'17)
  editor:
  - family: Bulwahn
    given: Lukas
  - family: Kamali
    given: Maryam
  - family: Linker
    given: Sven
  id: KBD+17-FVAV
  issued:
  - year: 2017
    month: 9
  note: Turin, Italy
  page: 19-26
  title: Towards proving the adversarial robustness of deep neural
    networks
  type: paper-conference
  url: "http://eptcs.web.cse.unsw.edu.au/paper.cgi?FVAV2017.3"
  volume: 257
- author:
  - family: King
    given: Tim
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 9<sup>th</sup> international workshop on
    satisfiability modulo theories (SMT'11)
  id: KB11
  issued:
  - year: 2011
    month: 7
  note: Snowbird, Utah
  title: Exploring and categorizing error spaces using BMC and SMT
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/KB11.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Stump
    given: Aaron
  - family: Tinelli
    given: Cesare
  container-title: Proceedings of the 8<sup>th</sup> international workshop on
    satisfiability modulo theories (SMT'10)
  id: BST10
  issued:
  - year: 2010
    month: 7
  note: Edinburgh, Scotland
  title: The SMT-LIB standard -- version 2.0
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BST10.pdf"
- author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 8<sup>th</sup> international workshop on
    satisfiability modulo theories (SMT'10)
  id: JB10-SMT
  issued:
  - year: 2010
    month: 7
  note: Edinburgh, Scotland
  title: Sharing is caring
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/JB10-SMT.pdf"
- author:
  - family: Reynolds
    given: Andrew
  - family: Hadarean
    given: Liana
  - family: Tinelli
    given: Cesare
  - family: Ge
    given: Yeting
  - family: Stump
    given: Aaron
  - family: Barrett
    given: Clark
  container-title: Proceedings of the 8<sup>th</sup> international workshop on
    satisfiability modulo theories (SMT'10)
  id: RHT+10
  issued:
  - year: 2010
    month: 7
  note: Edinburgh, Scotland
  title: Comparing proof systems for linear real arithmetic with LFSC
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/RHT+10.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Shikanian
    given: Igor
  - family: Tinelli
    given: Cesare
  collection-title: Electronic notes in theoretical computer science
  container-title: Combined proceedings of the 4<sup>th</sup> workshop on
    pragmatics of decision procedures in automated reasoning (PDPAR '06)
    and the 1<sup>st</sup> international workshop on probabilistic automata
    and logics (PaUL '06)
  editor:
  - family: Cook
    given: Byron
  - family: Sebastiani
    given: Roberto
  id: BST07-PDPAR
  issued:
  - year: 2007
    month: 6
  note: Seattle, Washington
  page: 23-37
  publisher: Elsevier
  title: An abstract decision procedure for satisfiability in the theory
    of recursive data types
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BST07-PDPAR.pdf"
  volume: 174(8)
- author:
  - family: McLaughlin
    given: Sean
  - family: Barrett
    given: Clark
  - family: Ge
    given: Yeting
  collection-title: Electronic notes in theoretical computer science
  container-title: Proceedings of the 3<sup>rd</sup> workshop on pragmatics of
    decision procedures in automated reasoning (PDPAR '05)
  editor:
  - family: Armando
    given: Alessandro
  - family: Cimatti
    given: Alessandro
  id: MBG06
  issued:
  - year: 2006
    month: 1
  note: Edinburgh, Scotland
  page: 43-51
  publisher: Elsevier
  title: "Cooperating theorem provers: A case study combining HOL-Light
    and CVC Lite"
  title-short: Cooperating theorem provers
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/MBG06.pdf"
  volume: 144(2)
- author:
  - family: Hu
    given: Ying
  - family: Barrett
    given: Clark
  - family: Goldberg
    given: Benjamin
  - family: Pnueli
    given: Amir
  collection-title: Electronic notes in theoretical computer science
  container-title: Proceedings of the 4<sup>th</sup> international workshop on
    compiler optimization meets compiler verificaiton (COCV '05)
  editor:
  - family: Knoop
    given: J.
  - family: Necula
    given: G. C.
  - family: Zimmermann
    given: W.
  id: HBG+05
  issued:
  - year: 2005
    month: 12
  note: Edinburgh, Scotland
  page: 69-84
  publisher: Elsevier
  title: Validating more loop optimizations
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/HBG+05.pdf"
  volume: 141(2)
- author:
  - family: Goldberg
    given: Benjamin
  - family: Zuck
    given: Lenore
  - family: Barrett
    given: Clark
  collection-title: Electronic notes in theoretical computer science
  container-title: Proceedings of the 3<sup>rd</sup> international workshop on
    compiler optimization meets compiler verificaiton (COCV '04)
  editor:
  - family: Knoop
    given: J.
  - family: Necula
    given: G. C.
  - family: Zimmermann
    given: W.
  id: GZB05
  issued:
  - year: 2005
    month: 5
  note: Barcelona, Spain
  page: 53-71
  publisher: Elsevier
  title: "Into the loops: Practical issues in translation validation for
    optimizing compilers"
  title-short: Into the loops
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/GZB05.pdf"
  volume: 132(1)
- author:
  - family: Berezin
    given: Sergey
  - family: Barrett
    given: Clark
  - family: Shikanian
    given: Igor
  - family: Chechik
    given: Marsha
  - family: Gurfinkel
    given: Arie
  - family: Dill
    given: David L.
  collection-title: Electronic notes in theoretical computer science
  container-title: Selected papers from the workshops on disproving and
    the second international workshop on pragmatics of decision
    procedures (PDPAR '04)
  editor:
  - family: Ahrendt
    given: Wolfgang
  - family: Baumgartner
    given: Peter
  - dropping-particle: de
    family: Nivelle
    given: Hans
  - family: Ranise
    given: Silvio
  - family: Tinelli
    given: Cesare
  id: BBS+05
  issued:
  - year: 2005
    month: 7
  note: Cork, Ireland
  page: 13-23
  publisher: Elsevier
  title: A practical approach to partial functions in CVC Lite
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BBS+05.pdf"
  volume: 125(3)
- author:
  - family: Barrett
    given: Clark
  - family: Donham
    given: Jacob
  collection-title: Electronic notes in theoretical computer science
  container-title: Selected papers from the workshops on disproving and
    the second international workshop on pragmatics of decision
    procedures (PDPAR '04)
  editor:
  - family: Ahrendt
    given: Wolfgang
  - family: Baumgartner
    given: Peter
  - dropping-particle: de
    family: Nivelle
    given: Hans
  - family: Ranise
    given: Silvio
  - family: Tinelli
    given: Cesare
  id: BD05
  issued:
  - year: 2005
    month: 7
  note: Cork, Ireland
  page: 3-12
  publisher: Elsevier
  title: Combining SAT methods with non-clausal decision heuristics
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BD05.pdf"
  volume: 125(3)
- author:
  - family: Barrett
    given: Clark
  - family: Berezin
    given: Sergey
  container-title: Proceedings of the 1<sup>st</sup> international workshop on
    pragmatics of decision procedures in automated reasoning (PDPAR '03)
  id: BB03
  issued:
  - year: 2003
    month: 7
  note: Miami, Florida
  title: A proof-producing boolean search engine
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BB03.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Goldberg
    given: Benjamin
  - family: Zuck
    given: Lenore
  collection-title: Electronic notes in theoretical computer science
  container-title: Proceedings of the 3<sup>rd</sup> international workshop on
    run-time verification (RV '03)
  editor:
  - family: Sokolsky
    given: Oleg
  - family: Viswanathan
    given: Mahesh
  id: BGZ03
  issued:
  - year: 2003
    month: 10
  note: Boulder, Colorado
  page: 89-107
  publisher: Elsevier
  title: Run-time validation of speculative optimizations using CVC
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BGZ03.pdf"
  volume: 89(2)
- author:
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  - family: Stump
    given: Aaron
  collection-title: Lecture notes in artificial intelligence
  container-title: Proceedings of the 4<sup>th</sup> international workshop on
    frontiers of combining systems (FroCoS '02)
  editor:
  - family: Armando
    given: Alessandro
  id: BDS02-FROCOS02
  issued:
  - year: 2002
    month: 4
  note: Santa Margherita Ligure, Italy
  page: 132-146
  publisher: Springer-Verlag
  title: A generalization of Shostak's method for combining decision
    procedures
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDS02-FROCOS02.pdf"
  volume: 2309
- author:
  - family: Stump
    given: Aaron
  - family: Barrett
    given: Clark W.
  - family: Dill
    given: David L.
  collection-title: Electronic notes in theoretical computer science
  container-title: Proceedings of the 3<sup>rd</sup> international workshop on
    logical frameworks and meta-languages (LFM '02)
  editor:
  - family: Pfenning
    given: Frank
  id: SBD02b
  issued:
  - year: 2002
    month: 7
  note: Copenhagen, Denmark
  page: 29-41
  publisher: Elsevier
  title: Producing proofs from an arithmetic decision procedure in
    elliptical LF
  type: paper-conference
  url: "http://theory.stanford.edu/\\~barrett/pubs/SBD02b.pdf"
  volume: 70(2)
- abstract: The high computational and memory requirements of large
    language model (LLM) inference make it feasible only with multiple
    high-end accelerators. Motivated by the emerging demand for
    latency-insensitive tasks with batched processing, this paper
    initiates the study of high-throughput LLM inference using limited
    resources, such as a single commodity GPU. We present FlexGen, a
    high-throughput generation engine for running LLMs with limited GPU
    memory. FlexGen can be flexibly configured under various hardware
    resource constraints by aggregating memory and computation from the
    GPU, CPU, and disk. By solving a linear programming problem, it
    searches for efficient patterns to store and access tensors. FlexGen
    further compresses the weights and the attention cache to 4 bits
    with negligible accuracy loss. These techniques enable FlexGen to
    have a larger space of batch size choices and thus significantly
    increase maximum throughput. As a result, when running OPT-175B on a
    single 16GB GPU, FlexGen achieves significantly higher throughput
    compared to state-of-the-art offloading systems, reaching a
    generation throughput of 1 token/s for the first time with an
    effective batch size of 144. On the HELM benchmark, FlexGen can
    benchmark a 30B model with a 16GB GPU on 7 representative
    sub-scenarios in 21 hours.
  author:
  - family: Sheng
    given: Ying
  - family: Zheng
    given: Lianmin
  - family: Yuan
    given: Binhang
  - family: Li
    given: Zhuohan
  - family: Ryabinin
    given: Max
  - family: Fu
    given: Daniel Y.
  - family: Xie
    given: Zhiqiang
  - family: Chen
    given: Beidi
  - family: Barrett
    given: Clark
  - family: Gonzalez
    given: Joseph E.
  - family: Liang
    given: Percy
  - family: Ré
    given: Christopher
  - family: Stoica
    given: Ion
  - family: Zhang
    given: Ce
  id: SZY+23
  issued:
  - year: 2023
    month: 1
  title: "FlexGen: High-throughput generative inference of large
    language models with a single GPU"
  title-short: FlexGen
  type: report
  url: "http://arxiv.org/abs/2303.06865"
- abstract: Domain-specific languages for hardware can significantly
    enhance designer productivity, but sometimes at the cost of ease of
    verification. On the other hand, ISA specification languages are too
    static to be used during early stage design space exploration. We
    present PEak, an open-source hardware design and specification
    language, which aims to improve both design productivity and
    verification capability. PEak does this by providing a single source
    of truth for functional models, formal specifications, and RTL. PEak
    has been used in several academic projects, and PEak-generated RTL
    has been included in three fabricated hardware accelerators. In
    these projects, the formal capabilities of PEak were crucial for
    enabling both novel design space exploration techniques and
    automated compiler synthesis.
  author:
  - family: Donovick
    given: Caleb
  - family: Daly
    given: Ross
  - family: Melchert
    given: Jackson
  - family: Truong
    given: Lenny
  - family: Raina
    given: Priyanka
  - family: Hanrahan
    given: Pat
  - family: Barrett
    given: Clark
  id: DDM+23
  issued:
  - year: 2023
    month: 1
  title: "PEak: A single source of truth for hardware design and
    verification"
  title-short: PEak
  type: report
  url: "http://arxiv.org/abs/2308.13106"
- author:
  - family: Ganesan
    given: Karthik
  - family: Lonsing
    given: Florian
  - family: Nuthakki
    given: Srinivasa Shashank
  - family: Singh
    given: Eshan
  - family: Fadiheh
    given: Mohammad Rahmani
  - family: Kunz
    given: Wolfgang
  - family: Stoffel
    given: Dominik
  - family: Barrett
    given: Clark
  - family: Mitra
    given: Subhasish
  id: GLN+20
  issued:
  - year: 2021
    month: 1
  title: Effective pre-silicon verification of processor cores by
    breaking the bounds of symbolic quick error detection
  type: report
  url: "http://arxiv.org/abs/2106.10392"
- author:
  - family: Strong
    given: Christopher A.
  - family: Wu
    given: Haoze
  - family: Zeljić
    given: Aleksandar
  - family: Julian
    given: Kyle D.
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Kochenderfer
    given: Mykel J.
  id: SWZ+20
  issued:
  - year: 2020
    month: 1
  title: Global optimization of objective functions represented by ReLU
    networks
  type: report
  url: "http://arxiv.org/abs/2010.03258"
- author:
  - family: Blackshear
    given: Sam
  - family: Dill
    given: David L.
  - family: Qadeer
    given: Shaz
  - family: Barrett
    given: Clark W.
  - family: Mitchell
    given: John C.
  - family: Padon
    given: Oded
  - family: Zohar
    given: Yoni
  id: BDQ+20
  issued:
  - year: 2020
    month: 1
  title: "Resources: A safe language abstraction for money"
  title-short: Resources
  type: report
  url: "https://arxiv.org/abs/2004.05106"
- author:
  - family: Kuper
    given: Lindsey
  - family: Katz
    given: Guy
  - family: Gottschlich
    given: Justin
  - family: Julian
    given: Kyle
  - family: Barrett
    given: Clark
  - family: Kochenderfer
    given: Mykel
  id: KKG+18
  issued:
  - year: 2018
    month: 1
  title: Toward scalable verification for safety-critical deep networks
  type: report
  url: "https://arxiv.org/abs/1801.05950"
- author:
  - family: Carlini
    given: Nicholas
  - family: Katz
    given: Guy
  - family: Barrett
    given: Clark
  - family: Dill
    given: David L.
  id: CKB+18
  issued:
  - year: 2018
    month: 1
  title: Provably minimally-distorted adversarial examples
  type: report
  url: "https://arxiv.org/abs/1709.10207"
- abstract: "What is the best way to allocate assets across an
    investment portfolio to minimise risk? How should an airline,
    operating on razor-thin profit margins, assign flight crew to
    flights to minimise costs--at the same time meeting regulations and
    ensuring the schedule is robust? What is the most effective way to
    test a software system in a limited time? Are there any unforseen
    security holes in a new business-critical computer system? All these
    practical problems involve finding solutions to complex systems of
    constraining requirements that can be formulated mathematically. The
    task resembles problem-solving in school maths: formulate some
    equations that relate quantities in the problem to be solved, and
    then find the right values for the variables that make the equations
    true. In business and industry, however, the problems are vastly
    larger and the mathematics much more complex and varied. These
    important problems cannot be solved by hand, but must be tackled by
    computer software algorithms. A prominent example is linear
    programming, a mathematical optimisation technique with wide
    applications in modern company management and microeconomics. First
    used in earnest for planning in World War II, linear programming has
    been a mainstay of business and industry since the 1950s. Over the
    past decade, a new and revolutionary problem-solving technology has
    emerged: Satisfiability Modulo Theories, or 'SMT' for short. Like
    linear programming, it is a computerised method for finding
    solutions to business and industrial problems expressed
    mathematically by systems of constraints. But SMT can handle a
    richer language of constraints than linear programming, and the
    method encompasses a more varied range of mathematical concepts--so
    it has the flexibility to tackle many different kinds of problems.
    With established success in the engineering design of computer
    chips, software that implements SMT does have limits to the size of
    problem it can handle--but it has also seen truly astonishing
    increases in speed and capacity over the past decade. The core SMT
    algorithms are generic and not special to a particular problem. So,
    end-users who can frame their practical business and industrial
    problems in a mathematical way suitable for SMT automatically
    benefit from intense investment by the highly skilled technical
    specialists who develop SMT algorithms, a smart way to tap into a
    sophisticated technology that is improving by leaps and bounds every
    year. To exploit SMT effectively, you have to express the problem to
    be solved in the right mathematical way. Some types of problems have
    well-understood translations into SMT, so the technology is ready
    for early adoption by at least some enterprises seeking competitive
    advantage. SMT solutions to other kinds of problems are the subject
    of active academic and industrial research--and many more lie
    awaiting creative discovery. This report explains the background to
    SMT technology and presents several success stories. Our aim is to
    give a sense of the potential of SMT as an effective solution to
    some of today's problems--and a unique emerging technology to watch
    in the future."
  author:
  - family: Barrett
    given: Clark
  - family: Kroening
    given: Daniel
  - family: Melham
    given: Thomas
  id: BKM14
  issued:
  - year: 2014
    month: 6
  note: Knowledge Transfer Report
  number: 3
  publisher: London Mathematical Society; Smith Institute for Industrial
    Mathematics; System Engineering
  title: "Problem solving for the 21st century: Efficient solvers for
    satisfiability modulo theories"
  title-short: Problem solving for the 21st century
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/BKM14.pdf"
- author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  id: JB11-TR
  issued:
  - year: 2011
    month: 10
  number: TR2011-940
  publisher: Depatrment of Computer Science, New York University
  title: "Sharing is caring: Combination of theories"
  title-short: Sharing is caring
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/JB11-TR.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Deters
    given: Morgan
  - family: Oliveras
    given: Albert
  - family: Stump
    given: Aaron
  id: BDOS10-TR
  issued:
  - year: 2010
    month: 7
  number: TR2010-931
  publisher: Depatrment of Computer Science, New York University
  title: Design and results of the 4<sup>th</sup> annual satisfiability modulo
    theories competition (SMT-COMP 2008)
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/BDOS10-TR.pdf"
- author:
  - family: Jovanović
    given: Dejan
  - family: Barrett
    given: Clark
  id: JB10-TR
  issued:
  - year: 2010
    month: 1
  number: TR2010-922
  publisher: Depatrment of Computer Science, New York University
  title: Polite theories revisited
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/JB10-TR.pdf"
- author:
  - family: Conway
    given: Christopher L.
  - family: Dams
    given: Dennis
  - family: Namjoshi
    given: Kedar S.
  - family: Barrett
    given: Clark
  id: CDN+08-TR
  issued:
  - year: 2008
    month: 3
  number: TR2008-910
  publisher: Depatrment of Computer Science, New York University
  title: Points-to analysis, conditional soundness, and proving the
    absence of errors
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/CDN+08-TR.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Nieuwenhuis
    given: Robert
  - family: Oliveras
    given: Albert
  - family: Tinelli
    given: Cesare
  id: BNO+06-TR
  issued:
  - year: 2006
    month: 8
  number: 06-05
  publisher: Department of Computer Science, University of Iowa
  title: Splitting on demand in SAT Modulo Theories
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/BNO+06-TR.pdf"
- author:
  - family: Barrett
    given: Clark
  - family: Shikanian
    given: Igor
  - family: Tinelli
    given: Cesare
  id: BST05
  issued:
  - year: 2005
    month: 11
  number: TR2005-878
  publisher: Department of Computer Science, New York University
  title: An abstract decision procedure for satisfiability in the theory
    of recursive data types
  type: report
  url: "http://theory.stanford.edu/\\~barrett/pubs/BST05.pdf"
- author:
  - family: Barrett
    given: Clark W.
  genre: PhD thesis
  id: B03
  issued:
  - year: 2003
    month: 1
  note: Stanford, California
  publisher: Stanford University
  title: Checking validity of quantifier-free formulas in combinations
    of first-order theories
  type: thesis
  url: "http://theory.stanford.edu/\\~barrett/pubs/B03.pdf"
- author:
  - family: Barrett
    given: Clark
  container-title: Journal of Automated Reasoning
  doi: 10.1007/s10817-013-9295-4
  id: B13
  issue: 4
  issued:
  - year: 2013
    month: 12
  page: 453-456
  publisher: Springer Netherlands
  title: "\"Decision Procedures:An Algorithmic Point of View,\" by Daniel
    Kroening and Ofer Strichman, Springer-Verlag, 2008"
  type: article-journal
  url: "http://theory.stanford.edu/\\~barrett/pubs/B13.pdf"
  volume: 51

- author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Zohar
    given: Yoni
  collection-title: Lecture notes in computer science
  container-title: Computer aided verification - 36th international
    conference, CAV 2024, montreal, QC, canada, july 24-27, 2024,
    proceedings, part I
  doi: 10.1007/978-3-031-65627-9\\\_9
  editor:
  - family: Gurfinkel
    given: Arie
  - family: Ganesh
    given: Vijay
  id: "DBLP:conf/cav/NiemetzPZ24"
  issued:
  - year: 2024
    month: 1
  page: 178-200
  publisher: Springer
  title: Scalable bit-blasting with abstractions
  type: paper-conference
  url: "https://doi.org/10.1007/978-3-031-65627-9\\\\\\_9"
  volume: 14681
- author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  collection-title: Lecture notes in computer science
  container-title: Computer aided verification - 35th international
    conference, CAV 2023, paris, france, july 17-22, 2023, proceedings,
    part II
  doi: 10.1007/978-3-031-37703-7\\\_1
  editor:
  - family: Enea
    given: Constantin
  - family: Lal
    given: Akash
  id: "DBLP:conf/cav/NiemetzP23"
  issued:
  - year: 2023
    month: 1
  page: 3-17
  publisher: Springer
  title: Bitwuzla
  type: paper-conference
  url: "https://doi.org/10.1007/978-3-031-37703-7\\\\\\_1"
  volume: 13965
- author:
  - family: Fazekas
    given: Katalin
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Kirchweger
    given: Markus
  - family: Szeider
    given: Stefan
  - family: Biere
    given: Armin
  collection-title: LIPIcs
  container-title: 26th international conference on theory and
    applications of satisfiability testing, SAT 2023, july 4-8, 2023,
    alghero, italy
  doi: 10.4230/LIPICS.SAT.2023.8
  editor:
  - family: Mahajan
    given: Meena
  - family: Slivovsky
    given: Friedrich
  id: "DBLP:conf/sat/FazekasNPKSB23"
  issued:
  - year: 2023
    month: 1
  page: "8:1-8:13"
  publisher: Schloss Dagstuhl - Leibniz-Zentrum für Informatik
  title: "IPASIR-UP: User propagators for CDCL"
  type: paper-conference
  url: "https://doi.org/10.4230/LIPIcs.SAT.2023.8"
  volume: 271
- author:
  - family: Scott
    given: Joseph
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Nejati
    given: Saeed
  - family: Ganesh
    given: Vijay
  container-title: Int. J. Softw. Tools Technol. Transf.
  doi: 10.1007/S10009-023-00696-0
  id: "DBLP:journals/sttt/ScottNPNG23"
  issue: 2
  issued:
  - year: 2023
    month: 1
  page: 219-239
  title: Algorithm selection for SMT
  type: article-journal
  url: "https://doi.org/10.1007/s10009-023-00696-0"
  volume: 25
- author:
  - family: Kremer
    given: Gereon
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  collection-title: Lecture notes in computer science
  container-title: Computer aided verification - 33rd international
    conference, CAV 2021, virtual event, july 20-23, 2021, proceedings,
    part II
  doi: 10.1007/978-3-030-81688-9\\\_11
  editor:
  - family: Silva
    given: Alexandra
  - family: Leino
    given: K. Rustan M.
  id: "DBLP:conf/cav/KremerNP20"
  issued:
  - year: 2021
    month: 7
  page: 231-242
  publisher: Springer
  title: "ddSMT 2.0: Better delta debugging for the SMT-LIBv2 language
    and friends"
  title-short: ddSMT 2.0
  type: paper-conference
  url: "https://doi.org/10.1007/978-3-030-81688-9\\\\\\_11"
  volume: 12760
- author:
  - family: Scott
    given: Joseph
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Nejati
    given: Saeed
  - family: Ganesh
    given: Vijay
  collection-title: Lecture notes in computer science
  container-title: Tools and algorithms for the construction and
    analysis of systems - 27th international conference, TACAS 2021,
    held as part of the european joint conferences on theory and
    practice of software, ETAPS 2021, luxembourg city, luxembourg, march
    27 - april 1, 2021, proceedings, part II
  doi: 10.1007/978-3-030-72013-1\\\_16
  editor:
  - family: Groote
    given: Jan Friso
  - family: Larsen
    given: Kim Guldstrand
  id: "DBLP:conf/tacas/ScottNPNG21"
  issued:
  - year: 2021
    month: 4
  page: 303-325
  publisher: Springer
  title: "MachSMT: A machine learning-based algorithm selector for SMT
    solvers"
  title-short: MachSMT
  type: paper-conference
  url: "https://doi.org/10.1007/978-3-030-72013-1\\\\\\_16"
  volume: 12652
- author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  container-title: 2020 formal methods in computer aided design, FMCAD
    2020, haifa, israel, september 21-24, 2020
  doi: 10.34727/2020/isbn.978-3-85448-042-6\\\_29
  id: "DBLP:conf/fmcad/NiemetzP20"
  issued:
  - year: 2020
    month: 9
  page: 214-224
  publisher: IEEE
  title: Ternary propagation-based local search for more bit-precise
    reasoning
  type: paper-conference
  url: "https://doi.org/10.34727/2020/isbn.978-3-85448-042-6\\\\\\_29"
- author:
  - family: Niemetz
    given: Aina
  - family: Preiner
    given: Mathias
  - family: Wolf
    given: Clifford
  - family: Biere
    given: Armin
  collection-title: Lecture notes in computer science
  container-title: Computer aided verification - 30th international
    conference, CAV 2018, held as part of the federated logic
    conference, FloC 2018, oxford, UK, july 14-17, 2018, proceedings,
    part I
  doi: 10.1007/978-3-319-96145-3\\\_32
  editor:
  - family: Chockler
    given: Hana
  - family: Weissenbacher
    given: Georg
  id: "DBLP:conf/cav/NiemetzPWB18"
  issued:
  - year: 2018
    month: 7
  page: 587-595
  publisher: Springer
  title: Btor2 , BtorMC and boolector 3.0
  type: paper-conference
  url: "https://doi.org/10.1007/978-3-319-96145-3\\\\\\_32"
  volume: 10981
- author:
  - family: Nötzli
    given: Andres
  genre: PhD thesis
  id: AN2021
  issued:
  - year: 2021
    month: 6
  note: Stanford, California
  publisher: Stanford University
  title: Towards better simplifications in SMT solvers with applications
    in string solving
  type: thesis
  url: "https://searchworks.stanford.edu/view/13876436"
- author:
  - family: Mann
    given: Makai
  genre: PhD thesis
  id: MM2021
  issued:
  - year: 2021
    month: 8
  note: Stanford, California
  publisher: Stanford University
  title: Augmenting transition systems for scalable symbolic model
    checking
  type: thesis
  url: "https://searchworks.stanford.edu/view/13972018"
